Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ARRAY
    AS
    CALLABLE
    CATCH
    CLASS
    CLONE
    CONST
    CONTINUE
    DECLARE
    DIE
    DOT
    DOUBLEQUOTE
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EVAL
    EXIT
    EXTENDS
    FOREACH
    GLOBAL
    GOTO
    HASHTAG
    IMPLEMENTS
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MINUSEQUAL
    NAMESPACE
    NEW
    PLUSEQUAL
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    QUESTIONMARK
    QUOTE
    REQUIRE_ONCE
    STATIC
    THROW
    TIMESEQUAL
    TRAIT
    TRY
    UNSET
    USE
    __HALT_COMPILER

Grammar

Rule 0     S' -> program
Rule 1     program -> OPENTAG declaration_list CLOSETAG
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> echo_stmt
Rule 6     declaration -> selection_stmt
Rule 7     declaration -> iteration_stmt
Rule 8     declaration -> fun_declaration
Rule 9     declaration -> header_declaration
Rule 10    echo_stmt -> echo_stmt ECHO data_type SEMICOLON
Rule 11    echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON
Rule 12    echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON
Rule 13    echo_stmt -> empty
Rule 14    data_type -> NUMBER
Rule 15    data_type -> boolean
Rule 16    data_type -> STRING
Rule 17    boolean -> TRUE
Rule 18    boolean -> FALSE
Rule 19    var_declaration -> var_declaration2 SEMICOLON
Rule 20    var_declaration2 -> IDVAR var_declaration2
Rule 21    var_declaration2 -> IDVAR
Rule 22    var_declaration2 -> TIMESTIMES IDVAR
Rule 23    var_declaration2 -> TIMESTIMES IDVAR var_declaration2
Rule 24    var_declaration2 -> IDVAR EQUAL data_type var_declaration2
Rule 25    var_declaration2 -> IDVAR EQUAL data_type
Rule 26    var_declaration2 -> IDVAR EQUAL IDVAR var_declaration2
Rule 27    var_declaration2 -> IDVAR EQUAL IDVAR
Rule 28    var_declaration2 -> AMPERSANT IDVAR var_declaration2
Rule 29    var_declaration2 -> AMPERSANT IDVAR EQUAL IDVAR var_declaration2
Rule 30    var_declaration2 -> AMPERSANT IDVAR EQUAL IDVAR
Rule 31    var_declaration2 -> AMPERSANT IDVAR
Rule 32    var_declaration2 -> IDVAR EQUAL simple_expression
Rule 33    fun_declaration -> FUNCTION ID LPAREN params RPAREN
Rule 34    fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt
Rule 35    params -> param_list
Rule 36    params -> empty
Rule 37    param_list -> param_list COMMA param_list
Rule 38    param_list -> param
Rule 39    param -> IDVAR
Rule 40    param -> IDVAR LBRACKET RBRACKET
Rule 41    compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
Rule 42    local_declarations -> local_declarations var_declaration
Rule 43    local_declarations -> empty
Rule 44    statement_list -> statement_list statement
Rule 45    statement_list -> empty
Rule 46    statement -> expression_stmt
Rule 47    statement -> compount_stmt
Rule 48    statement -> selection_stmt
Rule 49    statement -> iteration_stmt
Rule 50    statement -> echo_stmt
Rule 51    statement -> return_stmt
Rule 52    expression_stmt -> expression SEMICOLON
Rule 53    expression_stmt -> SEMICOLON
Rule 54    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 55    selection_stmt -> IF LPAREN expression RPAREN statement selection
Rule 56    selection -> ELSE statement
Rule 57    selection -> ELSEIF statement selection
Rule 58    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 59    selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON
Rule 60    selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON
Rule 61    iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
Rule 62    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 63    iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
Rule 64    return_stmt -> RETURN SEMICOLON
Rule 65    return_stmt -> RETURN expression SEMICOLON
Rule 66    expression -> var EQUAL expression
Rule 67    expression -> simple_expression
Rule 68    expression -> var EQUAL AMPERSANT IDVAR
Rule 69    expression -> expression logic_operator expression
Rule 70    logic_operator -> AND
Rule 71    logic_operator -> OR
Rule 72    logic_operator -> XOR
Rule 73    var -> IDVAR
Rule 74    var -> IDVAR LBRACKET expression RBRACKET
Rule 75    simple_expression -> additive_expression relop additive_expression
Rule 76    simple_expression -> additive_expression
Rule 77    relop -> LESS
Rule 78    relop -> LESSEQUAL
Rule 79    relop -> GREATER
Rule 80    relop -> GREATEREQUAL
Rule 81    relop -> DEQUAL
Rule 82    relop -> DISTINT
Rule 83    relop -> ISEQUAL
Rule 84    additive_expression -> additive_expression addop term
Rule 85    additive_expression -> term
Rule 86    additive_expression -> term MINUSMINUS
Rule 87    additive_expression -> term PLUSPLUS
Rule 88    addop -> PLUS
Rule 89    addop -> MINUS
Rule 90    term -> term mulop factor
Rule 91    term -> factor
Rule 92    mulop -> TIMES
Rule 93    mulop -> DIVIDE
Rule 94    factor -> LPAREN expression RPAREN
Rule 95    factor -> var
Rule 96    factor -> NUMBER
Rule 97    factor -> boolean
Rule 98    factor -> ID LPAREN args RPAREN
Rule 99    args -> args_list
Rule 100   args -> empty
Rule 101   args -> VOID
Rule 102   args_list -> args_list COMMA expression
Rule 103   args_list -> expression
Rule 104   header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON
Rule 105   header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON
Rule 106   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AMPERSANT            : 28 29 30 31 68
AND                  : 70
ARRAY                : 
AS                   : 
BREAK                : 59 60
CALLABLE             : 
CASE                 : 59
CATCH                : 
CLASS                : 
CLONE                : 
CLOSETAG             : 1
COLON                : 59 60
COMMA                : 37 102
CONST                : 
CONTINUE             : 
DECLARE              : 
DEFAULT              : 60
DEQUAL               : 81
DIE                  : 
DISTINT              : 82
DIVIDE               : 93
DO                   : 63
DOT                  : 
DOUBLEQUOTE          : 
ECHO                 : 10 11 12
ELSE                 : 56
ELSEIF               : 57
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUAL                : 24 25 26 27 29 30 32 66 68
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 18
FOR                  : 61
FOREACH              : 
FUNCTION             : 33 34
GLOBAL               : 
GOTO                 : 
GREATER              : 79
GREATEREQUAL         : 80
HASHTAG              : 
ID                   : 33 34 98
IDVAR                : 11 20 21 22 23 24 25 26 26 27 27 28 29 29 30 30 31 32 39 40 68 73 74
IF                   : 54 55
IMPLEMENTS           : 
INCLUDE              : 105
INCLUDE_ONCE         : 
INSTANCEOF           : 
INSTEADOF            : 
INTERFACE            : 
ISEQUAL              : 83
ISSET                : 
LBLOCK               : 41 63
LBRACKET             : 40 74
LESS                 : 77
LESSEQUAL            : 78
LIST                 : 
LPAREN               : 33 34 54 55 58 61 62 63 94 98 104 105
MINUS                : 89
MINUSEQUAL           : 
MINUSMINUS           : 86
NAMESPACE            : 
NEW                  : 
NUMBER               : 14 59 96
OPENTAG              : 1
OR                   : 71
PLUS                 : 88
PLUSEQUAL            : 
PLUSPLUS             : 87
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
QUESTIONMARK         : 
QUOTE                : 
RBLOCK               : 41 63
RBRACKET             : 40 74
REQUIRE              : 104
REQUIRE_ONCE         : 
RETURN               : 64 65
RPAREN               : 33 34 54 55 58 61 62 63 94 98 104 105
SEMICOLON            : 10 11 12 19 52 53 59 60 61 61 63 64 65 104 105
STATIC               : 
STRING               : 16 104 105
SWITCH               : 58
THROW                : 
TIMES                : 92
TIMESEQUAL           : 
TIMESTIMES           : 22 23
TRAIT                : 
TRUE                 : 17
TRY                  : 
UNSET                : 
USE                  : 
VOID                 : 101
WHILE                : 62 63
XOR                  : 72
__HALT_COMPILER      : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 61 75 75 76 84
addop                : 84
args                 : 98
args_list            : 99 102
boolean              : 15 97
compount_stmt        : 34 47
data_type            : 10 24 25
declaration          : 2 3
declaration_list     : 1 2
echo_stmt            : 5 10 11 12 41 41 41 50
empty                : 13 36 43 45 100
expression           : 52 54 55 61 62 63 65 66 69 69 74 94 102 103
expression_stmt      : 46
factor               : 90 91
fun_declaration      : 8 12
header_declaration   : 9
iteration_stmt       : 7 49
local_declarations   : 41 42
logic_operator       : 69
mulop                : 90
param                : 38
param_list           : 35 37 37
params               : 33 34
program              : 0
relop                : 75
return_stmt          : 51
selection            : 55 57
selection_stmt       : 6 48
simple_expression    : 32 67
statement            : 44 54 55 56 57 58 59 60 61 62 63
statement_list       : 41 44
term                 : 84 85 86 87 90
var                  : 58 66 68 95
var_declaration      : 4 42
var_declaration2     : 19 20 23 24 26 28 29 61

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPENTAG declaration_list CLOSETAG

    OPENTAG         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPENTAG . declaration_list CLOSETAG
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . echo_stmt
    (6) declaration -> . selection_stmt
    (7) declaration -> . iteration_stmt
    (8) declaration -> . fun_declaration
    (9) declaration -> . header_declaration
    (19) var_declaration -> . var_declaration2 SEMICOLON
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (33) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (34) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (104) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (105) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMICOLON
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression
    (106) empty -> .

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    FUNCTION        shift and go to state 21
    REQUIRE         shift and go to state 22
    INCLUDE         shift and go to state 23
    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25
    ECHO            reduce using rule 106 (empty -> .)
    CLOSETAG        reduce using rule 106 (empty -> .)

  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! DO              [ reduce using rule 106 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 106 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 106 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 106 (empty -> .) ]
  ! IDVAR           [ reduce using rule 106 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 106 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 106 (empty -> .) ]

    declaration_list               shift and go to state 3
    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    echo_stmt                      shift and go to state 6
    selection_stmt                 shift and go to state 7
    iteration_stmt                 shift and go to state 8
    fun_declaration                shift and go to state 9
    header_declaration             shift and go to state 10
    var_declaration2               shift and go to state 11
    empty                          shift and go to state 13

state 3

    (1) program -> OPENTAG declaration_list . CLOSETAG
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . echo_stmt
    (6) declaration -> . selection_stmt
    (7) declaration -> . iteration_stmt
    (8) declaration -> . fun_declaration
    (9) declaration -> . header_declaration
    (19) var_declaration -> . var_declaration2 SEMICOLON
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (33) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (34) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (104) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (105) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMICOLON
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression
    (106) empty -> .

  ! shift/reduce conflict for CLOSETAG resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSETAG        shift and go to state 26
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    FUNCTION        shift and go to state 21
    REQUIRE         shift and go to state 22
    INCLUDE         shift and go to state 23
    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25
    ECHO            reduce using rule 106 (empty -> .)

  ! CLOSETAG        [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! DO              [ reduce using rule 106 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 106 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 106 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 106 (empty -> .) ]
  ! IDVAR           [ reduce using rule 106 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 106 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 106 (empty -> .) ]

    declaration                    shift and go to state 27
    var_declaration                shift and go to state 5
    echo_stmt                      shift and go to state 6
    selection_stmt                 shift and go to state 7
    iteration_stmt                 shift and go to state 8
    fun_declaration                shift and go to state 9
    header_declaration             shift and go to state 10
    var_declaration2               shift and go to state 11
    empty                          shift and go to state 13

state 4

    (3) declaration_list -> declaration .

    CLOSETAG        reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    SWITCH          reduce using rule 3 (declaration_list -> declaration .)
    CASE            reduce using rule 3 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    DO              reduce using rule 3 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 3 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 3 (declaration_list -> declaration .)
    INCLUDE         reduce using rule 3 (declaration_list -> declaration .)
    IDVAR           reduce using rule 3 (declaration_list -> declaration .)
    TIMESTIMES      reduce using rule 3 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 3 (declaration_list -> declaration .)
    ECHO            reduce using rule 3 (declaration_list -> declaration .)


state 5

    (4) declaration -> var_declaration .

    CLOSETAG        reduce using rule 4 (declaration -> var_declaration .)
    IF              reduce using rule 4 (declaration -> var_declaration .)
    SWITCH          reduce using rule 4 (declaration -> var_declaration .)
    CASE            reduce using rule 4 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 4 (declaration -> var_declaration .)
    FOR             reduce using rule 4 (declaration -> var_declaration .)
    WHILE           reduce using rule 4 (declaration -> var_declaration .)
    DO              reduce using rule 4 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 4 (declaration -> var_declaration .)
    REQUIRE         reduce using rule 4 (declaration -> var_declaration .)
    INCLUDE         reduce using rule 4 (declaration -> var_declaration .)
    IDVAR           reduce using rule 4 (declaration -> var_declaration .)
    TIMESTIMES      reduce using rule 4 (declaration -> var_declaration .)
    AMPERSANT       reduce using rule 4 (declaration -> var_declaration .)
    ECHO            reduce using rule 4 (declaration -> var_declaration .)


state 6

    (5) declaration -> echo_stmt .
    (10) echo_stmt -> echo_stmt . ECHO data_type SEMICOLON
    (11) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (12) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON

  ! shift/reduce conflict for ECHO resolved as shift
    CLOSETAG        reduce using rule 5 (declaration -> echo_stmt .)
    IF              reduce using rule 5 (declaration -> echo_stmt .)
    SWITCH          reduce using rule 5 (declaration -> echo_stmt .)
    CASE            reduce using rule 5 (declaration -> echo_stmt .)
    DEFAULT         reduce using rule 5 (declaration -> echo_stmt .)
    FOR             reduce using rule 5 (declaration -> echo_stmt .)
    WHILE           reduce using rule 5 (declaration -> echo_stmt .)
    DO              reduce using rule 5 (declaration -> echo_stmt .)
    FUNCTION        reduce using rule 5 (declaration -> echo_stmt .)
    REQUIRE         reduce using rule 5 (declaration -> echo_stmt .)
    INCLUDE         reduce using rule 5 (declaration -> echo_stmt .)
    IDVAR           reduce using rule 5 (declaration -> echo_stmt .)
    TIMESTIMES      reduce using rule 5 (declaration -> echo_stmt .)
    AMPERSANT       reduce using rule 5 (declaration -> echo_stmt .)
    ECHO            shift and go to state 28

  ! ECHO            [ reduce using rule 5 (declaration -> echo_stmt .) ]


state 7

    (6) declaration -> selection_stmt .

    CLOSETAG        reduce using rule 6 (declaration -> selection_stmt .)
    IF              reduce using rule 6 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 6 (declaration -> selection_stmt .)
    CASE            reduce using rule 6 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 6 (declaration -> selection_stmt .)
    FOR             reduce using rule 6 (declaration -> selection_stmt .)
    WHILE           reduce using rule 6 (declaration -> selection_stmt .)
    DO              reduce using rule 6 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 6 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 6 (declaration -> selection_stmt .)
    INCLUDE         reduce using rule 6 (declaration -> selection_stmt .)
    IDVAR           reduce using rule 6 (declaration -> selection_stmt .)
    TIMESTIMES      reduce using rule 6 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 6 (declaration -> selection_stmt .)
    ECHO            reduce using rule 6 (declaration -> selection_stmt .)


state 8

    (7) declaration -> iteration_stmt .

    CLOSETAG        reduce using rule 7 (declaration -> iteration_stmt .)
    IF              reduce using rule 7 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 7 (declaration -> iteration_stmt .)
    CASE            reduce using rule 7 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 7 (declaration -> iteration_stmt .)
    FOR             reduce using rule 7 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 7 (declaration -> iteration_stmt .)
    DO              reduce using rule 7 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 7 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 7 (declaration -> iteration_stmt .)
    INCLUDE         reduce using rule 7 (declaration -> iteration_stmt .)
    IDVAR           reduce using rule 7 (declaration -> iteration_stmt .)
    TIMESTIMES      reduce using rule 7 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 7 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 7 (declaration -> iteration_stmt .)


state 9

    (8) declaration -> fun_declaration .

    CLOSETAG        reduce using rule 8 (declaration -> fun_declaration .)
    IF              reduce using rule 8 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 8 (declaration -> fun_declaration .)
    CASE            reduce using rule 8 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 8 (declaration -> fun_declaration .)
    FOR             reduce using rule 8 (declaration -> fun_declaration .)
    WHILE           reduce using rule 8 (declaration -> fun_declaration .)
    DO              reduce using rule 8 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 8 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 8 (declaration -> fun_declaration .)
    INCLUDE         reduce using rule 8 (declaration -> fun_declaration .)
    IDVAR           reduce using rule 8 (declaration -> fun_declaration .)
    TIMESTIMES      reduce using rule 8 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 8 (declaration -> fun_declaration .)
    ECHO            reduce using rule 8 (declaration -> fun_declaration .)


state 10

    (9) declaration -> header_declaration .

    CLOSETAG        reduce using rule 9 (declaration -> header_declaration .)
    IF              reduce using rule 9 (declaration -> header_declaration .)
    SWITCH          reduce using rule 9 (declaration -> header_declaration .)
    CASE            reduce using rule 9 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 9 (declaration -> header_declaration .)
    FOR             reduce using rule 9 (declaration -> header_declaration .)
    WHILE           reduce using rule 9 (declaration -> header_declaration .)
    DO              reduce using rule 9 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 9 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 9 (declaration -> header_declaration .)
    INCLUDE         reduce using rule 9 (declaration -> header_declaration .)
    IDVAR           reduce using rule 9 (declaration -> header_declaration .)
    TIMESTIMES      reduce using rule 9 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 9 (declaration -> header_declaration .)
    ECHO            reduce using rule 9 (declaration -> header_declaration .)


state 11

    (19) var_declaration -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 29


state 12

    (20) var_declaration2 -> IDVAR . var_declaration2
    (21) var_declaration2 -> IDVAR .
    (24) var_declaration2 -> IDVAR . EQUAL data_type var_declaration2
    (25) var_declaration2 -> IDVAR . EQUAL data_type
    (26) var_declaration2 -> IDVAR . EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> IDVAR . EQUAL IDVAR
    (32) var_declaration2 -> IDVAR . EQUAL simple_expression
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression

    SEMICOLON       reduce using rule 21 (var_declaration2 -> IDVAR .)
    EQUAL           shift and go to state 31
    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25

    var_declaration2               shift and go to state 30

state 13

    (13) echo_stmt -> empty .

    ECHO            reduce using rule 13 (echo_stmt -> empty .)
    CLOSETAG        reduce using rule 13 (echo_stmt -> empty .)
    IF              reduce using rule 13 (echo_stmt -> empty .)
    SWITCH          reduce using rule 13 (echo_stmt -> empty .)
    CASE            reduce using rule 13 (echo_stmt -> empty .)
    DEFAULT         reduce using rule 13 (echo_stmt -> empty .)
    FOR             reduce using rule 13 (echo_stmt -> empty .)
    WHILE           reduce using rule 13 (echo_stmt -> empty .)
    DO              reduce using rule 13 (echo_stmt -> empty .)
    FUNCTION        reduce using rule 13 (echo_stmt -> empty .)
    REQUIRE         reduce using rule 13 (echo_stmt -> empty .)
    INCLUDE         reduce using rule 13 (echo_stmt -> empty .)
    IDVAR           reduce using rule 13 (echo_stmt -> empty .)
    TIMESTIMES      reduce using rule 13 (echo_stmt -> empty .)
    AMPERSANT       reduce using rule 13 (echo_stmt -> empty .)
    BREAK           reduce using rule 13 (echo_stmt -> empty .)
    SEMICOLON       reduce using rule 13 (echo_stmt -> empty .)
    LBLOCK          reduce using rule 13 (echo_stmt -> empty .)
    RETURN          reduce using rule 13 (echo_stmt -> empty .)
    LPAREN          reduce using rule 13 (echo_stmt -> empty .)
    NUMBER          reduce using rule 13 (echo_stmt -> empty .)
    ID              reduce using rule 13 (echo_stmt -> empty .)
    TRUE            reduce using rule 13 (echo_stmt -> empty .)
    FALSE           reduce using rule 13 (echo_stmt -> empty .)
    RBLOCK          reduce using rule 13 (echo_stmt -> empty .)
    ELSE            reduce using rule 13 (echo_stmt -> empty .)
    ELSEIF          reduce using rule 13 (echo_stmt -> empty .)


state 14

    (54) selection_stmt -> IF . LPAREN expression RPAREN statement
    (55) selection_stmt -> IF . LPAREN expression RPAREN statement selection

    LPAREN          shift and go to state 32


state 15

    (58) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 33


state 16

    (59) selection_stmt -> CASE . NUMBER COLON statement BREAK SEMICOLON

    NUMBER          shift and go to state 34


state 17

    (60) selection_stmt -> DEFAULT . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 35


state 18

    (61) iteration_stmt -> FOR . LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    LPAREN          shift and go to state 36


state 19

    (62) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 37


state 20

    (63) iteration_stmt -> DO . LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN

    LBLOCK          shift and go to state 38


state 21

    (33) fun_declaration -> FUNCTION . ID LPAREN params RPAREN
    (34) fun_declaration -> FUNCTION . ID LPAREN params RPAREN compount_stmt

    ID              shift and go to state 39


state 22

    (104) header_declaration -> REQUIRE . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 40


state 23

    (105) header_declaration -> INCLUDE . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 41


state 24

    (22) var_declaration2 -> TIMESTIMES . IDVAR
    (23) var_declaration2 -> TIMESTIMES . IDVAR var_declaration2

    IDVAR           shift and go to state 42


state 25

    (28) var_declaration2 -> AMPERSANT . IDVAR var_declaration2
    (29) var_declaration2 -> AMPERSANT . IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> AMPERSANT . IDVAR EQUAL IDVAR
    (31) var_declaration2 -> AMPERSANT . IDVAR

    IDVAR           shift and go to state 43


state 26

    (1) program -> OPENTAG declaration_list CLOSETAG .

    $end            reduce using rule 1 (program -> OPENTAG declaration_list CLOSETAG .)


state 27

    (2) declaration_list -> declaration_list declaration .

    CLOSETAG        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    INCLUDE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IDVAR           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    TIMESTIMES      reduce using rule 2 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 28

    (10) echo_stmt -> echo_stmt ECHO . data_type SEMICOLON
    (11) echo_stmt -> echo_stmt ECHO . IDVAR SEMICOLON
    (12) echo_stmt -> echo_stmt ECHO . fun_declaration SEMICOLON
    (14) data_type -> . NUMBER
    (15) data_type -> . boolean
    (16) data_type -> . STRING
    (33) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (34) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    IDVAR           shift and go to state 45
    NUMBER          shift and go to state 47
    STRING          shift and go to state 49
    FUNCTION        shift and go to state 21
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    data_type                      shift and go to state 44
    fun_declaration                shift and go to state 46
    boolean                        shift and go to state 48

state 29

    (19) var_declaration -> var_declaration2 SEMICOLON .

    CLOSETAG        reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    IF              reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    SWITCH          reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    CASE            reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    DEFAULT         reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    FOR             reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    WHILE           reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    DO              reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    FUNCTION        reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    REQUIRE         reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    INCLUDE         reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    IDVAR           reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    TIMESTIMES      reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    AMPERSANT       reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    ECHO            reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    SEMICOLON       reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    LBLOCK          reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    RETURN          reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    LPAREN          reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    NUMBER          reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    ID              reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    TRUE            reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    FALSE           reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 19 (var_declaration -> var_declaration2 SEMICOLON .)


state 30

    (20) var_declaration2 -> IDVAR var_declaration2 .

    SEMICOLON       reduce using rule 20 (var_declaration2 -> IDVAR var_declaration2 .)


state 31

    (24) var_declaration2 -> IDVAR EQUAL . data_type var_declaration2
    (25) var_declaration2 -> IDVAR EQUAL . data_type
    (26) var_declaration2 -> IDVAR EQUAL . IDVAR var_declaration2
    (27) var_declaration2 -> IDVAR EQUAL . IDVAR
    (32) var_declaration2 -> IDVAR EQUAL . simple_expression
    (14) data_type -> . NUMBER
    (15) data_type -> . boolean
    (16) data_type -> . STRING
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET

    IDVAR           shift and go to state 52
    NUMBER          shift and go to state 55
    STRING          shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    LPAREN          shift and go to state 60
    ID              shift and go to state 62

    data_type                      shift and go to state 53
    simple_expression              shift and go to state 54
    boolean                        shift and go to state 56
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    var                            shift and go to state 61

state 32

    (54) selection_stmt -> IF LPAREN . expression RPAREN statement
    (55) selection_stmt -> IF LPAREN . expression RPAREN statement selection
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 63
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 33

    (58) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET

    IDVAR           shift and go to state 66

    var                            shift and go to state 69

state 34

    (59) selection_stmt -> CASE NUMBER . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 70


state 35

    (60) selection_stmt -> DEFAULT COLON . statement BREAK SEMICOLON
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (106) empty -> .
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    ECHO            reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    statement                      shift and go to state 71
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    echo_stmt                      shift and go to state 77
    return_stmt                    shift and go to state 78
    expression                     shift and go to state 79
    var                            shift and go to state 64
    additive_expression            shift and go to state 57
    empty                          shift and go to state 13
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 36

    (61) iteration_stmt -> FOR LPAREN . var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression

    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25

    var_declaration2               shift and go to state 82

state 37

    (62) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 83
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 38

    (63) iteration_stmt -> DO LBLOCK . statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (106) empty -> .
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    ECHO            reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]

    statement                      shift and go to state 84
    expression                     shift and go to state 79
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    echo_stmt                      shift and go to state 77
    return_stmt                    shift and go to state 78
    var                            shift and go to state 64
    additive_expression            shift and go to state 57
    empty                          shift and go to state 13
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 39

    (33) fun_declaration -> FUNCTION ID . LPAREN params RPAREN
    (34) fun_declaration -> FUNCTION ID . LPAREN params RPAREN compount_stmt

    LPAREN          shift and go to state 85


state 40

    (104) header_declaration -> REQUIRE LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 86


state 41

    (105) header_declaration -> INCLUDE LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 87


state 42

    (22) var_declaration2 -> TIMESTIMES IDVAR .
    (23) var_declaration2 -> TIMESTIMES IDVAR . var_declaration2
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression

    SEMICOLON       reduce using rule 22 (var_declaration2 -> TIMESTIMES IDVAR .)
    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25

    var_declaration2               shift and go to state 88

state 43

    (28) var_declaration2 -> AMPERSANT IDVAR . var_declaration2
    (29) var_declaration2 -> AMPERSANT IDVAR . EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> AMPERSANT IDVAR . EQUAL IDVAR
    (31) var_declaration2 -> AMPERSANT IDVAR .
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression

    EQUAL           shift and go to state 90
    SEMICOLON       reduce using rule 31 (var_declaration2 -> AMPERSANT IDVAR .)
    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25

    var_declaration2               shift and go to state 89

state 44

    (10) echo_stmt -> echo_stmt ECHO data_type . SEMICOLON

    SEMICOLON       shift and go to state 91


state 45

    (11) echo_stmt -> echo_stmt ECHO IDVAR . SEMICOLON

    SEMICOLON       shift and go to state 92


state 46

    (12) echo_stmt -> echo_stmt ECHO fun_declaration . SEMICOLON

    SEMICOLON       shift and go to state 93


state 47

    (14) data_type -> NUMBER .

    SEMICOLON       reduce using rule 14 (data_type -> NUMBER .)


state 48

    (15) data_type -> boolean .

    SEMICOLON       reduce using rule 15 (data_type -> boolean .)


state 49

    (16) data_type -> STRING .

    SEMICOLON       reduce using rule 16 (data_type -> STRING .)
    IDVAR           reduce using rule 16 (data_type -> STRING .)
    TIMESTIMES      reduce using rule 16 (data_type -> STRING .)
    AMPERSANT       reduce using rule 16 (data_type -> STRING .)


state 50

    (17) boolean -> TRUE .

    SEMICOLON       reduce using rule 17 (boolean -> TRUE .)
    IDVAR           reduce using rule 17 (boolean -> TRUE .)
    TIMESTIMES      reduce using rule 17 (boolean -> TRUE .)
    AMPERSANT       reduce using rule 17 (boolean -> TRUE .)
    MINUSMINUS      reduce using rule 17 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 17 (boolean -> TRUE .)
    TIMES           reduce using rule 17 (boolean -> TRUE .)
    DIVIDE          reduce using rule 17 (boolean -> TRUE .)
    LESS            reduce using rule 17 (boolean -> TRUE .)
    LESSEQUAL       reduce using rule 17 (boolean -> TRUE .)
    GREATER         reduce using rule 17 (boolean -> TRUE .)
    GREATEREQUAL    reduce using rule 17 (boolean -> TRUE .)
    DEQUAL          reduce using rule 17 (boolean -> TRUE .)
    DISTINT         reduce using rule 17 (boolean -> TRUE .)
    ISEQUAL         reduce using rule 17 (boolean -> TRUE .)
    PLUS            reduce using rule 17 (boolean -> TRUE .)
    MINUS           reduce using rule 17 (boolean -> TRUE .)
    RPAREN          reduce using rule 17 (boolean -> TRUE .)
    AND             reduce using rule 17 (boolean -> TRUE .)
    OR              reduce using rule 17 (boolean -> TRUE .)
    XOR             reduce using rule 17 (boolean -> TRUE .)
    RBRACKET        reduce using rule 17 (boolean -> TRUE .)
    COMMA           reduce using rule 17 (boolean -> TRUE .)


state 51

    (18) boolean -> FALSE .

    SEMICOLON       reduce using rule 18 (boolean -> FALSE .)
    IDVAR           reduce using rule 18 (boolean -> FALSE .)
    TIMESTIMES      reduce using rule 18 (boolean -> FALSE .)
    AMPERSANT       reduce using rule 18 (boolean -> FALSE .)
    MINUSMINUS      reduce using rule 18 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 18 (boolean -> FALSE .)
    TIMES           reduce using rule 18 (boolean -> FALSE .)
    DIVIDE          reduce using rule 18 (boolean -> FALSE .)
    LESS            reduce using rule 18 (boolean -> FALSE .)
    LESSEQUAL       reduce using rule 18 (boolean -> FALSE .)
    GREATER         reduce using rule 18 (boolean -> FALSE .)
    GREATEREQUAL    reduce using rule 18 (boolean -> FALSE .)
    DEQUAL          reduce using rule 18 (boolean -> FALSE .)
    DISTINT         reduce using rule 18 (boolean -> FALSE .)
    ISEQUAL         reduce using rule 18 (boolean -> FALSE .)
    PLUS            reduce using rule 18 (boolean -> FALSE .)
    MINUS           reduce using rule 18 (boolean -> FALSE .)
    RPAREN          reduce using rule 18 (boolean -> FALSE .)
    AND             reduce using rule 18 (boolean -> FALSE .)
    OR              reduce using rule 18 (boolean -> FALSE .)
    XOR             reduce using rule 18 (boolean -> FALSE .)
    RBRACKET        reduce using rule 18 (boolean -> FALSE .)
    COMMA           reduce using rule 18 (boolean -> FALSE .)


state 52

    (26) var_declaration2 -> IDVAR EQUAL IDVAR . var_declaration2
    (27) var_declaration2 -> IDVAR EQUAL IDVAR .
    (73) var -> IDVAR .
    (74) var -> IDVAR . LBRACKET expression RBRACKET
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression

  ! reduce/reduce conflict for SEMICOLON resolved using rule 27 (var_declaration2 -> IDVAR EQUAL IDVAR .)
    SEMICOLON       reduce using rule 27 (var_declaration2 -> IDVAR EQUAL IDVAR .)
    MINUSMINUS      reduce using rule 73 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 73 (var -> IDVAR .)
    TIMES           reduce using rule 73 (var -> IDVAR .)
    DIVIDE          reduce using rule 73 (var -> IDVAR .)
    LESS            reduce using rule 73 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 73 (var -> IDVAR .)
    GREATER         reduce using rule 73 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 73 (var -> IDVAR .)
    DEQUAL          reduce using rule 73 (var -> IDVAR .)
    DISTINT         reduce using rule 73 (var -> IDVAR .)
    ISEQUAL         reduce using rule 73 (var -> IDVAR .)
    PLUS            reduce using rule 73 (var -> IDVAR .)
    MINUS           reduce using rule 73 (var -> IDVAR .)
    LBRACKET        shift and go to state 95
    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25

  ! SEMICOLON       [ reduce using rule 73 (var -> IDVAR .) ]

    var_declaration2               shift and go to state 94

state 53

    (24) var_declaration2 -> IDVAR EQUAL data_type . var_declaration2
    (25) var_declaration2 -> IDVAR EQUAL data_type .
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression

    SEMICOLON       reduce using rule 25 (var_declaration2 -> IDVAR EQUAL data_type .)
    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25

    var_declaration2               shift and go to state 96

state 54

    (32) var_declaration2 -> IDVAR EQUAL simple_expression .

    SEMICOLON       reduce using rule 32 (var_declaration2 -> IDVAR EQUAL simple_expression .)


state 55

    (14) data_type -> NUMBER .
    (96) factor -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (data_type -> NUMBER .)
    IDVAR           reduce using rule 14 (data_type -> NUMBER .)
    TIMESTIMES      reduce using rule 14 (data_type -> NUMBER .)
    AMPERSANT       reduce using rule 14 (data_type -> NUMBER .)
    SEMICOLON       reduce using rule 14 (data_type -> NUMBER .)
    MINUSMINUS      reduce using rule 96 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 96 (factor -> NUMBER .)
    TIMES           reduce using rule 96 (factor -> NUMBER .)
    DIVIDE          reduce using rule 96 (factor -> NUMBER .)
    LESS            reduce using rule 96 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 96 (factor -> NUMBER .)
    GREATER         reduce using rule 96 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 96 (factor -> NUMBER .)
    DEQUAL          reduce using rule 96 (factor -> NUMBER .)
    DISTINT         reduce using rule 96 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 96 (factor -> NUMBER .)
    PLUS            reduce using rule 96 (factor -> NUMBER .)
    MINUS           reduce using rule 96 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 96 (factor -> NUMBER .) ]


state 56

    (15) data_type -> boolean .
    (97) factor -> boolean .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 15 (data_type -> boolean .)
    IDVAR           reduce using rule 15 (data_type -> boolean .)
    TIMESTIMES      reduce using rule 15 (data_type -> boolean .)
    AMPERSANT       reduce using rule 15 (data_type -> boolean .)
    SEMICOLON       reduce using rule 15 (data_type -> boolean .)
    MINUSMINUS      reduce using rule 97 (factor -> boolean .)
    PLUSPLUS        reduce using rule 97 (factor -> boolean .)
    TIMES           reduce using rule 97 (factor -> boolean .)
    DIVIDE          reduce using rule 97 (factor -> boolean .)
    LESS            reduce using rule 97 (factor -> boolean .)
    LESSEQUAL       reduce using rule 97 (factor -> boolean .)
    GREATER         reduce using rule 97 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 97 (factor -> boolean .)
    DEQUAL          reduce using rule 97 (factor -> boolean .)
    DISTINT         reduce using rule 97 (factor -> boolean .)
    ISEQUAL         reduce using rule 97 (factor -> boolean .)
    PLUS            reduce using rule 97 (factor -> boolean .)
    MINUS           reduce using rule 97 (factor -> boolean .)

  ! SEMICOLON       [ reduce using rule 97 (factor -> boolean .) ]


state 57

    (75) simple_expression -> additive_expression . relop additive_expression
    (76) simple_expression -> additive_expression .
    (84) additive_expression -> additive_expression . addop term
    (77) relop -> . LESS
    (78) relop -> . LESSEQUAL
    (79) relop -> . GREATER
    (80) relop -> . GREATEREQUAL
    (81) relop -> . DEQUAL
    (82) relop -> . DISTINT
    (83) relop -> . ISEQUAL
    (88) addop -> . PLUS
    (89) addop -> . MINUS

    SEMICOLON       reduce using rule 76 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 76 (simple_expression -> additive_expression .)
    AND             reduce using rule 76 (simple_expression -> additive_expression .)
    OR              reduce using rule 76 (simple_expression -> additive_expression .)
    XOR             reduce using rule 76 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 76 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 76 (simple_expression -> additive_expression .)
    LESS            shift and go to state 99
    LESSEQUAL       shift and go to state 100
    GREATER         shift and go to state 101
    GREATEREQUAL    shift and go to state 102
    DEQUAL          shift and go to state 103
    DISTINT         shift and go to state 104
    ISEQUAL         shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

    relop                          shift and go to state 97
    addop                          shift and go to state 98

state 58

    (85) additive_expression -> term .
    (86) additive_expression -> term . MINUSMINUS
    (87) additive_expression -> term . PLUSPLUS
    (90) term -> term . mulop factor
    (92) mulop -> . TIMES
    (93) mulop -> . DIVIDE

    LESS            reduce using rule 85 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 85 (additive_expression -> term .)
    GREATER         reduce using rule 85 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 85 (additive_expression -> term .)
    DEQUAL          reduce using rule 85 (additive_expression -> term .)
    DISTINT         reduce using rule 85 (additive_expression -> term .)
    ISEQUAL         reduce using rule 85 (additive_expression -> term .)
    PLUS            reduce using rule 85 (additive_expression -> term .)
    MINUS           reduce using rule 85 (additive_expression -> term .)
    SEMICOLON       reduce using rule 85 (additive_expression -> term .)
    RPAREN          reduce using rule 85 (additive_expression -> term .)
    AND             reduce using rule 85 (additive_expression -> term .)
    OR              reduce using rule 85 (additive_expression -> term .)
    XOR             reduce using rule 85 (additive_expression -> term .)
    RBRACKET        reduce using rule 85 (additive_expression -> term .)
    COMMA           reduce using rule 85 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 108
    PLUSPLUS        shift and go to state 109
    TIMES           shift and go to state 111
    DIVIDE          shift and go to state 112

    mulop                          shift and go to state 110

state 59

    (91) term -> factor .

    MINUSMINUS      reduce using rule 91 (term -> factor .)
    PLUSPLUS        reduce using rule 91 (term -> factor .)
    TIMES           reduce using rule 91 (term -> factor .)
    DIVIDE          reduce using rule 91 (term -> factor .)
    LESS            reduce using rule 91 (term -> factor .)
    LESSEQUAL       reduce using rule 91 (term -> factor .)
    GREATER         reduce using rule 91 (term -> factor .)
    GREATEREQUAL    reduce using rule 91 (term -> factor .)
    DEQUAL          reduce using rule 91 (term -> factor .)
    DISTINT         reduce using rule 91 (term -> factor .)
    ISEQUAL         reduce using rule 91 (term -> factor .)
    PLUS            reduce using rule 91 (term -> factor .)
    MINUS           reduce using rule 91 (term -> factor .)
    SEMICOLON       reduce using rule 91 (term -> factor .)
    RPAREN          reduce using rule 91 (term -> factor .)
    AND             reduce using rule 91 (term -> factor .)
    OR              reduce using rule 91 (term -> factor .)
    XOR             reduce using rule 91 (term -> factor .)
    RBRACKET        reduce using rule 91 (term -> factor .)
    COMMA           reduce using rule 91 (term -> factor .)


state 60

    (94) factor -> LPAREN . expression RPAREN
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 113
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 61

    (95) factor -> var .

    MINUSMINUS      reduce using rule 95 (factor -> var .)
    PLUSPLUS        reduce using rule 95 (factor -> var .)
    TIMES           reduce using rule 95 (factor -> var .)
    DIVIDE          reduce using rule 95 (factor -> var .)
    LESS            reduce using rule 95 (factor -> var .)
    LESSEQUAL       reduce using rule 95 (factor -> var .)
    GREATER         reduce using rule 95 (factor -> var .)
    GREATEREQUAL    reduce using rule 95 (factor -> var .)
    DEQUAL          reduce using rule 95 (factor -> var .)
    DISTINT         reduce using rule 95 (factor -> var .)
    ISEQUAL         reduce using rule 95 (factor -> var .)
    PLUS            reduce using rule 95 (factor -> var .)
    MINUS           reduce using rule 95 (factor -> var .)
    SEMICOLON       reduce using rule 95 (factor -> var .)
    RPAREN          reduce using rule 95 (factor -> var .)
    AND             reduce using rule 95 (factor -> var .)
    OR              reduce using rule 95 (factor -> var .)
    XOR             reduce using rule 95 (factor -> var .)
    RBRACKET        reduce using rule 95 (factor -> var .)
    COMMA           reduce using rule 95 (factor -> var .)


state 62

    (98) factor -> ID . LPAREN args RPAREN

    LPAREN          shift and go to state 114


state 63

    (54) selection_stmt -> IF LPAREN expression . RPAREN statement
    (55) selection_stmt -> IF LPAREN expression . RPAREN statement selection
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    RPAREN          shift and go to state 115
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 64

    (66) expression -> var . EQUAL expression
    (68) expression -> var . EQUAL AMPERSANT IDVAR
    (95) factor -> var .

    EQUAL           shift and go to state 120
    MINUSMINUS      reduce using rule 95 (factor -> var .)
    PLUSPLUS        reduce using rule 95 (factor -> var .)
    TIMES           reduce using rule 95 (factor -> var .)
    DIVIDE          reduce using rule 95 (factor -> var .)
    LESS            reduce using rule 95 (factor -> var .)
    LESSEQUAL       reduce using rule 95 (factor -> var .)
    GREATER         reduce using rule 95 (factor -> var .)
    GREATEREQUAL    reduce using rule 95 (factor -> var .)
    DEQUAL          reduce using rule 95 (factor -> var .)
    DISTINT         reduce using rule 95 (factor -> var .)
    ISEQUAL         reduce using rule 95 (factor -> var .)
    PLUS            reduce using rule 95 (factor -> var .)
    MINUS           reduce using rule 95 (factor -> var .)
    RPAREN          reduce using rule 95 (factor -> var .)
    AND             reduce using rule 95 (factor -> var .)
    OR              reduce using rule 95 (factor -> var .)
    XOR             reduce using rule 95 (factor -> var .)
    SEMICOLON       reduce using rule 95 (factor -> var .)
    RBRACKET        reduce using rule 95 (factor -> var .)
    COMMA           reduce using rule 95 (factor -> var .)


state 65

    (67) expression -> simple_expression .

    RPAREN          reduce using rule 67 (expression -> simple_expression .)
    AND             reduce using rule 67 (expression -> simple_expression .)
    OR              reduce using rule 67 (expression -> simple_expression .)
    XOR             reduce using rule 67 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 67 (expression -> simple_expression .)
    RBRACKET        reduce using rule 67 (expression -> simple_expression .)
    COMMA           reduce using rule 67 (expression -> simple_expression .)


state 66

    (73) var -> IDVAR .
    (74) var -> IDVAR . LBRACKET expression RBRACKET

    EQUAL           reduce using rule 73 (var -> IDVAR .)
    MINUSMINUS      reduce using rule 73 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 73 (var -> IDVAR .)
    TIMES           reduce using rule 73 (var -> IDVAR .)
    DIVIDE          reduce using rule 73 (var -> IDVAR .)
    LESS            reduce using rule 73 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 73 (var -> IDVAR .)
    GREATER         reduce using rule 73 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 73 (var -> IDVAR .)
    DEQUAL          reduce using rule 73 (var -> IDVAR .)
    DISTINT         reduce using rule 73 (var -> IDVAR .)
    ISEQUAL         reduce using rule 73 (var -> IDVAR .)
    PLUS            reduce using rule 73 (var -> IDVAR .)
    MINUS           reduce using rule 73 (var -> IDVAR .)
    RPAREN          reduce using rule 73 (var -> IDVAR .)
    AND             reduce using rule 73 (var -> IDVAR .)
    OR              reduce using rule 73 (var -> IDVAR .)
    XOR             reduce using rule 73 (var -> IDVAR .)
    SEMICOLON       reduce using rule 73 (var -> IDVAR .)
    RBRACKET        reduce using rule 73 (var -> IDVAR .)
    COMMA           reduce using rule 73 (var -> IDVAR .)
    LBRACKET        shift and go to state 95


state 67

    (96) factor -> NUMBER .

    MINUSMINUS      reduce using rule 96 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 96 (factor -> NUMBER .)
    TIMES           reduce using rule 96 (factor -> NUMBER .)
    DIVIDE          reduce using rule 96 (factor -> NUMBER .)
    LESS            reduce using rule 96 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 96 (factor -> NUMBER .)
    GREATER         reduce using rule 96 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 96 (factor -> NUMBER .)
    DEQUAL          reduce using rule 96 (factor -> NUMBER .)
    DISTINT         reduce using rule 96 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 96 (factor -> NUMBER .)
    PLUS            reduce using rule 96 (factor -> NUMBER .)
    MINUS           reduce using rule 96 (factor -> NUMBER .)
    RPAREN          reduce using rule 96 (factor -> NUMBER .)
    AND             reduce using rule 96 (factor -> NUMBER .)
    OR              reduce using rule 96 (factor -> NUMBER .)
    XOR             reduce using rule 96 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 96 (factor -> NUMBER .)
    RBRACKET        reduce using rule 96 (factor -> NUMBER .)
    COMMA           reduce using rule 96 (factor -> NUMBER .)


state 68

    (97) factor -> boolean .

    MINUSMINUS      reduce using rule 97 (factor -> boolean .)
    PLUSPLUS        reduce using rule 97 (factor -> boolean .)
    TIMES           reduce using rule 97 (factor -> boolean .)
    DIVIDE          reduce using rule 97 (factor -> boolean .)
    LESS            reduce using rule 97 (factor -> boolean .)
    LESSEQUAL       reduce using rule 97 (factor -> boolean .)
    GREATER         reduce using rule 97 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 97 (factor -> boolean .)
    DEQUAL          reduce using rule 97 (factor -> boolean .)
    DISTINT         reduce using rule 97 (factor -> boolean .)
    ISEQUAL         reduce using rule 97 (factor -> boolean .)
    PLUS            reduce using rule 97 (factor -> boolean .)
    MINUS           reduce using rule 97 (factor -> boolean .)
    RPAREN          reduce using rule 97 (factor -> boolean .)
    AND             reduce using rule 97 (factor -> boolean .)
    OR              reduce using rule 97 (factor -> boolean .)
    XOR             reduce using rule 97 (factor -> boolean .)
    SEMICOLON       reduce using rule 97 (factor -> boolean .)
    RBRACKET        reduce using rule 97 (factor -> boolean .)
    COMMA           reduce using rule 97 (factor -> boolean .)


state 69

    (58) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 121


state 70

    (59) selection_stmt -> CASE NUMBER COLON . statement BREAK SEMICOLON
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (106) empty -> .
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    ECHO            reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    statement                      shift and go to state 122
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    echo_stmt                      shift and go to state 77
    return_stmt                    shift and go to state 78
    expression                     shift and go to state 79
    var                            shift and go to state 64
    additive_expression            shift and go to state 57
    empty                          shift and go to state 13
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 71

    (60) selection_stmt -> DEFAULT COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 123


state 72

    (53) expression_stmt -> SEMICOLON .

    BREAK           reduce using rule 53 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 53 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 53 (expression_stmt -> SEMICOLON .)
    ELSEIF          reduce using rule 53 (expression_stmt -> SEMICOLON .)
    CLOSETAG        reduce using rule 53 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 53 (expression_stmt -> SEMICOLON .)
    SWITCH          reduce using rule 53 (expression_stmt -> SEMICOLON .)
    CASE            reduce using rule 53 (expression_stmt -> SEMICOLON .)
    DEFAULT         reduce using rule 53 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 53 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 53 (expression_stmt -> SEMICOLON .)
    DO              reduce using rule 53 (expression_stmt -> SEMICOLON .)
    FUNCTION        reduce using rule 53 (expression_stmt -> SEMICOLON .)
    REQUIRE         reduce using rule 53 (expression_stmt -> SEMICOLON .)
    INCLUDE         reduce using rule 53 (expression_stmt -> SEMICOLON .)
    IDVAR           reduce using rule 53 (expression_stmt -> SEMICOLON .)
    TIMESTIMES      reduce using rule 53 (expression_stmt -> SEMICOLON .)
    AMPERSANT       reduce using rule 53 (expression_stmt -> SEMICOLON .)
    ECHO            reduce using rule 53 (expression_stmt -> SEMICOLON .)
    LBLOCK          reduce using rule 53 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 53 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 53 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 53 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 53 (expression_stmt -> SEMICOLON .)
    TRUE            reduce using rule 53 (expression_stmt -> SEMICOLON .)
    FALSE           reduce using rule 53 (expression_stmt -> SEMICOLON .)
    RBLOCK          reduce using rule 53 (expression_stmt -> SEMICOLON .)


state 73

    (46) statement -> expression_stmt .

    BREAK           reduce using rule 46 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 46 (statement -> expression_stmt .)
    ELSE            reduce using rule 46 (statement -> expression_stmt .)
    ELSEIF          reduce using rule 46 (statement -> expression_stmt .)
    CLOSETAG        reduce using rule 46 (statement -> expression_stmt .)
    IF              reduce using rule 46 (statement -> expression_stmt .)
    SWITCH          reduce using rule 46 (statement -> expression_stmt .)
    CASE            reduce using rule 46 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 46 (statement -> expression_stmt .)
    FOR             reduce using rule 46 (statement -> expression_stmt .)
    WHILE           reduce using rule 46 (statement -> expression_stmt .)
    DO              reduce using rule 46 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 46 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 46 (statement -> expression_stmt .)
    INCLUDE         reduce using rule 46 (statement -> expression_stmt .)
    IDVAR           reduce using rule 46 (statement -> expression_stmt .)
    TIMESTIMES      reduce using rule 46 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 46 (statement -> expression_stmt .)
    ECHO            reduce using rule 46 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 46 (statement -> expression_stmt .)
    RETURN          reduce using rule 46 (statement -> expression_stmt .)
    LPAREN          reduce using rule 46 (statement -> expression_stmt .)
    NUMBER          reduce using rule 46 (statement -> expression_stmt .)
    ID              reduce using rule 46 (statement -> expression_stmt .)
    TRUE            reduce using rule 46 (statement -> expression_stmt .)
    FALSE           reduce using rule 46 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 46 (statement -> expression_stmt .)


state 74

    (47) statement -> compount_stmt .

    BREAK           reduce using rule 47 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 47 (statement -> compount_stmt .)
    ELSE            reduce using rule 47 (statement -> compount_stmt .)
    ELSEIF          reduce using rule 47 (statement -> compount_stmt .)
    CLOSETAG        reduce using rule 47 (statement -> compount_stmt .)
    IF              reduce using rule 47 (statement -> compount_stmt .)
    SWITCH          reduce using rule 47 (statement -> compount_stmt .)
    CASE            reduce using rule 47 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 47 (statement -> compount_stmt .)
    FOR             reduce using rule 47 (statement -> compount_stmt .)
    WHILE           reduce using rule 47 (statement -> compount_stmt .)
    DO              reduce using rule 47 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 47 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 47 (statement -> compount_stmt .)
    INCLUDE         reduce using rule 47 (statement -> compount_stmt .)
    IDVAR           reduce using rule 47 (statement -> compount_stmt .)
    TIMESTIMES      reduce using rule 47 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 47 (statement -> compount_stmt .)
    ECHO            reduce using rule 47 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 47 (statement -> compount_stmt .)
    RETURN          reduce using rule 47 (statement -> compount_stmt .)
    LPAREN          reduce using rule 47 (statement -> compount_stmt .)
    NUMBER          reduce using rule 47 (statement -> compount_stmt .)
    ID              reduce using rule 47 (statement -> compount_stmt .)
    TRUE            reduce using rule 47 (statement -> compount_stmt .)
    FALSE           reduce using rule 47 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 47 (statement -> compount_stmt .)


state 75

    (48) statement -> selection_stmt .

    BREAK           reduce using rule 48 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 48 (statement -> selection_stmt .)
    ELSE            reduce using rule 48 (statement -> selection_stmt .)
    ELSEIF          reduce using rule 48 (statement -> selection_stmt .)
    CLOSETAG        reduce using rule 48 (statement -> selection_stmt .)
    IF              reduce using rule 48 (statement -> selection_stmt .)
    SWITCH          reduce using rule 48 (statement -> selection_stmt .)
    CASE            reduce using rule 48 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 48 (statement -> selection_stmt .)
    FOR             reduce using rule 48 (statement -> selection_stmt .)
    WHILE           reduce using rule 48 (statement -> selection_stmt .)
    DO              reduce using rule 48 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 48 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 48 (statement -> selection_stmt .)
    INCLUDE         reduce using rule 48 (statement -> selection_stmt .)
    IDVAR           reduce using rule 48 (statement -> selection_stmt .)
    TIMESTIMES      reduce using rule 48 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 48 (statement -> selection_stmt .)
    ECHO            reduce using rule 48 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 48 (statement -> selection_stmt .)
    RETURN          reduce using rule 48 (statement -> selection_stmt .)
    LPAREN          reduce using rule 48 (statement -> selection_stmt .)
    NUMBER          reduce using rule 48 (statement -> selection_stmt .)
    ID              reduce using rule 48 (statement -> selection_stmt .)
    TRUE            reduce using rule 48 (statement -> selection_stmt .)
    FALSE           reduce using rule 48 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 48 (statement -> selection_stmt .)


state 76

    (49) statement -> iteration_stmt .

    BREAK           reduce using rule 49 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 49 (statement -> iteration_stmt .)
    ELSE            reduce using rule 49 (statement -> iteration_stmt .)
    ELSEIF          reduce using rule 49 (statement -> iteration_stmt .)
    CLOSETAG        reduce using rule 49 (statement -> iteration_stmt .)
    IF              reduce using rule 49 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 49 (statement -> iteration_stmt .)
    CASE            reduce using rule 49 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 49 (statement -> iteration_stmt .)
    FOR             reduce using rule 49 (statement -> iteration_stmt .)
    WHILE           reduce using rule 49 (statement -> iteration_stmt .)
    DO              reduce using rule 49 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 49 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 49 (statement -> iteration_stmt .)
    INCLUDE         reduce using rule 49 (statement -> iteration_stmt .)
    IDVAR           reduce using rule 49 (statement -> iteration_stmt .)
    TIMESTIMES      reduce using rule 49 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 49 (statement -> iteration_stmt .)
    ECHO            reduce using rule 49 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 49 (statement -> iteration_stmt .)
    RETURN          reduce using rule 49 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 49 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 49 (statement -> iteration_stmt .)
    ID              reduce using rule 49 (statement -> iteration_stmt .)
    TRUE            reduce using rule 49 (statement -> iteration_stmt .)
    FALSE           reduce using rule 49 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 49 (statement -> iteration_stmt .)


state 77

    (50) statement -> echo_stmt .
    (10) echo_stmt -> echo_stmt . ECHO data_type SEMICOLON
    (11) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (12) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON

  ! shift/reduce conflict for ECHO resolved as shift
    BREAK           reduce using rule 50 (statement -> echo_stmt .)
    SEMICOLON       reduce using rule 50 (statement -> echo_stmt .)
    ELSE            reduce using rule 50 (statement -> echo_stmt .)
    ELSEIF          reduce using rule 50 (statement -> echo_stmt .)
    CLOSETAG        reduce using rule 50 (statement -> echo_stmt .)
    IF              reduce using rule 50 (statement -> echo_stmt .)
    SWITCH          reduce using rule 50 (statement -> echo_stmt .)
    CASE            reduce using rule 50 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 50 (statement -> echo_stmt .)
    FOR             reduce using rule 50 (statement -> echo_stmt .)
    WHILE           reduce using rule 50 (statement -> echo_stmt .)
    DO              reduce using rule 50 (statement -> echo_stmt .)
    FUNCTION        reduce using rule 50 (statement -> echo_stmt .)
    REQUIRE         reduce using rule 50 (statement -> echo_stmt .)
    INCLUDE         reduce using rule 50 (statement -> echo_stmt .)
    IDVAR           reduce using rule 50 (statement -> echo_stmt .)
    TIMESTIMES      reduce using rule 50 (statement -> echo_stmt .)
    AMPERSANT       reduce using rule 50 (statement -> echo_stmt .)
    LBLOCK          reduce using rule 50 (statement -> echo_stmt .)
    RETURN          reduce using rule 50 (statement -> echo_stmt .)
    LPAREN          reduce using rule 50 (statement -> echo_stmt .)
    NUMBER          reduce using rule 50 (statement -> echo_stmt .)
    ID              reduce using rule 50 (statement -> echo_stmt .)
    TRUE            reduce using rule 50 (statement -> echo_stmt .)
    FALSE           reduce using rule 50 (statement -> echo_stmt .)
    RBLOCK          reduce using rule 50 (statement -> echo_stmt .)
    ECHO            shift and go to state 28

  ! ECHO            [ reduce using rule 50 (statement -> echo_stmt .) ]


state 78

    (51) statement -> return_stmt .

    BREAK           reduce using rule 51 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 51 (statement -> return_stmt .)
    ELSE            reduce using rule 51 (statement -> return_stmt .)
    ELSEIF          reduce using rule 51 (statement -> return_stmt .)
    CLOSETAG        reduce using rule 51 (statement -> return_stmt .)
    IF              reduce using rule 51 (statement -> return_stmt .)
    SWITCH          reduce using rule 51 (statement -> return_stmt .)
    CASE            reduce using rule 51 (statement -> return_stmt .)
    DEFAULT         reduce using rule 51 (statement -> return_stmt .)
    FOR             reduce using rule 51 (statement -> return_stmt .)
    WHILE           reduce using rule 51 (statement -> return_stmt .)
    DO              reduce using rule 51 (statement -> return_stmt .)
    FUNCTION        reduce using rule 51 (statement -> return_stmt .)
    REQUIRE         reduce using rule 51 (statement -> return_stmt .)
    INCLUDE         reduce using rule 51 (statement -> return_stmt .)
    IDVAR           reduce using rule 51 (statement -> return_stmt .)
    TIMESTIMES      reduce using rule 51 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 51 (statement -> return_stmt .)
    ECHO            reduce using rule 51 (statement -> return_stmt .)
    LBLOCK          reduce using rule 51 (statement -> return_stmt .)
    RETURN          reduce using rule 51 (statement -> return_stmt .)
    LPAREN          reduce using rule 51 (statement -> return_stmt .)
    NUMBER          reduce using rule 51 (statement -> return_stmt .)
    ID              reduce using rule 51 (statement -> return_stmt .)
    TRUE            reduce using rule 51 (statement -> return_stmt .)
    FALSE           reduce using rule 51 (statement -> return_stmt .)
    RBLOCK          reduce using rule 51 (statement -> return_stmt .)


state 79

    (52) expression_stmt -> expression . SEMICOLON
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    SEMICOLON       shift and go to state 124
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 80

    (41) compount_stmt -> LBLOCK . echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (106) empty -> .

    ECHO            reduce using rule 106 (empty -> .)
    IDVAR           reduce using rule 106 (empty -> .)
    TIMESTIMES      reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    LBLOCK          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    SWITCH          reduce using rule 106 (empty -> .)
    CASE            reduce using rule 106 (empty -> .)
    DEFAULT         reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    LPAREN          reduce using rule 106 (empty -> .)
    NUMBER          reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    TRUE            reduce using rule 106 (empty -> .)
    FALSE           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)

    echo_stmt                      shift and go to state 125
    empty                          shift and go to state 13

state 81

    (64) return_stmt -> RETURN . SEMICOLON
    (65) return_stmt -> RETURN . expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    SEMICOLON       shift and go to state 126
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 127
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 82

    (61) iteration_stmt -> FOR LPAREN var_declaration2 . SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 128


state 83

    (62) iteration_stmt -> WHILE LPAREN expression . RPAREN statement
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    RPAREN          shift and go to state 129
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 84

    (63) iteration_stmt -> DO LBLOCK statement . SEMICOLON RBLOCK WHILE LPAREN expression RPAREN

    SEMICOLON       shift and go to state 130


state 85

    (33) fun_declaration -> FUNCTION ID LPAREN . params RPAREN
    (34) fun_declaration -> FUNCTION ID LPAREN . params RPAREN compount_stmt
    (35) params -> . param_list
    (36) params -> . empty
    (37) param_list -> . param_list COMMA param_list
    (38) param_list -> . param
    (106) empty -> .
    (39) param -> . IDVAR
    (40) param -> . IDVAR LBRACKET RBRACKET

    RPAREN          reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 135

    params                         shift and go to state 131
    param_list                     shift and go to state 132
    empty                          shift and go to state 133
    param                          shift and go to state 134

state 86

    (104) header_declaration -> REQUIRE LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 136


state 87

    (105) header_declaration -> INCLUDE LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 137


state 88

    (23) var_declaration2 -> TIMESTIMES IDVAR var_declaration2 .

    SEMICOLON       reduce using rule 23 (var_declaration2 -> TIMESTIMES IDVAR var_declaration2 .)


state 89

    (28) var_declaration2 -> AMPERSANT IDVAR var_declaration2 .

    SEMICOLON       reduce using rule 28 (var_declaration2 -> AMPERSANT IDVAR var_declaration2 .)


state 90

    (29) var_declaration2 -> AMPERSANT IDVAR EQUAL . IDVAR var_declaration2
    (30) var_declaration2 -> AMPERSANT IDVAR EQUAL . IDVAR

    IDVAR           shift and go to state 138


state 91

    (10) echo_stmt -> echo_stmt ECHO data_type SEMICOLON .

    ECHO            reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    CLOSETAG        reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    IF              reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    SWITCH          reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    CASE            reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    DEFAULT         reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    FOR             reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    WHILE           reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    DO              reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    FUNCTION        reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    REQUIRE         reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    INCLUDE         reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    IDVAR           reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    TIMESTIMES      reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    AMPERSANT       reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    BREAK           reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    SEMICOLON       reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    LBLOCK          reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    RETURN          reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    LPAREN          reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    NUMBER          reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    ID              reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    TRUE            reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    FALSE           reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    RBLOCK          reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    ELSE            reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)
    ELSEIF          reduce using rule 10 (echo_stmt -> echo_stmt ECHO data_type SEMICOLON .)


state 92

    (11) echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .

    ECHO            reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    CLOSETAG        reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    IF              reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    SWITCH          reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    CASE            reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    DEFAULT         reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    FOR             reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    WHILE           reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    DO              reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    FUNCTION        reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    REQUIRE         reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    INCLUDE         reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    IDVAR           reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    TIMESTIMES      reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    AMPERSANT       reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    BREAK           reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    SEMICOLON       reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    LBLOCK          reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    RETURN          reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    LPAREN          reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    NUMBER          reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    ID              reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    TRUE            reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    FALSE           reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    RBLOCK          reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    ELSE            reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    ELSEIF          reduce using rule 11 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)


state 93

    (12) echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .

    ECHO            reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    CLOSETAG        reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    IF              reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    SWITCH          reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    CASE            reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    DEFAULT         reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    FOR             reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    WHILE           reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    DO              reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    FUNCTION        reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    REQUIRE         reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    INCLUDE         reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    IDVAR           reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    TIMESTIMES      reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    AMPERSANT       reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    BREAK           reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    SEMICOLON       reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    LBLOCK          reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    RETURN          reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    LPAREN          reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    NUMBER          reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    ID              reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    TRUE            reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    FALSE           reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    RBLOCK          reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    ELSE            reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    ELSEIF          reduce using rule 12 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)


state 94

    (26) var_declaration2 -> IDVAR EQUAL IDVAR var_declaration2 .

    SEMICOLON       reduce using rule 26 (var_declaration2 -> IDVAR EQUAL IDVAR var_declaration2 .)


state 95

    (74) var -> IDVAR LBRACKET . expression RBRACKET
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 139
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 96

    (24) var_declaration2 -> IDVAR EQUAL data_type var_declaration2 .

    SEMICOLON       reduce using rule 24 (var_declaration2 -> IDVAR EQUAL data_type var_declaration2 .)


state 97

    (75) simple_expression -> additive_expression relop . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    IDVAR           shift and go to state 66
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    additive_expression            shift and go to state 140
    term                           shift and go to state 58
    factor                         shift and go to state 59
    var                            shift and go to state 61
    boolean                        shift and go to state 68

state 98

    (84) additive_expression -> additive_expression addop . term
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    IDVAR           shift and go to state 66
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    term                           shift and go to state 141
    factor                         shift and go to state 59
    var                            shift and go to state 61
    boolean                        shift and go to state 68

state 99

    (77) relop -> LESS .

    LPAREN          reduce using rule 77 (relop -> LESS .)
    NUMBER          reduce using rule 77 (relop -> LESS .)
    ID              reduce using rule 77 (relop -> LESS .)
    IDVAR           reduce using rule 77 (relop -> LESS .)
    TRUE            reduce using rule 77 (relop -> LESS .)
    FALSE           reduce using rule 77 (relop -> LESS .)


state 100

    (78) relop -> LESSEQUAL .

    LPAREN          reduce using rule 78 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 78 (relop -> LESSEQUAL .)
    ID              reduce using rule 78 (relop -> LESSEQUAL .)
    IDVAR           reduce using rule 78 (relop -> LESSEQUAL .)
    TRUE            reduce using rule 78 (relop -> LESSEQUAL .)
    FALSE           reduce using rule 78 (relop -> LESSEQUAL .)


state 101

    (79) relop -> GREATER .

    LPAREN          reduce using rule 79 (relop -> GREATER .)
    NUMBER          reduce using rule 79 (relop -> GREATER .)
    ID              reduce using rule 79 (relop -> GREATER .)
    IDVAR           reduce using rule 79 (relop -> GREATER .)
    TRUE            reduce using rule 79 (relop -> GREATER .)
    FALSE           reduce using rule 79 (relop -> GREATER .)


state 102

    (80) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 80 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 80 (relop -> GREATEREQUAL .)
    ID              reduce using rule 80 (relop -> GREATEREQUAL .)
    IDVAR           reduce using rule 80 (relop -> GREATEREQUAL .)
    TRUE            reduce using rule 80 (relop -> GREATEREQUAL .)
    FALSE           reduce using rule 80 (relop -> GREATEREQUAL .)


state 103

    (81) relop -> DEQUAL .

    LPAREN          reduce using rule 81 (relop -> DEQUAL .)
    NUMBER          reduce using rule 81 (relop -> DEQUAL .)
    ID              reduce using rule 81 (relop -> DEQUAL .)
    IDVAR           reduce using rule 81 (relop -> DEQUAL .)
    TRUE            reduce using rule 81 (relop -> DEQUAL .)
    FALSE           reduce using rule 81 (relop -> DEQUAL .)


state 104

    (82) relop -> DISTINT .

    LPAREN          reduce using rule 82 (relop -> DISTINT .)
    NUMBER          reduce using rule 82 (relop -> DISTINT .)
    ID              reduce using rule 82 (relop -> DISTINT .)
    IDVAR           reduce using rule 82 (relop -> DISTINT .)
    TRUE            reduce using rule 82 (relop -> DISTINT .)
    FALSE           reduce using rule 82 (relop -> DISTINT .)


state 105

    (83) relop -> ISEQUAL .

    LPAREN          reduce using rule 83 (relop -> ISEQUAL .)
    NUMBER          reduce using rule 83 (relop -> ISEQUAL .)
    ID              reduce using rule 83 (relop -> ISEQUAL .)
    IDVAR           reduce using rule 83 (relop -> ISEQUAL .)
    TRUE            reduce using rule 83 (relop -> ISEQUAL .)
    FALSE           reduce using rule 83 (relop -> ISEQUAL .)


state 106

    (88) addop -> PLUS .

    LPAREN          reduce using rule 88 (addop -> PLUS .)
    NUMBER          reduce using rule 88 (addop -> PLUS .)
    ID              reduce using rule 88 (addop -> PLUS .)
    IDVAR           reduce using rule 88 (addop -> PLUS .)
    TRUE            reduce using rule 88 (addop -> PLUS .)
    FALSE           reduce using rule 88 (addop -> PLUS .)


state 107

    (89) addop -> MINUS .

    LPAREN          reduce using rule 89 (addop -> MINUS .)
    NUMBER          reduce using rule 89 (addop -> MINUS .)
    ID              reduce using rule 89 (addop -> MINUS .)
    IDVAR           reduce using rule 89 (addop -> MINUS .)
    TRUE            reduce using rule 89 (addop -> MINUS .)
    FALSE           reduce using rule 89 (addop -> MINUS .)


state 108

    (86) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    DISTINT         reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    SEMICOLON       reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    AND             reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    OR              reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    XOR             reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 86 (additive_expression -> term MINUSMINUS .)


state 109

    (87) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    DISTINT         reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    SEMICOLON       reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    AND             reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    OR              reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    XOR             reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 87 (additive_expression -> term PLUSPLUS .)


state 110

    (90) term -> term mulop . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    IDVAR           shift and go to state 66
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    factor                         shift and go to state 142
    var                            shift and go to state 61
    boolean                        shift and go to state 68

state 111

    (92) mulop -> TIMES .

    LPAREN          reduce using rule 92 (mulop -> TIMES .)
    NUMBER          reduce using rule 92 (mulop -> TIMES .)
    ID              reduce using rule 92 (mulop -> TIMES .)
    IDVAR           reduce using rule 92 (mulop -> TIMES .)
    TRUE            reduce using rule 92 (mulop -> TIMES .)
    FALSE           reduce using rule 92 (mulop -> TIMES .)


state 112

    (93) mulop -> DIVIDE .

    LPAREN          reduce using rule 93 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 93 (mulop -> DIVIDE .)
    ID              reduce using rule 93 (mulop -> DIVIDE .)
    IDVAR           reduce using rule 93 (mulop -> DIVIDE .)
    TRUE            reduce using rule 93 (mulop -> DIVIDE .)
    FALSE           reduce using rule 93 (mulop -> DIVIDE .)


state 113

    (94) factor -> LPAREN expression . RPAREN
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    RPAREN          shift and go to state 143
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 114

    (98) factor -> ID LPAREN . args RPAREN
    (99) args -> . args_list
    (100) args -> . empty
    (101) args -> . VOID
    (102) args_list -> . args_list COMMA expression
    (103) args_list -> . expression
    (106) empty -> .
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    VOID            shift and go to state 147
    RPAREN          reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    args                           shift and go to state 144
    args_list                      shift and go to state 145
    empty                          shift and go to state 146
    expression                     shift and go to state 148
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 115

    (54) selection_stmt -> IF LPAREN expression RPAREN . statement
    (55) selection_stmt -> IF LPAREN expression RPAREN . statement selection
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (106) empty -> .
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    ELSEIF          reduce using rule 106 (empty -> .)
    CLOSETAG        reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    INCLUDE         reduce using rule 106 (empty -> .)
    TIMESTIMES      reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! DO              [ reduce using rule 106 (empty -> .) ]
  ! IDVAR           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    expression                     shift and go to state 79
    statement                      shift and go to state 149
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    echo_stmt                      shift and go to state 77
    return_stmt                    shift and go to state 78
    var                            shift and go to state 64
    additive_expression            shift and go to state 57
    empty                          shift and go to state 13
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 116

    (69) expression -> expression logic_operator . expression
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 150
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 117

    (70) logic_operator -> AND .

    IDVAR           reduce using rule 70 (logic_operator -> AND .)
    LPAREN          reduce using rule 70 (logic_operator -> AND .)
    NUMBER          reduce using rule 70 (logic_operator -> AND .)
    ID              reduce using rule 70 (logic_operator -> AND .)
    TRUE            reduce using rule 70 (logic_operator -> AND .)
    FALSE           reduce using rule 70 (logic_operator -> AND .)


state 118

    (71) logic_operator -> OR .

    IDVAR           reduce using rule 71 (logic_operator -> OR .)
    LPAREN          reduce using rule 71 (logic_operator -> OR .)
    NUMBER          reduce using rule 71 (logic_operator -> OR .)
    ID              reduce using rule 71 (logic_operator -> OR .)
    TRUE            reduce using rule 71 (logic_operator -> OR .)
    FALSE           reduce using rule 71 (logic_operator -> OR .)


state 119

    (72) logic_operator -> XOR .

    IDVAR           reduce using rule 72 (logic_operator -> XOR .)
    LPAREN          reduce using rule 72 (logic_operator -> XOR .)
    NUMBER          reduce using rule 72 (logic_operator -> XOR .)
    ID              reduce using rule 72 (logic_operator -> XOR .)
    TRUE            reduce using rule 72 (logic_operator -> XOR .)
    FALSE           reduce using rule 72 (logic_operator -> XOR .)


state 120

    (66) expression -> var EQUAL . expression
    (68) expression -> var EQUAL . AMPERSANT IDVAR
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    AMPERSANT       shift and go to state 152
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    var                            shift and go to state 64
    expression                     shift and go to state 151
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 121

    (58) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (106) empty -> .
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    ELSEIF          reduce using rule 106 (empty -> .)
    CLOSETAG        reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    INCLUDE         reduce using rule 106 (empty -> .)
    TIMESTIMES      reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! DO              [ reduce using rule 106 (empty -> .) ]
  ! IDVAR           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    var                            shift and go to state 64
    statement                      shift and go to state 153
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    echo_stmt                      shift and go to state 77
    return_stmt                    shift and go to state 78
    expression                     shift and go to state 79
    additive_expression            shift and go to state 57
    empty                          shift and go to state 13
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 122

    (59) selection_stmt -> CASE NUMBER COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 154


state 123

    (60) selection_stmt -> DEFAULT COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 155


state 124

    (52) expression_stmt -> expression SEMICOLON .

    BREAK           reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    ELSEIF          reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    CLOSETAG        reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    SWITCH          reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    CASE            reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    DEFAULT         reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    DO              reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    FUNCTION        reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    REQUIRE         reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    INCLUDE         reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    IDVAR           reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    TIMESTIMES      reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    AMPERSANT       reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    ECHO            reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    TRUE            reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    FALSE           reduce using rule 52 (expression_stmt -> expression SEMICOLON .)
    RBLOCK          reduce using rule 52 (expression_stmt -> expression SEMICOLON .)


state 125

    (41) compount_stmt -> LBLOCK echo_stmt . local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (10) echo_stmt -> echo_stmt . ECHO data_type SEMICOLON
    (11) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (12) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON
    (42) local_declarations -> . local_declarations var_declaration
    (43) local_declarations -> . empty
    (106) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 28
    IDVAR           reduce using rule 106 (empty -> .)
    TIMESTIMES      reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    LBLOCK          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    SWITCH          reduce using rule 106 (empty -> .)
    CASE            reduce using rule 106 (empty -> .)
    DEFAULT         reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    LPAREN          reduce using rule 106 (empty -> .)
    NUMBER          reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    TRUE            reduce using rule 106 (empty -> .)
    FALSE           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)

  ! ECHO            [ reduce using rule 106 (empty -> .) ]

    local_declarations             shift and go to state 156
    empty                          shift and go to state 157

state 126

    (64) return_stmt -> RETURN SEMICOLON .

    BREAK           reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    CLOSETAG        reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    CASE            reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    DO              reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    REQUIRE         reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    INCLUDE         reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    IDVAR           reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    TIMESTIMES      reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    AMPERSANT       reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    ECHO            reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    TRUE            reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    FALSE           reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)
    RBLOCK          reduce using rule 64 (return_stmt -> RETURN SEMICOLON .)


state 127

    (65) return_stmt -> RETURN expression . SEMICOLON
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    SEMICOLON       shift and go to state 158
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 128

    (61) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON . expression SEMICOLON additive_expression RPAREN statement
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 159
    additive_expression            shift and go to state 57
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 129

    (62) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (106) empty -> .
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    ELSEIF          reduce using rule 106 (empty -> .)
    CLOSETAG        reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    INCLUDE         reduce using rule 106 (empty -> .)
    TIMESTIMES      reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! DO              [ reduce using rule 106 (empty -> .) ]
  ! IDVAR           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    expression                     shift and go to state 79
    statement                      shift and go to state 160
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    echo_stmt                      shift and go to state 77
    return_stmt                    shift and go to state 78
    var                            shift and go to state 64
    additive_expression            shift and go to state 57
    empty                          shift and go to state 13
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 130

    (63) iteration_stmt -> DO LBLOCK statement SEMICOLON . RBLOCK WHILE LPAREN expression RPAREN

    RBLOCK          shift and go to state 161


state 131

    (33) fun_declaration -> FUNCTION ID LPAREN params . RPAREN
    (34) fun_declaration -> FUNCTION ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 162


state 132

    (35) params -> param_list .
    (37) param_list -> param_list . COMMA param_list

    RPAREN          reduce using rule 35 (params -> param_list .)
    COMMA           shift and go to state 163


state 133

    (36) params -> empty .

    RPAREN          reduce using rule 36 (params -> empty .)


state 134

    (38) param_list -> param .

    COMMA           reduce using rule 38 (param_list -> param .)
    RPAREN          reduce using rule 38 (param_list -> param .)


state 135

    (39) param -> IDVAR .
    (40) param -> IDVAR . LBRACKET RBRACKET

    COMMA           reduce using rule 39 (param -> IDVAR .)
    RPAREN          reduce using rule 39 (param -> IDVAR .)
    LBRACKET        shift and go to state 164


state 136

    (104) header_declaration -> REQUIRE LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 165


state 137

    (105) header_declaration -> INCLUDE LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 166


state 138

    (29) var_declaration2 -> AMPERSANT IDVAR EQUAL IDVAR . var_declaration2
    (30) var_declaration2 -> AMPERSANT IDVAR EQUAL IDVAR .
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression

    SEMICOLON       reduce using rule 30 (var_declaration2 -> AMPERSANT IDVAR EQUAL IDVAR .)
    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25

    var_declaration2               shift and go to state 167

state 139

    (74) var -> IDVAR LBRACKET expression . RBRACKET
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    RBRACKET        shift and go to state 168
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 140

    (75) simple_expression -> additive_expression relop additive_expression .
    (84) additive_expression -> additive_expression . addop term
    (88) addop -> . PLUS
    (89) addop -> . MINUS

    SEMICOLON       reduce using rule 75 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 75 (simple_expression -> additive_expression relop additive_expression .)
    AND             reduce using rule 75 (simple_expression -> additive_expression relop additive_expression .)
    OR              reduce using rule 75 (simple_expression -> additive_expression relop additive_expression .)
    XOR             reduce using rule 75 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 75 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 75 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

    addop                          shift and go to state 98

state 141

    (84) additive_expression -> additive_expression addop term .
    (90) term -> term . mulop factor
    (92) mulop -> . TIMES
    (93) mulop -> . DIVIDE

    LESS            reduce using rule 84 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 84 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 84 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 84 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 84 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 84 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 84 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 84 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 84 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    AND             reduce using rule 84 (additive_expression -> additive_expression addop term .)
    OR              reduce using rule 84 (additive_expression -> additive_expression addop term .)
    XOR             reduce using rule 84 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 84 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 84 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 111
    DIVIDE          shift and go to state 112

    mulop                          shift and go to state 110

state 142

    (90) term -> term mulop factor .

    MINUSMINUS      reduce using rule 90 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 90 (term -> term mulop factor .)
    TIMES           reduce using rule 90 (term -> term mulop factor .)
    DIVIDE          reduce using rule 90 (term -> term mulop factor .)
    LESS            reduce using rule 90 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 90 (term -> term mulop factor .)
    GREATER         reduce using rule 90 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 90 (term -> term mulop factor .)
    DEQUAL          reduce using rule 90 (term -> term mulop factor .)
    DISTINT         reduce using rule 90 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 90 (term -> term mulop factor .)
    PLUS            reduce using rule 90 (term -> term mulop factor .)
    MINUS           reduce using rule 90 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 90 (term -> term mulop factor .)
    RPAREN          reduce using rule 90 (term -> term mulop factor .)
    AND             reduce using rule 90 (term -> term mulop factor .)
    OR              reduce using rule 90 (term -> term mulop factor .)
    XOR             reduce using rule 90 (term -> term mulop factor .)
    RBRACKET        reduce using rule 90 (term -> term mulop factor .)
    COMMA           reduce using rule 90 (term -> term mulop factor .)


state 143

    (94) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    XOR             reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 94 (factor -> LPAREN expression RPAREN .)


state 144

    (98) factor -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 169


state 145

    (99) args -> args_list .
    (102) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 99 (args -> args_list .)
    COMMA           shift and go to state 170


state 146

    (100) args -> empty .

    RPAREN          reduce using rule 100 (args -> empty .)


state 147

    (101) args -> VOID .

    RPAREN          reduce using rule 101 (args -> VOID .)


state 148

    (103) args_list -> expression .
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    COMMA           reduce using rule 103 (args_list -> expression .)
    RPAREN          reduce using rule 103 (args_list -> expression .)
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 149

    (54) selection_stmt -> IF LPAREN expression RPAREN statement .
    (55) selection_stmt -> IF LPAREN expression RPAREN statement . selection
    (56) selection -> . ELSE statement
    (57) selection -> . ELSEIF statement selection

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    CLOSETAG        reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IDVAR           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 172
    ELSEIF          shift and go to state 173

  ! ELSE            [ reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]
  ! ELSEIF          [ reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]

    selection                      shift and go to state 171

state 150

    (69) expression -> expression logic_operator expression .
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
    RPAREN          reduce using rule 69 (expression -> expression logic_operator expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression logic_operator expression .)
    RBRACKET        reduce using rule 69 (expression -> expression logic_operator expression .)
    COMMA           reduce using rule 69 (expression -> expression logic_operator expression .)
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

  ! AND             [ reduce using rule 69 (expression -> expression logic_operator expression .) ]
  ! OR              [ reduce using rule 69 (expression -> expression logic_operator expression .) ]
  ! XOR             [ reduce using rule 69 (expression -> expression logic_operator expression .) ]

    logic_operator                 shift and go to state 116

state 151

    (66) expression -> var EQUAL expression .
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    RPAREN          reduce using rule 66 (expression -> var EQUAL expression .)
    SEMICOLON       reduce using rule 66 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 66 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 66 (expression -> var EQUAL expression .)
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

  ! AND             [ reduce using rule 66 (expression -> var EQUAL expression .) ]
  ! OR              [ reduce using rule 66 (expression -> var EQUAL expression .) ]
  ! XOR             [ reduce using rule 66 (expression -> var EQUAL expression .) ]

    logic_operator                 shift and go to state 116

state 152

    (68) expression -> var EQUAL AMPERSANT . IDVAR

    IDVAR           shift and go to state 174


state 153

    (58) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    CLOSETAG        reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DO              reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FUNCTION        reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    REQUIRE         reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    INCLUDE         reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IDVAR           reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TIMESTIMES      reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    AMPERSANT       reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ECHO            reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMICOLON       reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSEIF          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUMBER          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TRUE            reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FALSE           reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RBLOCK          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 154

    (59) selection_stmt -> CASE NUMBER COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 175


state 155

    (60) selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .

    CLOSETAG        reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DO              reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    INCLUDE         reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IDVAR           reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    TIMESTIMES      reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSEIF          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)


state 156

    (41) compount_stmt -> LBLOCK echo_stmt local_declarations . echo_stmt statement_list echo_stmt RBLOCK
    (42) local_declarations -> local_declarations . var_declaration
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (19) var_declaration -> . var_declaration2 SEMICOLON
    (106) empty -> .
    (20) var_declaration2 -> . IDVAR var_declaration2
    (21) var_declaration2 -> . IDVAR
    (22) var_declaration2 -> . TIMESTIMES IDVAR
    (23) var_declaration2 -> . TIMESTIMES IDVAR var_declaration2
    (24) var_declaration2 -> . IDVAR EQUAL data_type var_declaration2
    (25) var_declaration2 -> . IDVAR EQUAL data_type
    (26) var_declaration2 -> . IDVAR EQUAL IDVAR var_declaration2
    (27) var_declaration2 -> . IDVAR EQUAL IDVAR
    (28) var_declaration2 -> . AMPERSANT IDVAR var_declaration2
    (29) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR var_declaration2
    (30) var_declaration2 -> . AMPERSANT IDVAR EQUAL IDVAR
    (31) var_declaration2 -> . AMPERSANT IDVAR
    (32) var_declaration2 -> . IDVAR EQUAL simple_expression

  ! shift/reduce conflict for IDVAR resolved as shift
    ECHO            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    LBLOCK          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    SWITCH          reduce using rule 106 (empty -> .)
    CASE            reduce using rule 106 (empty -> .)
    DEFAULT         reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    LPAREN          reduce using rule 106 (empty -> .)
    NUMBER          reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    TRUE            reduce using rule 106 (empty -> .)
    FALSE           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 12
    TIMESTIMES      shift and go to state 24
    AMPERSANT       shift and go to state 25

  ! IDVAR           [ reduce using rule 106 (empty -> .) ]

    echo_stmt                      shift and go to state 176
    var_declaration                shift and go to state 177
    empty                          shift and go to state 13
    var_declaration2               shift and go to state 11

state 157

    (43) local_declarations -> empty .

    IDVAR           reduce using rule 43 (local_declarations -> empty .)
    TIMESTIMES      reduce using rule 43 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 43 (local_declarations -> empty .)
    ECHO            reduce using rule 43 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 43 (local_declarations -> empty .)
    LBLOCK          reduce using rule 43 (local_declarations -> empty .)
    IF              reduce using rule 43 (local_declarations -> empty .)
    SWITCH          reduce using rule 43 (local_declarations -> empty .)
    CASE            reduce using rule 43 (local_declarations -> empty .)
    DEFAULT         reduce using rule 43 (local_declarations -> empty .)
    FOR             reduce using rule 43 (local_declarations -> empty .)
    WHILE           reduce using rule 43 (local_declarations -> empty .)
    DO              reduce using rule 43 (local_declarations -> empty .)
    RETURN          reduce using rule 43 (local_declarations -> empty .)
    LPAREN          reduce using rule 43 (local_declarations -> empty .)
    NUMBER          reduce using rule 43 (local_declarations -> empty .)
    ID              reduce using rule 43 (local_declarations -> empty .)
    TRUE            reduce using rule 43 (local_declarations -> empty .)
    FALSE           reduce using rule 43 (local_declarations -> empty .)
    RBLOCK          reduce using rule 43 (local_declarations -> empty .)


state 158

    (65) return_stmt -> RETURN expression SEMICOLON .

    BREAK           reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    ELSEIF          reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    CLOSETAG        reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    DO              reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    REQUIRE         reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    INCLUDE         reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    IDVAR           reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    TIMESTIMES      reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    AMPERSANT       reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    ECHO            reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)
    RBLOCK          reduce using rule 65 (return_stmt -> RETURN expression SEMICOLON .)


state 159

    (61) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression . SEMICOLON additive_expression RPAREN statement
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    SEMICOLON       shift and go to state 178
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 160

    (62) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    CLOSETAG        reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IDVAR           reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSEIF          reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 62 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 161

    (63) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 179


state 162

    (33) fun_declaration -> FUNCTION ID LPAREN params RPAREN .
    (34) fun_declaration -> FUNCTION ID LPAREN params RPAREN . compount_stmt
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK

    CLOSETAG        reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    IF              reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    SWITCH          reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    CASE            reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    DEFAULT         reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    FOR             reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    WHILE           reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    DO              reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    FUNCTION        reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    REQUIRE         reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    INCLUDE         reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    IDVAR           reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    TIMESTIMES      reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    AMPERSANT       reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    ECHO            reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 33 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    LBLOCK          shift and go to state 80

    compount_stmt                  shift and go to state 180

state 163

    (37) param_list -> param_list COMMA . param_list
    (37) param_list -> . param_list COMMA param_list
    (38) param_list -> . param
    (39) param -> . IDVAR
    (40) param -> . IDVAR LBRACKET RBRACKET

    IDVAR           shift and go to state 135

    param_list                     shift and go to state 181
    param                          shift and go to state 134

state 164

    (40) param -> IDVAR LBRACKET . RBRACKET

    RBRACKET        shift and go to state 182


state 165

    (104) header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .

    CLOSETAG        reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    DO              reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    REQUIRE         reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    IDVAR           reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    TIMESTIMES      reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    AMPERSANT       reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ECHO            reduce using rule 104 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)


state 166

    (105) header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .

    CLOSETAG        reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    DO              reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    REQUIRE         reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    IDVAR           reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    TIMESTIMES      reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    AMPERSANT       reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    ECHO            reduce using rule 105 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)


state 167

    (29) var_declaration2 -> AMPERSANT IDVAR EQUAL IDVAR var_declaration2 .

    SEMICOLON       reduce using rule 29 (var_declaration2 -> AMPERSANT IDVAR EQUAL IDVAR var_declaration2 .)


state 168

    (74) var -> IDVAR LBRACKET expression RBRACKET .

    MINUSMINUS      reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    LESS            reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    AND             reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    OR              reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    XOR             reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 74 (var -> IDVAR LBRACKET expression RBRACKET .)


state 169

    (98) factor -> ID LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    DEQUAL          reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    DISTINT         reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    AND             reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    OR              reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    XOR             reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 98 (factor -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 98 (factor -> ID LPAREN args RPAREN .)


state 170

    (102) args_list -> args_list COMMA . expression
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 183
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 171

    (55) selection_stmt -> IF LPAREN expression RPAREN statement selection .

    CLOSETAG        reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    IF              reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SWITCH          reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    CASE            reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DEFAULT         reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FOR             reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    WHILE           reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DO              reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FUNCTION        reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    REQUIRE         reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    INCLUDE         reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    IDVAR           reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TIMESTIMES      reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    AMPERSANT       reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ECHO            reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    BREAK           reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SEMICOLON       reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSE            reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSEIF          reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LBLOCK          reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RETURN          reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LPAREN          reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    NUMBER          reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ID              reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TRUE            reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FALSE           reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RBLOCK          reduce using rule 55 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)


state 172

    (56) selection -> ELSE . statement
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (106) empty -> .
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    ELSEIF          reduce using rule 106 (empty -> .)
    CLOSETAG        reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    INCLUDE         reduce using rule 106 (empty -> .)
    TIMESTIMES      reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! DO              [ reduce using rule 106 (empty -> .) ]
  ! IDVAR           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    statement                      shift and go to state 184
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    echo_stmt                      shift and go to state 77
    return_stmt                    shift and go to state 78
    expression                     shift and go to state 79
    var                            shift and go to state 64
    additive_expression            shift and go to state 57
    empty                          shift and go to state 13
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 173

    (57) selection -> ELSEIF . statement selection
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (106) empty -> .
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    ELSEIF          reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    statement                      shift and go to state 185
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    echo_stmt                      shift and go to state 77
    return_stmt                    shift and go to state 78
    expression                     shift and go to state 79
    var                            shift and go to state 64
    additive_expression            shift and go to state 57
    empty                          shift and go to state 13
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 174

    (68) expression -> var EQUAL AMPERSANT IDVAR .

    RPAREN          reduce using rule 68 (expression -> var EQUAL AMPERSANT IDVAR .)
    AND             reduce using rule 68 (expression -> var EQUAL AMPERSANT IDVAR .)
    OR              reduce using rule 68 (expression -> var EQUAL AMPERSANT IDVAR .)
    XOR             reduce using rule 68 (expression -> var EQUAL AMPERSANT IDVAR .)
    SEMICOLON       reduce using rule 68 (expression -> var EQUAL AMPERSANT IDVAR .)
    RBRACKET        reduce using rule 68 (expression -> var EQUAL AMPERSANT IDVAR .)
    COMMA           reduce using rule 68 (expression -> var EQUAL AMPERSANT IDVAR .)


state 175

    (59) selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .

    CLOSETAG        reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DO              reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    INCLUDE         reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IDVAR           reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    TIMESTIMES      reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSEIF          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)


state 176

    (41) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt . statement_list echo_stmt RBLOCK
    (10) echo_stmt -> echo_stmt . ECHO data_type SEMICOLON
    (11) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (12) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON
    (44) statement_list -> . statement_list statement
    (45) statement_list -> . empty
    (106) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 28
    SEMICOLON       reduce using rule 106 (empty -> .)
    LBLOCK          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    SWITCH          reduce using rule 106 (empty -> .)
    CASE            reduce using rule 106 (empty -> .)
    DEFAULT         reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    IDVAR           reduce using rule 106 (empty -> .)
    LPAREN          reduce using rule 106 (empty -> .)
    NUMBER          reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    TRUE            reduce using rule 106 (empty -> .)
    FALSE           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)

  ! ECHO            [ reduce using rule 106 (empty -> .) ]

    statement_list                 shift and go to state 186
    empty                          shift and go to state 187

state 177

    (42) local_declarations -> local_declarations var_declaration .

    IDVAR           reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    TIMESTIMES      reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    AMPERSANT       reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    ECHO            reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    SEMICOLON       reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    DO              reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    ID              reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    TRUE            reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    FALSE           reduce using rule 42 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 42 (local_declarations -> local_declarations var_declaration .)


state 178

    (61) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON . additive_expression RPAREN statement
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    IDVAR           shift and go to state 66
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    additive_expression            shift and go to state 188
    term                           shift and go to state 58
    factor                         shift and go to state 59
    var                            shift and go to state 61
    boolean                        shift and go to state 68

state 179

    (63) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 189


state 180

    (34) fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .

    CLOSETAG        reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    IF              reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SWITCH          reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    CASE            reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DEFAULT         reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FOR             reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    WHILE           reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DO              reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FUNCTION        reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    REQUIRE         reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    INCLUDE         reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    IDVAR           reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    TIMESTIMES      reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    AMPERSANT       reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    ECHO            reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SEMICOLON       reduce using rule 34 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)


state 181

    (37) param_list -> param_list COMMA param_list .
    (37) param_list -> param_list . COMMA param_list

    COMMA           reduce using rule 37 (param_list -> param_list COMMA param_list .)
    RPAREN          reduce using rule 37 (param_list -> param_list COMMA param_list .)

  ! COMMA           [ shift and go to state 163 ]


state 182

    (40) param -> IDVAR LBRACKET RBRACKET .

    COMMA           reduce using rule 40 (param -> IDVAR LBRACKET RBRACKET .)
    RPAREN          reduce using rule 40 (param -> IDVAR LBRACKET RBRACKET .)


state 183

    (102) args_list -> args_list COMMA expression .
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    COMMA           reduce using rule 102 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 102 (args_list -> args_list COMMA expression .)
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 184

    (56) selection -> ELSE statement .

    ELSE            reduce using rule 56 (selection -> ELSE statement .)
    ELSEIF          reduce using rule 56 (selection -> ELSE statement .)
    CLOSETAG        reduce using rule 56 (selection -> ELSE statement .)
    IF              reduce using rule 56 (selection -> ELSE statement .)
    SWITCH          reduce using rule 56 (selection -> ELSE statement .)
    CASE            reduce using rule 56 (selection -> ELSE statement .)
    DEFAULT         reduce using rule 56 (selection -> ELSE statement .)
    FOR             reduce using rule 56 (selection -> ELSE statement .)
    WHILE           reduce using rule 56 (selection -> ELSE statement .)
    DO              reduce using rule 56 (selection -> ELSE statement .)
    FUNCTION        reduce using rule 56 (selection -> ELSE statement .)
    REQUIRE         reduce using rule 56 (selection -> ELSE statement .)
    INCLUDE         reduce using rule 56 (selection -> ELSE statement .)
    IDVAR           reduce using rule 56 (selection -> ELSE statement .)
    TIMESTIMES      reduce using rule 56 (selection -> ELSE statement .)
    AMPERSANT       reduce using rule 56 (selection -> ELSE statement .)
    ECHO            reduce using rule 56 (selection -> ELSE statement .)
    BREAK           reduce using rule 56 (selection -> ELSE statement .)
    SEMICOLON       reduce using rule 56 (selection -> ELSE statement .)
    LBLOCK          reduce using rule 56 (selection -> ELSE statement .)
    RETURN          reduce using rule 56 (selection -> ELSE statement .)
    LPAREN          reduce using rule 56 (selection -> ELSE statement .)
    NUMBER          reduce using rule 56 (selection -> ELSE statement .)
    ID              reduce using rule 56 (selection -> ELSE statement .)
    TRUE            reduce using rule 56 (selection -> ELSE statement .)
    FALSE           reduce using rule 56 (selection -> ELSE statement .)
    RBLOCK          reduce using rule 56 (selection -> ELSE statement .)


state 185

    (57) selection -> ELSEIF statement . selection
    (56) selection -> . ELSE statement
    (57) selection -> . ELSEIF statement selection

    ELSE            shift and go to state 172
    ELSEIF          shift and go to state 173

    selection                      shift and go to state 190

state 186

    (41) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list . echo_stmt RBLOCK
    (44) statement_list -> statement_list . statement
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (106) empty -> .
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBLOCK          reduce using rule 106 (empty -> .)
    ECHO            reduce using rule 106 (empty -> .)
    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! DO              [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! IDVAR           [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    echo_stmt                      shift and go to state 191
    statement                      shift and go to state 192
    empty                          shift and go to state 13
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    return_stmt                    shift and go to state 78
    expression                     shift and go to state 79
    var                            shift and go to state 64
    additive_expression            shift and go to state 57
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 187

    (45) statement_list -> empty .

    SEMICOLON       reduce using rule 45 (statement_list -> empty .)
    LBLOCK          reduce using rule 45 (statement_list -> empty .)
    IF              reduce using rule 45 (statement_list -> empty .)
    SWITCH          reduce using rule 45 (statement_list -> empty .)
    CASE            reduce using rule 45 (statement_list -> empty .)
    DEFAULT         reduce using rule 45 (statement_list -> empty .)
    FOR             reduce using rule 45 (statement_list -> empty .)
    WHILE           reduce using rule 45 (statement_list -> empty .)
    DO              reduce using rule 45 (statement_list -> empty .)
    RETURN          reduce using rule 45 (statement_list -> empty .)
    IDVAR           reduce using rule 45 (statement_list -> empty .)
    LPAREN          reduce using rule 45 (statement_list -> empty .)
    NUMBER          reduce using rule 45 (statement_list -> empty .)
    ID              reduce using rule 45 (statement_list -> empty .)
    TRUE            reduce using rule 45 (statement_list -> empty .)
    FALSE           reduce using rule 45 (statement_list -> empty .)
    RBLOCK          reduce using rule 45 (statement_list -> empty .)
    ECHO            reduce using rule 45 (statement_list -> empty .)


state 188

    (61) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression . RPAREN statement
    (84) additive_expression -> additive_expression . addop term
    (88) addop -> . PLUS
    (89) addop -> . MINUS

    RPAREN          shift and go to state 193
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

    addop                          shift and go to state 98

state 189

    (63) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN . expression RPAREN
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 194
    var                            shift and go to state 64
    simple_expression              shift and go to state 65
    additive_expression            shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 190

    (57) selection -> ELSEIF statement selection .

    ELSE            reduce using rule 57 (selection -> ELSEIF statement selection .)
    ELSEIF          reduce using rule 57 (selection -> ELSEIF statement selection .)
    CLOSETAG        reduce using rule 57 (selection -> ELSEIF statement selection .)
    IF              reduce using rule 57 (selection -> ELSEIF statement selection .)
    SWITCH          reduce using rule 57 (selection -> ELSEIF statement selection .)
    CASE            reduce using rule 57 (selection -> ELSEIF statement selection .)
    DEFAULT         reduce using rule 57 (selection -> ELSEIF statement selection .)
    FOR             reduce using rule 57 (selection -> ELSEIF statement selection .)
    WHILE           reduce using rule 57 (selection -> ELSEIF statement selection .)
    DO              reduce using rule 57 (selection -> ELSEIF statement selection .)
    FUNCTION        reduce using rule 57 (selection -> ELSEIF statement selection .)
    REQUIRE         reduce using rule 57 (selection -> ELSEIF statement selection .)
    INCLUDE         reduce using rule 57 (selection -> ELSEIF statement selection .)
    IDVAR           reduce using rule 57 (selection -> ELSEIF statement selection .)
    TIMESTIMES      reduce using rule 57 (selection -> ELSEIF statement selection .)
    AMPERSANT       reduce using rule 57 (selection -> ELSEIF statement selection .)
    ECHO            reduce using rule 57 (selection -> ELSEIF statement selection .)
    BREAK           reduce using rule 57 (selection -> ELSEIF statement selection .)
    SEMICOLON       reduce using rule 57 (selection -> ELSEIF statement selection .)
    LBLOCK          reduce using rule 57 (selection -> ELSEIF statement selection .)
    RETURN          reduce using rule 57 (selection -> ELSEIF statement selection .)
    LPAREN          reduce using rule 57 (selection -> ELSEIF statement selection .)
    NUMBER          reduce using rule 57 (selection -> ELSEIF statement selection .)
    ID              reduce using rule 57 (selection -> ELSEIF statement selection .)
    TRUE            reduce using rule 57 (selection -> ELSEIF statement selection .)
    FALSE           reduce using rule 57 (selection -> ELSEIF statement selection .)
    RBLOCK          reduce using rule 57 (selection -> ELSEIF statement selection .)


state 191

    (41) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt . RBLOCK
    (10) echo_stmt -> echo_stmt . ECHO data_type SEMICOLON
    (11) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (12) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON
    (50) statement -> echo_stmt .

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    RBLOCK          shift and go to state 195
    ECHO            shift and go to state 28
    SEMICOLON       reduce using rule 50 (statement -> echo_stmt .)
    LBLOCK          reduce using rule 50 (statement -> echo_stmt .)
    IF              reduce using rule 50 (statement -> echo_stmt .)
    SWITCH          reduce using rule 50 (statement -> echo_stmt .)
    CASE            reduce using rule 50 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 50 (statement -> echo_stmt .)
    FOR             reduce using rule 50 (statement -> echo_stmt .)
    WHILE           reduce using rule 50 (statement -> echo_stmt .)
    DO              reduce using rule 50 (statement -> echo_stmt .)
    RETURN          reduce using rule 50 (statement -> echo_stmt .)
    IDVAR           reduce using rule 50 (statement -> echo_stmt .)
    LPAREN          reduce using rule 50 (statement -> echo_stmt .)
    NUMBER          reduce using rule 50 (statement -> echo_stmt .)
    ID              reduce using rule 50 (statement -> echo_stmt .)
    TRUE            reduce using rule 50 (statement -> echo_stmt .)
    FALSE           reduce using rule 50 (statement -> echo_stmt .)

  ! RBLOCK          [ reduce using rule 50 (statement -> echo_stmt .) ]
  ! ECHO            [ reduce using rule 50 (statement -> echo_stmt .) ]


state 192

    (44) statement_list -> statement_list statement .

    SEMICOLON       reduce using rule 44 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 44 (statement_list -> statement_list statement .)
    IF              reduce using rule 44 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 44 (statement_list -> statement_list statement .)
    CASE            reduce using rule 44 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 44 (statement_list -> statement_list statement .)
    FOR             reduce using rule 44 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 44 (statement_list -> statement_list statement .)
    DO              reduce using rule 44 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 44 (statement_list -> statement_list statement .)
    IDVAR           reduce using rule 44 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 44 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 44 (statement_list -> statement_list statement .)
    ID              reduce using rule 44 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 44 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 44 (statement_list -> statement_list statement .)
    RBLOCK          reduce using rule 44 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 44 (statement_list -> statement_list statement .)


state 193

    (61) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN . statement
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . echo_stmt
    (51) statement -> . return_stmt
    (52) expression_stmt -> . expression SEMICOLON
    (53) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement
    (55) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (62) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (63) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (10) echo_stmt -> . echo_stmt ECHO data_type SEMICOLON
    (11) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (12) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (13) echo_stmt -> . empty
    (64) return_stmt -> . RETURN SEMICOLON
    (65) return_stmt -> . RETURN expression SEMICOLON
    (66) expression -> . var EQUAL expression
    (67) expression -> . simple_expression
    (68) expression -> . var EQUAL AMPERSANT IDVAR
    (69) expression -> . expression logic_operator expression
    (106) empty -> .
    (73) var -> . IDVAR
    (74) var -> . IDVAR LBRACKET expression RBRACKET
    (75) simple_expression -> . additive_expression relop additive_expression
    (76) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . NUMBER
    (97) factor -> . boolean
    (98) factor -> . ID LPAREN args RPAREN
    (17) boolean -> . TRUE
    (18) boolean -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 72
    LBLOCK          shift and go to state 80
    IF              shift and go to state 14
    SWITCH          shift and go to state 15
    CASE            shift and go to state 16
    DEFAULT         shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    DO              shift and go to state 20
    RETURN          shift and go to state 81
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    ELSEIF          reduce using rule 106 (empty -> .)
    CLOSETAG        reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    INCLUDE         reduce using rule 106 (empty -> .)
    TIMESTIMES      reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    IDVAR           shift and go to state 66
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 67
    ID              shift and go to state 62
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! DO              [ reduce using rule 106 (empty -> .) ]
  ! IDVAR           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    expression                     shift and go to state 79
    additive_expression            shift and go to state 57
    statement                      shift and go to state 196
    expression_stmt                shift and go to state 73
    compount_stmt                  shift and go to state 74
    selection_stmt                 shift and go to state 75
    iteration_stmt                 shift and go to state 76
    echo_stmt                      shift and go to state 77
    return_stmt                    shift and go to state 78
    var                            shift and go to state 64
    empty                          shift and go to state 13
    simple_expression              shift and go to state 65
    term                           shift and go to state 58
    factor                         shift and go to state 59
    boolean                        shift and go to state 68

state 194

    (63) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression . RPAREN
    (69) expression -> expression . logic_operator expression
    (70) logic_operator -> . AND
    (71) logic_operator -> . OR
    (72) logic_operator -> . XOR

    RPAREN          shift and go to state 197
    AND             shift and go to state 117
    OR              shift and go to state 118
    XOR             shift and go to state 119

    logic_operator                 shift and go to state 116

state 195

    (41) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .

    BREAK           reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SEMICOLON       reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSE            reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSEIF          reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CLOSETAG        reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    IF              reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SWITCH          reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CASE            reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DEFAULT         reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FOR             reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    WHILE           reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DO              reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FUNCTION        reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    REQUIRE         reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    INCLUDE         reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    IDVAR           reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TIMESTIMES      reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    AMPERSANT       reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ECHO            reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LBLOCK          reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RETURN          reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LPAREN          reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    NUMBER          reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ID              reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TRUE            reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FALSE           reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RBLOCK          reduce using rule 41 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)


state 196

    (61) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .

    CLOSETAG        reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IF              reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SWITCH          reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CASE            reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FOR             reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    WHILE           reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DO              reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    REQUIRE         reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    INCLUDE         reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IDVAR           reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    TIMESTIMES      reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    AMPERSANT       reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ECHO            reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    BREAK           reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SEMICOLON       reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSE            reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSEIF          reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RETURN          reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LPAREN          reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    NUMBER          reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ID              reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    TRUE            reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FALSE           reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 61 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)


state 197

    (63) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .

    CLOSETAG        reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    REQUIRE         reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    INCLUDE         reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    IDVAR           reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    TIMESTIMES      reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    ECHO            reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    ELSEIF          reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    LBLOCK          reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    NUMBER          reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    TRUE            reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    FALSE           reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 63 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for CASE in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for DO in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 2 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 2 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 2 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 2 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSETAG in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for CASE in state 3 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 3 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 3 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 3 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 3 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 3 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 6 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 38 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 77 resolved as shift
WARNING: shift/reduce conflict for IF in state 115 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 115 resolved as shift
WARNING: shift/reduce conflict for CASE in state 115 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 115 resolved as shift
WARNING: shift/reduce conflict for FOR in state 115 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 115 resolved as shift
WARNING: shift/reduce conflict for DO in state 115 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 115 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 115 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 115 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 115 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 115 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 115 resolved as shift
WARNING: shift/reduce conflict for IF in state 121 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 121 resolved as shift
WARNING: shift/reduce conflict for CASE in state 121 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 121 resolved as shift
WARNING: shift/reduce conflict for FOR in state 121 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 121 resolved as shift
WARNING: shift/reduce conflict for DO in state 121 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 121 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 121 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 121 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 121 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 121 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 121 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 125 resolved as shift
WARNING: shift/reduce conflict for IF in state 129 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 129 resolved as shift
WARNING: shift/reduce conflict for CASE in state 129 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 129 resolved as shift
WARNING: shift/reduce conflict for FOR in state 129 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 129 resolved as shift
WARNING: shift/reduce conflict for DO in state 129 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 129 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 129 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 129 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 129 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 129 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 129 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 129 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 149 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 149 resolved as shift
WARNING: shift/reduce conflict for AND in state 150 resolved as shift
WARNING: shift/reduce conflict for OR in state 150 resolved as shift
WARNING: shift/reduce conflict for XOR in state 150 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 172 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 172 resolved as shift
WARNING: shift/reduce conflict for CASE in state 172 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 172 resolved as shift
WARNING: shift/reduce conflict for FOR in state 172 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 172 resolved as shift
WARNING: shift/reduce conflict for DO in state 172 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 172 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 172 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 172 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 172 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 172 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 172 resolved as shift
WARNING: shift/reduce conflict for ID in state 172 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 172 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 172 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 176 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 186 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 186 resolved as shift
WARNING: shift/reduce conflict for IF in state 186 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 186 resolved as shift
WARNING: shift/reduce conflict for CASE in state 186 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 186 resolved as shift
WARNING: shift/reduce conflict for FOR in state 186 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 186 resolved as shift
WARNING: shift/reduce conflict for DO in state 186 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 186 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 186 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 186 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 186 resolved as shift
WARNING: shift/reduce conflict for ID in state 186 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 186 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 186 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 191 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 191 resolved as shift
WARNING: shift/reduce conflict for IF in state 193 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 193 resolved as shift
WARNING: shift/reduce conflict for CASE in state 193 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 193 resolved as shift
WARNING: shift/reduce conflict for FOR in state 193 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 193 resolved as shift
WARNING: shift/reduce conflict for DO in state 193 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 193 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 193 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 193 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 193 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 193 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 193 resolved as shift
WARNING: shift/reduce conflict for ID in state 193 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 193 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 193 resolved as shift
WARNING: reduce/reduce conflict in state 52 resolved using rule (var_declaration2 -> IDVAR EQUAL IDVAR)
WARNING: rejected rule (var -> IDVAR) in state 52
WARNING: reduce/reduce conflict in state 55 resolved using rule (data_type -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 55
WARNING: reduce/reduce conflict in state 56 resolved using rule (data_type -> boolean)
WARNING: rejected rule (factor -> boolean) in state 56

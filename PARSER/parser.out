Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ARRAY
    AS
    CALLABLE
    CATCH
    CLONE
    CONST
    CONTINUE
    DECLARE
    DIE
    DOT
    DOUBLEQUOTE
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EVAL
    EXIT
    EXTENDS
    FOREACH
    GLOBAL
    GOTO
    HASHTAG
    IMPLEMENTS
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MINUSEQUAL
    NAMESPACE
    PLUSEQUAL
    PRINT
    QUESTIONMARK
    QUOTE
    REQUIRE_ONCE
    STATIC
    THROW
    TRAIT
    TRY
    UNSET
    USE
    XOR
    __HALT_COMPILER

Grammar

Rule 0     S' -> program
Rule 1     program -> OPENTAG declaration_list CLOSETAG
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     declaration -> area fun_declaration
Rule 7     declaration -> header_declaration
Rule 8     declaration -> class_declaration
Rule 9     declaration -> echo_stmt
Rule 10    declaration -> selection_stmt
Rule 11    declaration -> iteration_stmt
Rule 12    declaration -> typeclass
Rule 13    echo_stmt -> echo_stmt ECHO STRING SEMICOLON
Rule 14    echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON
Rule 15    echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON
Rule 16    echo_stmt -> echo_stmt ECHO boolean SEMICOLON
Rule 17    echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON
Rule 18    echo_stmt -> empty
Rule 19    header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON
Rule 20    header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON
Rule 21    class_declaration -> area CLASS ID LBLOCK attribute RBLOCK
Rule 22    class_declaration -> CLASS ID LBLOCK attribute RBLOCK
Rule 23    attribute -> attribute area var_declaration
Rule 24    attribute -> area var_declaration
Rule 25    attribute -> attribute area fun_declaration
Rule 26    attribute -> area fun_declaration
Rule 27    area -> PRIVATE
Rule 28    area -> PUBLIC
Rule 29    area -> PROTECTED
Rule 30    var_declaration -> IDVAR SEMICOLON var_declaration
Rule 31    var_declaration -> IDVAR SEMICOLON
Rule 32    var_declaration -> TIMESTIMES IDVAR SEMICOLON
Rule 33    var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration
Rule 34    var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration
Rule 35    var_declaration -> IDVAR EQUAL NUMBER SEMICOLON
Rule 36    var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration
Rule 37    var_declaration -> IDVAR EQUAL boolean SEMICOLON
Rule 38    var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration
Rule 39    var_declaration -> IDVAR EQUAL IDVAR SEMICOLON
Rule 40    var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration
Rule 41    var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
Rule 42    var_declaration -> AMPERSANT IDVAR SEMICOLON
Rule 43    var_declaration -> IDVAR EQUAL simple_expression SEMICOLON
Rule 44    fun_declaration -> FUNCTION ID LPAREN params RPAREN
Rule 45    fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt
Rule 46    params -> param_list
Rule 47    params -> empty
Rule 48    param_list -> param_list COMMA param_list
Rule 49    param_list -> param
Rule 50    param -> IDVAR
Rule 51    param -> IDVAR LBRACKET RBRACKET
Rule 52    compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
Rule 53    local_declarations -> local_declarations var_declaration
Rule 54    local_declarations -> empty
Rule 55    statement_list -> statement_list statement
Rule 56    statement_list -> empty
Rule 57    statement -> expression_stmt
Rule 58    statement -> compount_stmt
Rule 59    statement -> selection_stmt
Rule 60    statement -> iteration_stmt
Rule 61    statement -> return_stmt
Rule 62    statement -> class_declaration
Rule 63    statement -> echo_stmt
Rule 64    expression_stmt -> expression SEMICOLON
Rule 65    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 66    selection_stmt -> IF LPAREN expression RPAREN statement selection
Rule 67    selection -> ELSE statement
Rule 68    selection -> ELSEIF statement selection
Rule 69    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 70    selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON
Rule 71    selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON
Rule 72    iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
Rule 73    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 74    iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
Rule 75    return_stmt -> RETURN SEMICOLON
Rule 76    return_stmt -> RETURN expression SEMICOLON
Rule 77    expression -> var EQUAL expression
Rule 78    expression -> simple_expression
Rule 79    expression -> var EQUAL AMPERSANT IDVAR
Rule 80    expression -> expression AND expression
Rule 81    expression -> expression OR expression
Rule 82    var -> IDVAR
Rule 83    var -> IDVAR LBRACKET expression RBRACKET
Rule 84    simple_expression -> additive_expression relop additive_expression
Rule 85    simple_expression -> additive_expression
Rule 86    relop -> LESS
Rule 87    relop -> LESSEQUAL
Rule 88    relop -> GREATER
Rule 89    relop -> GREATEREQUAL
Rule 90    relop -> DEQUAL
Rule 91    relop -> DISTINT
Rule 92    relop -> ISEQUAL
Rule 93    additive_expression -> additive_expression addop term
Rule 94    additive_expression -> term
Rule 95    additive_expression -> term MINUSMINUS
Rule 96    additive_expression -> term PLUSPLUS
Rule 97    addop -> PLUS
Rule 98    addop -> MINUS
Rule 99    term -> term mulop factor
Rule 100   term -> factor
Rule 101   mulop -> TIMES
Rule 102   mulop -> DIVIDE
Rule 103   factor -> LPAREN expression RPAREN
Rule 104   factor -> var
Rule 105   factor -> NUMBER
Rule 106   factor -> boolean
Rule 107   factor -> IDVAR LPAREN args RPAREN
Rule 108   args -> args_list
Rule 109   args -> empty
Rule 110   args -> VOID
Rule 111   args_list -> args_list COMMA expression
Rule 112   args_list -> expression
Rule 113   boolean -> TRUE
Rule 114   boolean -> FALSE
Rule 115   typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON
Rule 116   constructor -> ID LPAREN RPAREN
Rule 117   constructor -> ID LPAREN args RPAREN
Rule 118   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AMPERSANT            : 40 41 42 79
AND                  : 80
ARRAY                : 
AS                   : 
BREAK                : 70 71
CALLABLE             : 
CASE                 : 70
CATCH                : 
CLASS                : 21 22
CLONE                : 
CLOSETAG             : 1
COLON                : 70 71
COMMA                : 48 111
CONST                : 
CONTINUE             : 
DECLARE              : 
DEFAULT              : 71
DEQUAL               : 90
DIE                  : 
DISTINT              : 91
DIVIDE               : 102
DO                   : 74
DOT                  : 
DOUBLEQUOTE          : 
ECHO                 : 13 14 15 16 17
ELSE                 : 67
ELSEIF               : 68
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUAL                : 34 35 36 37 38 39 41 43 77 79 115
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 114
FOR                  : 72
FOREACH              : 
FUNCTION             : 44 45
GLOBAL               : 
GOTO                 : 
GREATER              : 88
GREATEREQUAL         : 89
HASHTAG              : 
ID                   : 21 22 44 45 115 116 117
IDVAR                : 14 30 31 32 33 34 35 36 37 38 38 39 39 40 41 41 42 43 50 51 79 82 83 107 115
IF                   : 65 66
IMPLEMENTS           : 
INCLUDE              : 20
INCLUDE_ONCE         : 
INSTANCEOF           : 
INSTEADOF            : 
INTERFACE            : 
ISEQUAL              : 92
ISSET                : 
LBLOCK               : 21 22 52 74
LBRACKET             : 51 83
LESS                 : 86
LESSEQUAL            : 87
LIST                 : 
LPAREN               : 19 20 44 45 65 66 69 72 73 74 103 107 116 117
MINUS                : 98
MINUSEQUAL           : 
MINUSMINUS           : 95
NAMESPACE            : 
NEW                  : 115
NUMBER               : 15 34 35 70 105
OPENTAG              : 1
OR                   : 81
PLUS                 : 97
PLUSEQUAL            : 
PLUSPLUS             : 96
PRINT                : 
PRIVATE              : 27
PROTECTED            : 29
PUBLIC               : 28
QUESTIONMARK         : 
QUOTE                : 
RBLOCK               : 21 22 52 74
RBRACKET             : 51 83
REQUIRE              : 19
REQUIRE_ONCE         : 
RETURN               : 75 76
RPAREN               : 19 20 44 45 65 66 69 72 73 74 103 107 116 117
SEMICOLON            : 13 14 15 16 17 19 20 30 31 32 33 34 35 36 37 38 39 40 41 42 43 64 70 71 72 72 74 75 76 115
STATIC               : 
STRING               : 13 19 20
SWITCH               : 69
THROW                : 
TIMES                : 101
TIMESTIMES           : 32 33
TRAIT                : 
TRUE                 : 113
TRY                  : 
UNSET                : 
USE                  : 
VOID                 : 110
WHILE                : 73 74
XOR                  : 
__HALT_COMPILER      : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 72 84 84 85 93
addop                : 93
area                 : 6 21 23 24 25 26
args                 : 107 117
args_list            : 108 111
attribute            : 21 22 23 25
boolean              : 16 36 37 106
class_declaration    : 8 62
compount_stmt        : 45 58
constructor          : 115
declaration          : 2 3
declaration_list     : 1 2
echo_stmt            : 9 13 14 15 16 17 52 52 52 63
empty                : 18 47 54 56 109
expression           : 64 65 66 72 73 74 76 77 80 80 81 81 83 103 111 112
expression_stmt      : 57
factor               : 99 100
fun_declaration      : 5 6 17 25 26
header_declaration   : 7
iteration_stmt       : 11 60
local_declarations   : 52 53
mulop                : 99
param                : 49
param_list           : 46 48 48
params               : 44 45
program              : 0
relop                : 84
return_stmt          : 61
selection            : 66 68
selection_stmt       : 10 41 59
simple_expression    : 43 78
statement            : 55 65 66 67 68 69 70 71 72 73 74
statement_list       : 52 55
term                 : 93 94 95 96 99
typeclass            : 12
var                  : 69 77 79 104
var_declaration      : 4 23 24 30 33 34 36 38 40 53 72

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPENTAG declaration_list CLOSETAG

    OPENTAG         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPENTAG . declaration_list CLOSETAG
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . area fun_declaration
    (7) declaration -> . header_declaration
    (8) declaration -> . class_declaration
    (9) declaration -> . echo_stmt
    (10) declaration -> . selection_stmt
    (11) declaration -> . iteration_stmt
    (12) declaration -> . typeclass
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (19) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (20) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (115) typeclass -> . ID IDVAR EQUAL NEW constructor SEMICOLON
    (118) empty -> .

  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16
    FUNCTION        shift and go to state 17
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    REQUIRE         shift and go to state 22
    INCLUDE         shift and go to state 23
    CLASS           shift and go to state 24
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    ID              shift and go to state 18
    ECHO            reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 118 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 118 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 118 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! ID              [ reduce using rule 118 (empty -> .) ]

    declaration_list               shift and go to state 3
    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    area                           shift and go to state 7
    header_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    echo_stmt                      shift and go to state 10
    selection_stmt                 shift and go to state 11
    iteration_stmt                 shift and go to state 12
    typeclass                      shift and go to state 13
    empty                          shift and go to state 25

state 3

    (1) program -> OPENTAG declaration_list . CLOSETAG
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . area fun_declaration
    (7) declaration -> . header_declaration
    (8) declaration -> . class_declaration
    (9) declaration -> . echo_stmt
    (10) declaration -> . selection_stmt
    (11) declaration -> . iteration_stmt
    (12) declaration -> . typeclass
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (19) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (20) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (115) typeclass -> . ID IDVAR EQUAL NEW constructor SEMICOLON
    (118) empty -> .

  ! shift/reduce conflict for CLOSETAG resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CLOSETAG        shift and go to state 33
    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16
    FUNCTION        shift and go to state 17
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    REQUIRE         shift and go to state 22
    INCLUDE         shift and go to state 23
    CLASS           shift and go to state 24
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    ID              shift and go to state 18
    ECHO            reduce using rule 118 (empty -> .)

  ! CLOSETAG        [ reduce using rule 118 (empty -> .) ]
  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 118 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 118 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 118 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! ID              [ reduce using rule 118 (empty -> .) ]

    declaration                    shift and go to state 34
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    area                           shift and go to state 7
    header_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    echo_stmt                      shift and go to state 10
    selection_stmt                 shift and go to state 11
    iteration_stmt                 shift and go to state 12
    typeclass                      shift and go to state 13
    empty                          shift and go to state 25

state 4

    (3) declaration_list -> declaration .

    CLOSETAG        reduce using rule 3 (declaration_list -> declaration .)
    IDVAR           reduce using rule 3 (declaration_list -> declaration .)
    TIMESTIMES      reduce using rule 3 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 3 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 3 (declaration_list -> declaration .)
    PRIVATE         reduce using rule 3 (declaration_list -> declaration .)
    PUBLIC          reduce using rule 3 (declaration_list -> declaration .)
    PROTECTED       reduce using rule 3 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 3 (declaration_list -> declaration .)
    INCLUDE         reduce using rule 3 (declaration_list -> declaration .)
    CLASS           reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    SWITCH          reduce using rule 3 (declaration_list -> declaration .)
    CASE            reduce using rule 3 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    DO              reduce using rule 3 (declaration_list -> declaration .)
    ID              reduce using rule 3 (declaration_list -> declaration .)
    ECHO            reduce using rule 3 (declaration_list -> declaration .)


state 5

    (4) declaration -> var_declaration .

    CLOSETAG        reduce using rule 4 (declaration -> var_declaration .)
    IDVAR           reduce using rule 4 (declaration -> var_declaration .)
    TIMESTIMES      reduce using rule 4 (declaration -> var_declaration .)
    AMPERSANT       reduce using rule 4 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 4 (declaration -> var_declaration .)
    PRIVATE         reduce using rule 4 (declaration -> var_declaration .)
    PUBLIC          reduce using rule 4 (declaration -> var_declaration .)
    PROTECTED       reduce using rule 4 (declaration -> var_declaration .)
    REQUIRE         reduce using rule 4 (declaration -> var_declaration .)
    INCLUDE         reduce using rule 4 (declaration -> var_declaration .)
    CLASS           reduce using rule 4 (declaration -> var_declaration .)
    IF              reduce using rule 4 (declaration -> var_declaration .)
    SWITCH          reduce using rule 4 (declaration -> var_declaration .)
    CASE            reduce using rule 4 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 4 (declaration -> var_declaration .)
    FOR             reduce using rule 4 (declaration -> var_declaration .)
    WHILE           reduce using rule 4 (declaration -> var_declaration .)
    DO              reduce using rule 4 (declaration -> var_declaration .)
    ID              reduce using rule 4 (declaration -> var_declaration .)
    ECHO            reduce using rule 4 (declaration -> var_declaration .)


state 6

    (5) declaration -> fun_declaration .

    CLOSETAG        reduce using rule 5 (declaration -> fun_declaration .)
    IDVAR           reduce using rule 5 (declaration -> fun_declaration .)
    TIMESTIMES      reduce using rule 5 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 5 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 5 (declaration -> fun_declaration .)
    PRIVATE         reduce using rule 5 (declaration -> fun_declaration .)
    PUBLIC          reduce using rule 5 (declaration -> fun_declaration .)
    PROTECTED       reduce using rule 5 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 5 (declaration -> fun_declaration .)
    INCLUDE         reduce using rule 5 (declaration -> fun_declaration .)
    CLASS           reduce using rule 5 (declaration -> fun_declaration .)
    IF              reduce using rule 5 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 5 (declaration -> fun_declaration .)
    CASE            reduce using rule 5 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 5 (declaration -> fun_declaration .)
    FOR             reduce using rule 5 (declaration -> fun_declaration .)
    WHILE           reduce using rule 5 (declaration -> fun_declaration .)
    DO              reduce using rule 5 (declaration -> fun_declaration .)
    ID              reduce using rule 5 (declaration -> fun_declaration .)
    ECHO            reduce using rule 5 (declaration -> fun_declaration .)


state 7

    (6) declaration -> area . fun_declaration
    (21) class_declaration -> area . CLASS ID LBLOCK attribute RBLOCK
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    CLASS           shift and go to state 36
    FUNCTION        shift and go to state 17

    fun_declaration                shift and go to state 35

state 8

    (7) declaration -> header_declaration .

    CLOSETAG        reduce using rule 7 (declaration -> header_declaration .)
    IDVAR           reduce using rule 7 (declaration -> header_declaration .)
    TIMESTIMES      reduce using rule 7 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 7 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> header_declaration .)
    PRIVATE         reduce using rule 7 (declaration -> header_declaration .)
    PUBLIC          reduce using rule 7 (declaration -> header_declaration .)
    PROTECTED       reduce using rule 7 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 7 (declaration -> header_declaration .)
    INCLUDE         reduce using rule 7 (declaration -> header_declaration .)
    CLASS           reduce using rule 7 (declaration -> header_declaration .)
    IF              reduce using rule 7 (declaration -> header_declaration .)
    SWITCH          reduce using rule 7 (declaration -> header_declaration .)
    CASE            reduce using rule 7 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 7 (declaration -> header_declaration .)
    FOR             reduce using rule 7 (declaration -> header_declaration .)
    WHILE           reduce using rule 7 (declaration -> header_declaration .)
    DO              reduce using rule 7 (declaration -> header_declaration .)
    ID              reduce using rule 7 (declaration -> header_declaration .)
    ECHO            reduce using rule 7 (declaration -> header_declaration .)


state 9

    (8) declaration -> class_declaration .

    CLOSETAG        reduce using rule 8 (declaration -> class_declaration .)
    IDVAR           reduce using rule 8 (declaration -> class_declaration .)
    TIMESTIMES      reduce using rule 8 (declaration -> class_declaration .)
    AMPERSANT       reduce using rule 8 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 8 (declaration -> class_declaration .)
    PRIVATE         reduce using rule 8 (declaration -> class_declaration .)
    PUBLIC          reduce using rule 8 (declaration -> class_declaration .)
    PROTECTED       reduce using rule 8 (declaration -> class_declaration .)
    REQUIRE         reduce using rule 8 (declaration -> class_declaration .)
    INCLUDE         reduce using rule 8 (declaration -> class_declaration .)
    CLASS           reduce using rule 8 (declaration -> class_declaration .)
    IF              reduce using rule 8 (declaration -> class_declaration .)
    SWITCH          reduce using rule 8 (declaration -> class_declaration .)
    CASE            reduce using rule 8 (declaration -> class_declaration .)
    DEFAULT         reduce using rule 8 (declaration -> class_declaration .)
    FOR             reduce using rule 8 (declaration -> class_declaration .)
    WHILE           reduce using rule 8 (declaration -> class_declaration .)
    DO              reduce using rule 8 (declaration -> class_declaration .)
    ID              reduce using rule 8 (declaration -> class_declaration .)
    ECHO            reduce using rule 8 (declaration -> class_declaration .)


state 10

    (9) declaration -> echo_stmt .
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMICOLON
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (15) echo_stmt -> echo_stmt . ECHO NUMBER SEMICOLON
    (16) echo_stmt -> echo_stmt . ECHO boolean SEMICOLON
    (17) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON

  ! shift/reduce conflict for ECHO resolved as shift
    CLOSETAG        reduce using rule 9 (declaration -> echo_stmt .)
    IDVAR           reduce using rule 9 (declaration -> echo_stmt .)
    TIMESTIMES      reduce using rule 9 (declaration -> echo_stmt .)
    AMPERSANT       reduce using rule 9 (declaration -> echo_stmt .)
    FUNCTION        reduce using rule 9 (declaration -> echo_stmt .)
    PRIVATE         reduce using rule 9 (declaration -> echo_stmt .)
    PUBLIC          reduce using rule 9 (declaration -> echo_stmt .)
    PROTECTED       reduce using rule 9 (declaration -> echo_stmt .)
    REQUIRE         reduce using rule 9 (declaration -> echo_stmt .)
    INCLUDE         reduce using rule 9 (declaration -> echo_stmt .)
    CLASS           reduce using rule 9 (declaration -> echo_stmt .)
    IF              reduce using rule 9 (declaration -> echo_stmt .)
    SWITCH          reduce using rule 9 (declaration -> echo_stmt .)
    CASE            reduce using rule 9 (declaration -> echo_stmt .)
    DEFAULT         reduce using rule 9 (declaration -> echo_stmt .)
    FOR             reduce using rule 9 (declaration -> echo_stmt .)
    WHILE           reduce using rule 9 (declaration -> echo_stmt .)
    DO              reduce using rule 9 (declaration -> echo_stmt .)
    ID              reduce using rule 9 (declaration -> echo_stmt .)
    ECHO            shift and go to state 37

  ! ECHO            [ reduce using rule 9 (declaration -> echo_stmt .) ]


state 11

    (10) declaration -> selection_stmt .

    CLOSETAG        reduce using rule 10 (declaration -> selection_stmt .)
    IDVAR           reduce using rule 10 (declaration -> selection_stmt .)
    TIMESTIMES      reduce using rule 10 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 10 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 10 (declaration -> selection_stmt .)
    PRIVATE         reduce using rule 10 (declaration -> selection_stmt .)
    PUBLIC          reduce using rule 10 (declaration -> selection_stmt .)
    PROTECTED       reduce using rule 10 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 10 (declaration -> selection_stmt .)
    INCLUDE         reduce using rule 10 (declaration -> selection_stmt .)
    CLASS           reduce using rule 10 (declaration -> selection_stmt .)
    IF              reduce using rule 10 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 10 (declaration -> selection_stmt .)
    CASE            reduce using rule 10 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 10 (declaration -> selection_stmt .)
    FOR             reduce using rule 10 (declaration -> selection_stmt .)
    WHILE           reduce using rule 10 (declaration -> selection_stmt .)
    DO              reduce using rule 10 (declaration -> selection_stmt .)
    ID              reduce using rule 10 (declaration -> selection_stmt .)
    ECHO            reduce using rule 10 (declaration -> selection_stmt .)


state 12

    (11) declaration -> iteration_stmt .

    CLOSETAG        reduce using rule 11 (declaration -> iteration_stmt .)
    IDVAR           reduce using rule 11 (declaration -> iteration_stmt .)
    TIMESTIMES      reduce using rule 11 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 11 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 11 (declaration -> iteration_stmt .)
    PRIVATE         reduce using rule 11 (declaration -> iteration_stmt .)
    PUBLIC          reduce using rule 11 (declaration -> iteration_stmt .)
    PROTECTED       reduce using rule 11 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 11 (declaration -> iteration_stmt .)
    INCLUDE         reduce using rule 11 (declaration -> iteration_stmt .)
    CLASS           reduce using rule 11 (declaration -> iteration_stmt .)
    IF              reduce using rule 11 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 11 (declaration -> iteration_stmt .)
    CASE            reduce using rule 11 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 11 (declaration -> iteration_stmt .)
    FOR             reduce using rule 11 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 11 (declaration -> iteration_stmt .)
    DO              reduce using rule 11 (declaration -> iteration_stmt .)
    ID              reduce using rule 11 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 11 (declaration -> iteration_stmt .)


state 13

    (12) declaration -> typeclass .

    CLOSETAG        reduce using rule 12 (declaration -> typeclass .)
    IDVAR           reduce using rule 12 (declaration -> typeclass .)
    TIMESTIMES      reduce using rule 12 (declaration -> typeclass .)
    AMPERSANT       reduce using rule 12 (declaration -> typeclass .)
    FUNCTION        reduce using rule 12 (declaration -> typeclass .)
    PRIVATE         reduce using rule 12 (declaration -> typeclass .)
    PUBLIC          reduce using rule 12 (declaration -> typeclass .)
    PROTECTED       reduce using rule 12 (declaration -> typeclass .)
    REQUIRE         reduce using rule 12 (declaration -> typeclass .)
    INCLUDE         reduce using rule 12 (declaration -> typeclass .)
    CLASS           reduce using rule 12 (declaration -> typeclass .)
    IF              reduce using rule 12 (declaration -> typeclass .)
    SWITCH          reduce using rule 12 (declaration -> typeclass .)
    CASE            reduce using rule 12 (declaration -> typeclass .)
    DEFAULT         reduce using rule 12 (declaration -> typeclass .)
    FOR             reduce using rule 12 (declaration -> typeclass .)
    WHILE           reduce using rule 12 (declaration -> typeclass .)
    DO              reduce using rule 12 (declaration -> typeclass .)
    ID              reduce using rule 12 (declaration -> typeclass .)
    ECHO            reduce using rule 12 (declaration -> typeclass .)


state 14

    (30) var_declaration -> IDVAR . SEMICOLON var_declaration
    (31) var_declaration -> IDVAR . SEMICOLON
    (34) var_declaration -> IDVAR . EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> IDVAR . EQUAL NUMBER SEMICOLON
    (36) var_declaration -> IDVAR . EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> IDVAR . EQUAL boolean SEMICOLON
    (38) var_declaration -> IDVAR . EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> IDVAR . EQUAL IDVAR SEMICOLON
    (43) var_declaration -> IDVAR . EQUAL simple_expression SEMICOLON

    SEMICOLON       shift and go to state 38
    EQUAL           shift and go to state 39


state 15

    (32) var_declaration -> TIMESTIMES . IDVAR SEMICOLON
    (33) var_declaration -> TIMESTIMES . IDVAR SEMICOLON var_declaration

    IDVAR           shift and go to state 40


state 16

    (40) var_declaration -> AMPERSANT . IDVAR SEMICOLON var_declaration
    (41) var_declaration -> AMPERSANT . IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> AMPERSANT . IDVAR SEMICOLON

    IDVAR           shift and go to state 41


state 17

    (44) fun_declaration -> FUNCTION . ID LPAREN params RPAREN
    (45) fun_declaration -> FUNCTION . ID LPAREN params RPAREN compount_stmt

    ID              shift and go to state 42


state 18

    (115) typeclass -> ID . IDVAR EQUAL NEW constructor SEMICOLON

    IDVAR           shift and go to state 43


state 19

    (27) area -> PRIVATE .

    CLASS           reduce using rule 27 (area -> PRIVATE .)
    FUNCTION        reduce using rule 27 (area -> PRIVATE .)
    IDVAR           reduce using rule 27 (area -> PRIVATE .)
    TIMESTIMES      reduce using rule 27 (area -> PRIVATE .)
    AMPERSANT       reduce using rule 27 (area -> PRIVATE .)


state 20

    (28) area -> PUBLIC .

    CLASS           reduce using rule 28 (area -> PUBLIC .)
    FUNCTION        reduce using rule 28 (area -> PUBLIC .)
    IDVAR           reduce using rule 28 (area -> PUBLIC .)
    TIMESTIMES      reduce using rule 28 (area -> PUBLIC .)
    AMPERSANT       reduce using rule 28 (area -> PUBLIC .)


state 21

    (29) area -> PROTECTED .

    CLASS           reduce using rule 29 (area -> PROTECTED .)
    FUNCTION        reduce using rule 29 (area -> PROTECTED .)
    IDVAR           reduce using rule 29 (area -> PROTECTED .)
    TIMESTIMES      reduce using rule 29 (area -> PROTECTED .)
    AMPERSANT       reduce using rule 29 (area -> PROTECTED .)


state 22

    (19) header_declaration -> REQUIRE . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 44


state 23

    (20) header_declaration -> INCLUDE . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 45


state 24

    (22) class_declaration -> CLASS . ID LBLOCK attribute RBLOCK

    ID              shift and go to state 46


state 25

    (18) echo_stmt -> empty .

    ECHO            reduce using rule 18 (echo_stmt -> empty .)
    CLOSETAG        reduce using rule 18 (echo_stmt -> empty .)
    IDVAR           reduce using rule 18 (echo_stmt -> empty .)
    TIMESTIMES      reduce using rule 18 (echo_stmt -> empty .)
    AMPERSANT       reduce using rule 18 (echo_stmt -> empty .)
    FUNCTION        reduce using rule 18 (echo_stmt -> empty .)
    PRIVATE         reduce using rule 18 (echo_stmt -> empty .)
    PUBLIC          reduce using rule 18 (echo_stmt -> empty .)
    PROTECTED       reduce using rule 18 (echo_stmt -> empty .)
    REQUIRE         reduce using rule 18 (echo_stmt -> empty .)
    INCLUDE         reduce using rule 18 (echo_stmt -> empty .)
    CLASS           reduce using rule 18 (echo_stmt -> empty .)
    IF              reduce using rule 18 (echo_stmt -> empty .)
    SWITCH          reduce using rule 18 (echo_stmt -> empty .)
    CASE            reduce using rule 18 (echo_stmt -> empty .)
    DEFAULT         reduce using rule 18 (echo_stmt -> empty .)
    FOR             reduce using rule 18 (echo_stmt -> empty .)
    WHILE           reduce using rule 18 (echo_stmt -> empty .)
    DO              reduce using rule 18 (echo_stmt -> empty .)
    ID              reduce using rule 18 (echo_stmt -> empty .)
    BREAK           reduce using rule 18 (echo_stmt -> empty .)
    SEMICOLON       reduce using rule 18 (echo_stmt -> empty .)
    LBLOCK          reduce using rule 18 (echo_stmt -> empty .)
    RETURN          reduce using rule 18 (echo_stmt -> empty .)
    LPAREN          reduce using rule 18 (echo_stmt -> empty .)
    NUMBER          reduce using rule 18 (echo_stmt -> empty .)
    TRUE            reduce using rule 18 (echo_stmt -> empty .)
    FALSE           reduce using rule 18 (echo_stmt -> empty .)
    RBLOCK          reduce using rule 18 (echo_stmt -> empty .)
    ELSE            reduce using rule 18 (echo_stmt -> empty .)
    ELSEIF          reduce using rule 18 (echo_stmt -> empty .)


state 26

    (65) selection_stmt -> IF . LPAREN expression RPAREN statement
    (66) selection_stmt -> IF . LPAREN expression RPAREN statement selection

    LPAREN          shift and go to state 47


state 27

    (69) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 48


state 28

    (70) selection_stmt -> CASE . NUMBER COLON statement BREAK SEMICOLON

    NUMBER          shift and go to state 49


state 29

    (71) selection_stmt -> DEFAULT . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 50


state 30

    (72) iteration_stmt -> FOR . LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    LPAREN          shift and go to state 51


state 31

    (73) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 52


state 32

    (74) iteration_stmt -> DO . LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN

    LBLOCK          shift and go to state 53


state 33

    (1) program -> OPENTAG declaration_list CLOSETAG .

    $end            reduce using rule 1 (program -> OPENTAG declaration_list CLOSETAG .)


state 34

    (2) declaration_list -> declaration_list declaration .

    CLOSETAG        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IDVAR           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    TIMESTIMES      reduce using rule 2 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PRIVATE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PUBLIC          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PROTECTED       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    INCLUDE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 35

    (6) declaration -> area fun_declaration .

    CLOSETAG        reduce using rule 6 (declaration -> area fun_declaration .)
    IDVAR           reduce using rule 6 (declaration -> area fun_declaration .)
    TIMESTIMES      reduce using rule 6 (declaration -> area fun_declaration .)
    AMPERSANT       reduce using rule 6 (declaration -> area fun_declaration .)
    FUNCTION        reduce using rule 6 (declaration -> area fun_declaration .)
    PRIVATE         reduce using rule 6 (declaration -> area fun_declaration .)
    PUBLIC          reduce using rule 6 (declaration -> area fun_declaration .)
    PROTECTED       reduce using rule 6 (declaration -> area fun_declaration .)
    REQUIRE         reduce using rule 6 (declaration -> area fun_declaration .)
    INCLUDE         reduce using rule 6 (declaration -> area fun_declaration .)
    CLASS           reduce using rule 6 (declaration -> area fun_declaration .)
    IF              reduce using rule 6 (declaration -> area fun_declaration .)
    SWITCH          reduce using rule 6 (declaration -> area fun_declaration .)
    CASE            reduce using rule 6 (declaration -> area fun_declaration .)
    DEFAULT         reduce using rule 6 (declaration -> area fun_declaration .)
    FOR             reduce using rule 6 (declaration -> area fun_declaration .)
    WHILE           reduce using rule 6 (declaration -> area fun_declaration .)
    DO              reduce using rule 6 (declaration -> area fun_declaration .)
    ID              reduce using rule 6 (declaration -> area fun_declaration .)
    ECHO            reduce using rule 6 (declaration -> area fun_declaration .)


state 36

    (21) class_declaration -> area CLASS . ID LBLOCK attribute RBLOCK

    ID              shift and go to state 54


state 37

    (13) echo_stmt -> echo_stmt ECHO . STRING SEMICOLON
    (14) echo_stmt -> echo_stmt ECHO . IDVAR SEMICOLON
    (15) echo_stmt -> echo_stmt ECHO . NUMBER SEMICOLON
    (16) echo_stmt -> echo_stmt ECHO . boolean SEMICOLON
    (17) echo_stmt -> echo_stmt ECHO . fun_declaration SEMICOLON
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    STRING          shift and go to state 55
    IDVAR           shift and go to state 56
    NUMBER          shift and go to state 57
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    FUNCTION        shift and go to state 17

    boolean                        shift and go to state 58
    fun_declaration                shift and go to state 59

state 38

    (30) var_declaration -> IDVAR SEMICOLON . var_declaration
    (31) var_declaration -> IDVAR SEMICOLON .
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON

  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSETAG        reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    FUNCTION        reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    PRIVATE         reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    PUBLIC          reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    PROTECTED       reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    REQUIRE         reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    INCLUDE         reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    CLASS           reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    IF              reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    SWITCH          reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    CASE            reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    DEFAULT         reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    FOR             reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    WHILE           reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    DO              reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    ID              reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    ECHO            reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    SEMICOLON       reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    RBLOCK          reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    LBLOCK          reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    RETURN          reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    LPAREN          reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    NUMBER          reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    TRUE            reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    FALSE           reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .)
    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16

  ! IDVAR           [ reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .) ]
  ! TIMESTIMES      [ reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 31 (var_declaration -> IDVAR SEMICOLON .) ]

    var_declaration                shift and go to state 62

state 39

    (34) var_declaration -> IDVAR EQUAL . NUMBER SEMICOLON var_declaration
    (35) var_declaration -> IDVAR EQUAL . NUMBER SEMICOLON
    (36) var_declaration -> IDVAR EQUAL . boolean SEMICOLON var_declaration
    (37) var_declaration -> IDVAR EQUAL . boolean SEMICOLON
    (38) var_declaration -> IDVAR EQUAL . IDVAR SEMICOLON var_declaration
    (39) var_declaration -> IDVAR EQUAL . IDVAR SEMICOLON
    (43) var_declaration -> IDVAR EQUAL . simple_expression SEMICOLON
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET

    NUMBER          shift and go to state 64
    IDVAR           shift and go to state 63
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    LPAREN          shift and go to state 70

    boolean                        shift and go to state 65
    simple_expression              shift and go to state 66
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    var                            shift and go to state 71

state 40

    (32) var_declaration -> TIMESTIMES IDVAR . SEMICOLON
    (33) var_declaration -> TIMESTIMES IDVAR . SEMICOLON var_declaration

    SEMICOLON       shift and go to state 72


state 41

    (40) var_declaration -> AMPERSANT IDVAR . SEMICOLON var_declaration
    (41) var_declaration -> AMPERSANT IDVAR . EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> AMPERSANT IDVAR . SEMICOLON

    SEMICOLON       shift and go to state 73
    EQUAL           shift and go to state 74


state 42

    (44) fun_declaration -> FUNCTION ID . LPAREN params RPAREN
    (45) fun_declaration -> FUNCTION ID . LPAREN params RPAREN compount_stmt

    LPAREN          shift and go to state 75


state 43

    (115) typeclass -> ID IDVAR . EQUAL NEW constructor SEMICOLON

    EQUAL           shift and go to state 76


state 44

    (19) header_declaration -> REQUIRE LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 77


state 45

    (20) header_declaration -> INCLUDE LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 78


state 46

    (22) class_declaration -> CLASS ID . LBLOCK attribute RBLOCK

    LBLOCK          shift and go to state 79


state 47

    (65) selection_stmt -> IF LPAREN . expression RPAREN statement
    (66) selection_stmt -> IF LPAREN . expression RPAREN statement selection
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 80
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 48

    (69) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET

    IDVAR           shift and go to state 87

    var                            shift and go to state 86

state 49

    (70) selection_stmt -> CASE NUMBER . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 88


state 50

    (71) selection_stmt -> DEFAULT COLON . statement BREAK SEMICOLON
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    statement                      shift and go to state 89
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    echo_stmt                      shift and go to state 96
    expression                     shift and go to state 97
    var                            shift and go to state 81
    additive_expression            shift and go to state 67
    area                           shift and go to state 100
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 51

    (72) iteration_stmt -> FOR LPAREN . var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON

    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16

    var_declaration                shift and go to state 101

state 52

    (73) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 102
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 53

    (74) iteration_stmt -> DO LBLOCK . statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    statement                      shift and go to state 103
    expression                     shift and go to state 97
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    echo_stmt                      shift and go to state 96
    var                            shift and go to state 81
    additive_expression            shift and go to state 67
    area                           shift and go to state 100
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 54

    (21) class_declaration -> area CLASS ID . LBLOCK attribute RBLOCK

    LBLOCK          shift and go to state 104


state 55

    (13) echo_stmt -> echo_stmt ECHO STRING . SEMICOLON

    SEMICOLON       shift and go to state 105


state 56

    (14) echo_stmt -> echo_stmt ECHO IDVAR . SEMICOLON

    SEMICOLON       shift and go to state 106


state 57

    (15) echo_stmt -> echo_stmt ECHO NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 107


state 58

    (16) echo_stmt -> echo_stmt ECHO boolean . SEMICOLON

    SEMICOLON       shift and go to state 108


state 59

    (17) echo_stmt -> echo_stmt ECHO fun_declaration . SEMICOLON

    SEMICOLON       shift and go to state 109


state 60

    (113) boolean -> TRUE .

    SEMICOLON       reduce using rule 113 (boolean -> TRUE .)
    MINUSMINUS      reduce using rule 113 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 113 (boolean -> TRUE .)
    TIMES           reduce using rule 113 (boolean -> TRUE .)
    DIVIDE          reduce using rule 113 (boolean -> TRUE .)
    LESS            reduce using rule 113 (boolean -> TRUE .)
    LESSEQUAL       reduce using rule 113 (boolean -> TRUE .)
    GREATER         reduce using rule 113 (boolean -> TRUE .)
    GREATEREQUAL    reduce using rule 113 (boolean -> TRUE .)
    DEQUAL          reduce using rule 113 (boolean -> TRUE .)
    DISTINT         reduce using rule 113 (boolean -> TRUE .)
    ISEQUAL         reduce using rule 113 (boolean -> TRUE .)
    PLUS            reduce using rule 113 (boolean -> TRUE .)
    MINUS           reduce using rule 113 (boolean -> TRUE .)
    RPAREN          reduce using rule 113 (boolean -> TRUE .)
    AND             reduce using rule 113 (boolean -> TRUE .)
    OR              reduce using rule 113 (boolean -> TRUE .)
    COMMA           reduce using rule 113 (boolean -> TRUE .)
    RBRACKET        reduce using rule 113 (boolean -> TRUE .)


state 61

    (114) boolean -> FALSE .

    SEMICOLON       reduce using rule 114 (boolean -> FALSE .)
    MINUSMINUS      reduce using rule 114 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 114 (boolean -> FALSE .)
    TIMES           reduce using rule 114 (boolean -> FALSE .)
    DIVIDE          reduce using rule 114 (boolean -> FALSE .)
    LESS            reduce using rule 114 (boolean -> FALSE .)
    LESSEQUAL       reduce using rule 114 (boolean -> FALSE .)
    GREATER         reduce using rule 114 (boolean -> FALSE .)
    GREATEREQUAL    reduce using rule 114 (boolean -> FALSE .)
    DEQUAL          reduce using rule 114 (boolean -> FALSE .)
    DISTINT         reduce using rule 114 (boolean -> FALSE .)
    ISEQUAL         reduce using rule 114 (boolean -> FALSE .)
    PLUS            reduce using rule 114 (boolean -> FALSE .)
    MINUS           reduce using rule 114 (boolean -> FALSE .)
    RPAREN          reduce using rule 114 (boolean -> FALSE .)
    AND             reduce using rule 114 (boolean -> FALSE .)
    OR              reduce using rule 114 (boolean -> FALSE .)
    COMMA           reduce using rule 114 (boolean -> FALSE .)
    RBRACKET        reduce using rule 114 (boolean -> FALSE .)


state 62

    (30) var_declaration -> IDVAR SEMICOLON var_declaration .

    CLOSETAG        reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    IDVAR           reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    TIMESTIMES      reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    INCLUDE         reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    CLASS           reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    IF              reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    SWITCH          reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    CASE            reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    FOR             reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    WHILE           reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    DO              reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    ID              reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    ECHO            reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    RETURN          reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    LPAREN          reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    NUMBER          reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    TRUE            reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)
    FALSE           reduce using rule 30 (var_declaration -> IDVAR SEMICOLON var_declaration .)


state 63

    (38) var_declaration -> IDVAR EQUAL IDVAR . SEMICOLON var_declaration
    (39) var_declaration -> IDVAR EQUAL IDVAR . SEMICOLON
    (107) factor -> IDVAR . LPAREN args RPAREN
    (82) var -> IDVAR .
    (83) var -> IDVAR . LBRACKET expression RBRACKET

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 110
    LPAREN          shift and go to state 111
    MINUSMINUS      reduce using rule 82 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 82 (var -> IDVAR .)
    TIMES           reduce using rule 82 (var -> IDVAR .)
    DIVIDE          reduce using rule 82 (var -> IDVAR .)
    LESS            reduce using rule 82 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 82 (var -> IDVAR .)
    GREATER         reduce using rule 82 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 82 (var -> IDVAR .)
    DEQUAL          reduce using rule 82 (var -> IDVAR .)
    DISTINT         reduce using rule 82 (var -> IDVAR .)
    ISEQUAL         reduce using rule 82 (var -> IDVAR .)
    PLUS            reduce using rule 82 (var -> IDVAR .)
    MINUS           reduce using rule 82 (var -> IDVAR .)
    LBRACKET        shift and go to state 112

  ! SEMICOLON       [ reduce using rule 82 (var -> IDVAR .) ]


state 64

    (34) var_declaration -> IDVAR EQUAL NUMBER . SEMICOLON var_declaration
    (35) var_declaration -> IDVAR EQUAL NUMBER . SEMICOLON
    (105) factor -> NUMBER .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 113
    MINUSMINUS      reduce using rule 105 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 105 (factor -> NUMBER .)
    TIMES           reduce using rule 105 (factor -> NUMBER .)
    DIVIDE          reduce using rule 105 (factor -> NUMBER .)
    LESS            reduce using rule 105 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 105 (factor -> NUMBER .)
    GREATER         reduce using rule 105 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 105 (factor -> NUMBER .)
    DEQUAL          reduce using rule 105 (factor -> NUMBER .)
    DISTINT         reduce using rule 105 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 105 (factor -> NUMBER .)
    PLUS            reduce using rule 105 (factor -> NUMBER .)
    MINUS           reduce using rule 105 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 105 (factor -> NUMBER .) ]


state 65

    (36) var_declaration -> IDVAR EQUAL boolean . SEMICOLON var_declaration
    (37) var_declaration -> IDVAR EQUAL boolean . SEMICOLON
    (106) factor -> boolean .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 114
    MINUSMINUS      reduce using rule 106 (factor -> boolean .)
    PLUSPLUS        reduce using rule 106 (factor -> boolean .)
    TIMES           reduce using rule 106 (factor -> boolean .)
    DIVIDE          reduce using rule 106 (factor -> boolean .)
    LESS            reduce using rule 106 (factor -> boolean .)
    LESSEQUAL       reduce using rule 106 (factor -> boolean .)
    GREATER         reduce using rule 106 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 106 (factor -> boolean .)
    DEQUAL          reduce using rule 106 (factor -> boolean .)
    DISTINT         reduce using rule 106 (factor -> boolean .)
    ISEQUAL         reduce using rule 106 (factor -> boolean .)
    PLUS            reduce using rule 106 (factor -> boolean .)
    MINUS           reduce using rule 106 (factor -> boolean .)

  ! SEMICOLON       [ reduce using rule 106 (factor -> boolean .) ]


state 66

    (43) var_declaration -> IDVAR EQUAL simple_expression . SEMICOLON

    SEMICOLON       shift and go to state 115


state 67

    (84) simple_expression -> additive_expression . relop additive_expression
    (85) simple_expression -> additive_expression .
    (93) additive_expression -> additive_expression . addop term
    (86) relop -> . LESS
    (87) relop -> . LESSEQUAL
    (88) relop -> . GREATER
    (89) relop -> . GREATEREQUAL
    (90) relop -> . DEQUAL
    (91) relop -> . DISTINT
    (92) relop -> . ISEQUAL
    (97) addop -> . PLUS
    (98) addop -> . MINUS

    SEMICOLON       reduce using rule 85 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 85 (simple_expression -> additive_expression .)
    AND             reduce using rule 85 (simple_expression -> additive_expression .)
    OR              reduce using rule 85 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 85 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 85 (simple_expression -> additive_expression .)
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 119
    GREATER         shift and go to state 120
    GREATEREQUAL    shift and go to state 121
    DEQUAL          shift and go to state 122
    DISTINT         shift and go to state 123
    ISEQUAL         shift and go to state 124
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126

    relop                          shift and go to state 116
    addop                          shift and go to state 117

state 68

    (94) additive_expression -> term .
    (95) additive_expression -> term . MINUSMINUS
    (96) additive_expression -> term . PLUSPLUS
    (99) term -> term . mulop factor
    (101) mulop -> . TIMES
    (102) mulop -> . DIVIDE

    LESS            reduce using rule 94 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 94 (additive_expression -> term .)
    GREATER         reduce using rule 94 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 94 (additive_expression -> term .)
    DEQUAL          reduce using rule 94 (additive_expression -> term .)
    DISTINT         reduce using rule 94 (additive_expression -> term .)
    ISEQUAL         reduce using rule 94 (additive_expression -> term .)
    PLUS            reduce using rule 94 (additive_expression -> term .)
    MINUS           reduce using rule 94 (additive_expression -> term .)
    SEMICOLON       reduce using rule 94 (additive_expression -> term .)
    RPAREN          reduce using rule 94 (additive_expression -> term .)
    AND             reduce using rule 94 (additive_expression -> term .)
    OR              reduce using rule 94 (additive_expression -> term .)
    COMMA           reduce using rule 94 (additive_expression -> term .)
    RBRACKET        reduce using rule 94 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 127
    PLUSPLUS        shift and go to state 128
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131

    mulop                          shift and go to state 129

state 69

    (100) term -> factor .

    MINUSMINUS      reduce using rule 100 (term -> factor .)
    PLUSPLUS        reduce using rule 100 (term -> factor .)
    TIMES           reduce using rule 100 (term -> factor .)
    DIVIDE          reduce using rule 100 (term -> factor .)
    LESS            reduce using rule 100 (term -> factor .)
    LESSEQUAL       reduce using rule 100 (term -> factor .)
    GREATER         reduce using rule 100 (term -> factor .)
    GREATEREQUAL    reduce using rule 100 (term -> factor .)
    DEQUAL          reduce using rule 100 (term -> factor .)
    DISTINT         reduce using rule 100 (term -> factor .)
    ISEQUAL         reduce using rule 100 (term -> factor .)
    PLUS            reduce using rule 100 (term -> factor .)
    MINUS           reduce using rule 100 (term -> factor .)
    SEMICOLON       reduce using rule 100 (term -> factor .)
    RPAREN          reduce using rule 100 (term -> factor .)
    AND             reduce using rule 100 (term -> factor .)
    OR              reduce using rule 100 (term -> factor .)
    COMMA           reduce using rule 100 (term -> factor .)
    RBRACKET        reduce using rule 100 (term -> factor .)


state 70

    (103) factor -> LPAREN . expression RPAREN
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 132
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 71

    (104) factor -> var .

    MINUSMINUS      reduce using rule 104 (factor -> var .)
    PLUSPLUS        reduce using rule 104 (factor -> var .)
    TIMES           reduce using rule 104 (factor -> var .)
    DIVIDE          reduce using rule 104 (factor -> var .)
    LESS            reduce using rule 104 (factor -> var .)
    LESSEQUAL       reduce using rule 104 (factor -> var .)
    GREATER         reduce using rule 104 (factor -> var .)
    GREATEREQUAL    reduce using rule 104 (factor -> var .)
    DEQUAL          reduce using rule 104 (factor -> var .)
    DISTINT         reduce using rule 104 (factor -> var .)
    ISEQUAL         reduce using rule 104 (factor -> var .)
    PLUS            reduce using rule 104 (factor -> var .)
    MINUS           reduce using rule 104 (factor -> var .)
    SEMICOLON       reduce using rule 104 (factor -> var .)
    RPAREN          reduce using rule 104 (factor -> var .)
    AND             reduce using rule 104 (factor -> var .)
    OR              reduce using rule 104 (factor -> var .)
    COMMA           reduce using rule 104 (factor -> var .)
    RBRACKET        reduce using rule 104 (factor -> var .)


state 72

    (32) var_declaration -> TIMESTIMES IDVAR SEMICOLON .
    (33) var_declaration -> TIMESTIMES IDVAR SEMICOLON . var_declaration
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON

  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSETAG        reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    FUNCTION        reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    PRIVATE         reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    PUBLIC          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    PROTECTED       reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    REQUIRE         reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    INCLUDE         reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    CLASS           reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    IF              reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    SWITCH          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    CASE            reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    DEFAULT         reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    FOR             reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    WHILE           reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    DO              reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    ID              reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    ECHO            reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    SEMICOLON       reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    RBLOCK          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    LBLOCK          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    RETURN          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    LPAREN          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    NUMBER          reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    TRUE            reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    FALSE           reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .)
    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16

  ! IDVAR           [ reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .) ]
  ! TIMESTIMES      [ reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 32 (var_declaration -> TIMESTIMES IDVAR SEMICOLON .) ]

    var_declaration                shift and go to state 133

state 73

    (40) var_declaration -> AMPERSANT IDVAR SEMICOLON . var_declaration
    (42) var_declaration -> AMPERSANT IDVAR SEMICOLON .
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON

  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSETAG        reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    FUNCTION        reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    PRIVATE         reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    PUBLIC          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    PROTECTED       reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    REQUIRE         reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    INCLUDE         reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    CLASS           reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    IF              reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    SWITCH          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    CASE            reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    DEFAULT         reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    FOR             reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    WHILE           reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    DO              reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    ID              reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    ECHO            reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    SEMICOLON       reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    RBLOCK          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    LBLOCK          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    RETURN          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    LPAREN          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    NUMBER          reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    TRUE            reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    FALSE           reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .)
    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16

  ! IDVAR           [ reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .) ]
  ! TIMESTIMES      [ reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 42 (var_declaration -> AMPERSANT IDVAR SEMICOLON .) ]

    var_declaration                shift and go to state 134

state 74

    (41) var_declaration -> AMPERSANT IDVAR EQUAL . IDVAR SEMICOLON selection_stmt

    IDVAR           shift and go to state 135


state 75

    (44) fun_declaration -> FUNCTION ID LPAREN . params RPAREN
    (45) fun_declaration -> FUNCTION ID LPAREN . params RPAREN compount_stmt
    (46) params -> . param_list
    (47) params -> . empty
    (48) param_list -> . param_list COMMA param_list
    (49) param_list -> . param
    (118) empty -> .
    (50) param -> . IDVAR
    (51) param -> . IDVAR LBRACKET RBRACKET

    RPAREN          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 140

    params                         shift and go to state 136
    param_list                     shift and go to state 137
    empty                          shift and go to state 138
    param                          shift and go to state 139

state 76

    (115) typeclass -> ID IDVAR EQUAL . NEW constructor SEMICOLON

    NEW             shift and go to state 141


state 77

    (19) header_declaration -> REQUIRE LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 142


state 78

    (20) header_declaration -> INCLUDE LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 143


state 79

    (22) class_declaration -> CLASS ID LBLOCK . attribute RBLOCK
    (23) attribute -> . attribute area var_declaration
    (24) attribute -> . area var_declaration
    (25) attribute -> . attribute area fun_declaration
    (26) attribute -> . area fun_declaration
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED

    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21

    attribute                      shift and go to state 144
    area                           shift and go to state 145

state 80

    (65) selection_stmt -> IF LPAREN expression . RPAREN statement
    (66) selection_stmt -> IF LPAREN expression . RPAREN statement selection
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RPAREN          shift and go to state 146
    AND             shift and go to state 147
    OR              shift and go to state 148


state 81

    (77) expression -> var . EQUAL expression
    (79) expression -> var . EQUAL AMPERSANT IDVAR
    (104) factor -> var .

    EQUAL           shift and go to state 149
    MINUSMINUS      reduce using rule 104 (factor -> var .)
    PLUSPLUS        reduce using rule 104 (factor -> var .)
    TIMES           reduce using rule 104 (factor -> var .)
    DIVIDE          reduce using rule 104 (factor -> var .)
    LESS            reduce using rule 104 (factor -> var .)
    LESSEQUAL       reduce using rule 104 (factor -> var .)
    GREATER         reduce using rule 104 (factor -> var .)
    GREATEREQUAL    reduce using rule 104 (factor -> var .)
    DEQUAL          reduce using rule 104 (factor -> var .)
    DISTINT         reduce using rule 104 (factor -> var .)
    ISEQUAL         reduce using rule 104 (factor -> var .)
    PLUS            reduce using rule 104 (factor -> var .)
    MINUS           reduce using rule 104 (factor -> var .)
    RPAREN          reduce using rule 104 (factor -> var .)
    AND             reduce using rule 104 (factor -> var .)
    OR              reduce using rule 104 (factor -> var .)
    SEMICOLON       reduce using rule 104 (factor -> var .)
    COMMA           reduce using rule 104 (factor -> var .)
    RBRACKET        reduce using rule 104 (factor -> var .)


state 82

    (78) expression -> simple_expression .

    RPAREN          reduce using rule 78 (expression -> simple_expression .)
    AND             reduce using rule 78 (expression -> simple_expression .)
    OR              reduce using rule 78 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 78 (expression -> simple_expression .)
    COMMA           reduce using rule 78 (expression -> simple_expression .)
    RBRACKET        reduce using rule 78 (expression -> simple_expression .)


state 83

    (82) var -> IDVAR .
    (83) var -> IDVAR . LBRACKET expression RBRACKET
    (107) factor -> IDVAR . LPAREN args RPAREN

    EQUAL           reduce using rule 82 (var -> IDVAR .)
    MINUSMINUS      reduce using rule 82 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 82 (var -> IDVAR .)
    TIMES           reduce using rule 82 (var -> IDVAR .)
    DIVIDE          reduce using rule 82 (var -> IDVAR .)
    LESS            reduce using rule 82 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 82 (var -> IDVAR .)
    GREATER         reduce using rule 82 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 82 (var -> IDVAR .)
    DEQUAL          reduce using rule 82 (var -> IDVAR .)
    DISTINT         reduce using rule 82 (var -> IDVAR .)
    ISEQUAL         reduce using rule 82 (var -> IDVAR .)
    PLUS            reduce using rule 82 (var -> IDVAR .)
    MINUS           reduce using rule 82 (var -> IDVAR .)
    RPAREN          reduce using rule 82 (var -> IDVAR .)
    AND             reduce using rule 82 (var -> IDVAR .)
    OR              reduce using rule 82 (var -> IDVAR .)
    SEMICOLON       reduce using rule 82 (var -> IDVAR .)
    COMMA           reduce using rule 82 (var -> IDVAR .)
    RBRACKET        reduce using rule 82 (var -> IDVAR .)
    LBRACKET        shift and go to state 112
    LPAREN          shift and go to state 111


state 84

    (105) factor -> NUMBER .

    MINUSMINUS      reduce using rule 105 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 105 (factor -> NUMBER .)
    TIMES           reduce using rule 105 (factor -> NUMBER .)
    DIVIDE          reduce using rule 105 (factor -> NUMBER .)
    LESS            reduce using rule 105 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 105 (factor -> NUMBER .)
    GREATER         reduce using rule 105 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 105 (factor -> NUMBER .)
    DEQUAL          reduce using rule 105 (factor -> NUMBER .)
    DISTINT         reduce using rule 105 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 105 (factor -> NUMBER .)
    PLUS            reduce using rule 105 (factor -> NUMBER .)
    MINUS           reduce using rule 105 (factor -> NUMBER .)
    RPAREN          reduce using rule 105 (factor -> NUMBER .)
    AND             reduce using rule 105 (factor -> NUMBER .)
    OR              reduce using rule 105 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 105 (factor -> NUMBER .)
    COMMA           reduce using rule 105 (factor -> NUMBER .)
    RBRACKET        reduce using rule 105 (factor -> NUMBER .)


state 85

    (106) factor -> boolean .

    MINUSMINUS      reduce using rule 106 (factor -> boolean .)
    PLUSPLUS        reduce using rule 106 (factor -> boolean .)
    TIMES           reduce using rule 106 (factor -> boolean .)
    DIVIDE          reduce using rule 106 (factor -> boolean .)
    LESS            reduce using rule 106 (factor -> boolean .)
    LESSEQUAL       reduce using rule 106 (factor -> boolean .)
    GREATER         reduce using rule 106 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 106 (factor -> boolean .)
    DEQUAL          reduce using rule 106 (factor -> boolean .)
    DISTINT         reduce using rule 106 (factor -> boolean .)
    ISEQUAL         reduce using rule 106 (factor -> boolean .)
    PLUS            reduce using rule 106 (factor -> boolean .)
    MINUS           reduce using rule 106 (factor -> boolean .)
    RPAREN          reduce using rule 106 (factor -> boolean .)
    AND             reduce using rule 106 (factor -> boolean .)
    OR              reduce using rule 106 (factor -> boolean .)
    SEMICOLON       reduce using rule 106 (factor -> boolean .)
    COMMA           reduce using rule 106 (factor -> boolean .)
    RBRACKET        reduce using rule 106 (factor -> boolean .)


state 86

    (69) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 150


state 87

    (82) var -> IDVAR .
    (83) var -> IDVAR . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 82 (var -> IDVAR .)
    LBRACKET        shift and go to state 112


state 88

    (70) selection_stmt -> CASE NUMBER COLON . statement BREAK SEMICOLON
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    statement                      shift and go to state 151
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    echo_stmt                      shift and go to state 96
    expression                     shift and go to state 97
    var                            shift and go to state 81
    additive_expression            shift and go to state 67
    area                           shift and go to state 100
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 89

    (71) selection_stmt -> DEFAULT COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 152


state 90

    (57) statement -> expression_stmt .

    BREAK           reduce using rule 57 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 57 (statement -> expression_stmt .)
    ELSE            reduce using rule 57 (statement -> expression_stmt .)
    ELSEIF          reduce using rule 57 (statement -> expression_stmt .)
    CLOSETAG        reduce using rule 57 (statement -> expression_stmt .)
    IDVAR           reduce using rule 57 (statement -> expression_stmt .)
    TIMESTIMES      reduce using rule 57 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 57 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 57 (statement -> expression_stmt .)
    PRIVATE         reduce using rule 57 (statement -> expression_stmt .)
    PUBLIC          reduce using rule 57 (statement -> expression_stmt .)
    PROTECTED       reduce using rule 57 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 57 (statement -> expression_stmt .)
    INCLUDE         reduce using rule 57 (statement -> expression_stmt .)
    CLASS           reduce using rule 57 (statement -> expression_stmt .)
    IF              reduce using rule 57 (statement -> expression_stmt .)
    SWITCH          reduce using rule 57 (statement -> expression_stmt .)
    CASE            reduce using rule 57 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 57 (statement -> expression_stmt .)
    FOR             reduce using rule 57 (statement -> expression_stmt .)
    WHILE           reduce using rule 57 (statement -> expression_stmt .)
    DO              reduce using rule 57 (statement -> expression_stmt .)
    ID              reduce using rule 57 (statement -> expression_stmt .)
    ECHO            reduce using rule 57 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 57 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 57 (statement -> expression_stmt .)
    RETURN          reduce using rule 57 (statement -> expression_stmt .)
    LPAREN          reduce using rule 57 (statement -> expression_stmt .)
    NUMBER          reduce using rule 57 (statement -> expression_stmt .)
    TRUE            reduce using rule 57 (statement -> expression_stmt .)
    FALSE           reduce using rule 57 (statement -> expression_stmt .)


state 91

    (58) statement -> compount_stmt .

    BREAK           reduce using rule 58 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 58 (statement -> compount_stmt .)
    ELSE            reduce using rule 58 (statement -> compount_stmt .)
    ELSEIF          reduce using rule 58 (statement -> compount_stmt .)
    CLOSETAG        reduce using rule 58 (statement -> compount_stmt .)
    IDVAR           reduce using rule 58 (statement -> compount_stmt .)
    TIMESTIMES      reduce using rule 58 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 58 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 58 (statement -> compount_stmt .)
    PRIVATE         reduce using rule 58 (statement -> compount_stmt .)
    PUBLIC          reduce using rule 58 (statement -> compount_stmt .)
    PROTECTED       reduce using rule 58 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 58 (statement -> compount_stmt .)
    INCLUDE         reduce using rule 58 (statement -> compount_stmt .)
    CLASS           reduce using rule 58 (statement -> compount_stmt .)
    IF              reduce using rule 58 (statement -> compount_stmt .)
    SWITCH          reduce using rule 58 (statement -> compount_stmt .)
    CASE            reduce using rule 58 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 58 (statement -> compount_stmt .)
    FOR             reduce using rule 58 (statement -> compount_stmt .)
    WHILE           reduce using rule 58 (statement -> compount_stmt .)
    DO              reduce using rule 58 (statement -> compount_stmt .)
    ID              reduce using rule 58 (statement -> compount_stmt .)
    ECHO            reduce using rule 58 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 58 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 58 (statement -> compount_stmt .)
    RETURN          reduce using rule 58 (statement -> compount_stmt .)
    LPAREN          reduce using rule 58 (statement -> compount_stmt .)
    NUMBER          reduce using rule 58 (statement -> compount_stmt .)
    TRUE            reduce using rule 58 (statement -> compount_stmt .)
    FALSE           reduce using rule 58 (statement -> compount_stmt .)


state 92

    (59) statement -> selection_stmt .

    BREAK           reduce using rule 59 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 59 (statement -> selection_stmt .)
    ELSE            reduce using rule 59 (statement -> selection_stmt .)
    ELSEIF          reduce using rule 59 (statement -> selection_stmt .)
    CLOSETAG        reduce using rule 59 (statement -> selection_stmt .)
    IDVAR           reduce using rule 59 (statement -> selection_stmt .)
    TIMESTIMES      reduce using rule 59 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 59 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 59 (statement -> selection_stmt .)
    PRIVATE         reduce using rule 59 (statement -> selection_stmt .)
    PUBLIC          reduce using rule 59 (statement -> selection_stmt .)
    PROTECTED       reduce using rule 59 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 59 (statement -> selection_stmt .)
    INCLUDE         reduce using rule 59 (statement -> selection_stmt .)
    CLASS           reduce using rule 59 (statement -> selection_stmt .)
    IF              reduce using rule 59 (statement -> selection_stmt .)
    SWITCH          reduce using rule 59 (statement -> selection_stmt .)
    CASE            reduce using rule 59 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 59 (statement -> selection_stmt .)
    FOR             reduce using rule 59 (statement -> selection_stmt .)
    WHILE           reduce using rule 59 (statement -> selection_stmt .)
    DO              reduce using rule 59 (statement -> selection_stmt .)
    ID              reduce using rule 59 (statement -> selection_stmt .)
    ECHO            reduce using rule 59 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 59 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 59 (statement -> selection_stmt .)
    RETURN          reduce using rule 59 (statement -> selection_stmt .)
    LPAREN          reduce using rule 59 (statement -> selection_stmt .)
    NUMBER          reduce using rule 59 (statement -> selection_stmt .)
    TRUE            reduce using rule 59 (statement -> selection_stmt .)
    FALSE           reduce using rule 59 (statement -> selection_stmt .)


state 93

    (60) statement -> iteration_stmt .

    BREAK           reduce using rule 60 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 60 (statement -> iteration_stmt .)
    ELSE            reduce using rule 60 (statement -> iteration_stmt .)
    ELSEIF          reduce using rule 60 (statement -> iteration_stmt .)
    CLOSETAG        reduce using rule 60 (statement -> iteration_stmt .)
    IDVAR           reduce using rule 60 (statement -> iteration_stmt .)
    TIMESTIMES      reduce using rule 60 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 60 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 60 (statement -> iteration_stmt .)
    PRIVATE         reduce using rule 60 (statement -> iteration_stmt .)
    PUBLIC          reduce using rule 60 (statement -> iteration_stmt .)
    PROTECTED       reduce using rule 60 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 60 (statement -> iteration_stmt .)
    INCLUDE         reduce using rule 60 (statement -> iteration_stmt .)
    CLASS           reduce using rule 60 (statement -> iteration_stmt .)
    IF              reduce using rule 60 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 60 (statement -> iteration_stmt .)
    CASE            reduce using rule 60 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 60 (statement -> iteration_stmt .)
    FOR             reduce using rule 60 (statement -> iteration_stmt .)
    WHILE           reduce using rule 60 (statement -> iteration_stmt .)
    DO              reduce using rule 60 (statement -> iteration_stmt .)
    ID              reduce using rule 60 (statement -> iteration_stmt .)
    ECHO            reduce using rule 60 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 60 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 60 (statement -> iteration_stmt .)
    RETURN          reduce using rule 60 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 60 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 60 (statement -> iteration_stmt .)
    TRUE            reduce using rule 60 (statement -> iteration_stmt .)
    FALSE           reduce using rule 60 (statement -> iteration_stmt .)


state 94

    (61) statement -> return_stmt .

    BREAK           reduce using rule 61 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 61 (statement -> return_stmt .)
    ELSE            reduce using rule 61 (statement -> return_stmt .)
    ELSEIF          reduce using rule 61 (statement -> return_stmt .)
    CLOSETAG        reduce using rule 61 (statement -> return_stmt .)
    IDVAR           reduce using rule 61 (statement -> return_stmt .)
    TIMESTIMES      reduce using rule 61 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 61 (statement -> return_stmt .)
    FUNCTION        reduce using rule 61 (statement -> return_stmt .)
    PRIVATE         reduce using rule 61 (statement -> return_stmt .)
    PUBLIC          reduce using rule 61 (statement -> return_stmt .)
    PROTECTED       reduce using rule 61 (statement -> return_stmt .)
    REQUIRE         reduce using rule 61 (statement -> return_stmt .)
    INCLUDE         reduce using rule 61 (statement -> return_stmt .)
    CLASS           reduce using rule 61 (statement -> return_stmt .)
    IF              reduce using rule 61 (statement -> return_stmt .)
    SWITCH          reduce using rule 61 (statement -> return_stmt .)
    CASE            reduce using rule 61 (statement -> return_stmt .)
    DEFAULT         reduce using rule 61 (statement -> return_stmt .)
    FOR             reduce using rule 61 (statement -> return_stmt .)
    WHILE           reduce using rule 61 (statement -> return_stmt .)
    DO              reduce using rule 61 (statement -> return_stmt .)
    ID              reduce using rule 61 (statement -> return_stmt .)
    ECHO            reduce using rule 61 (statement -> return_stmt .)
    RBLOCK          reduce using rule 61 (statement -> return_stmt .)
    LBLOCK          reduce using rule 61 (statement -> return_stmt .)
    RETURN          reduce using rule 61 (statement -> return_stmt .)
    LPAREN          reduce using rule 61 (statement -> return_stmt .)
    NUMBER          reduce using rule 61 (statement -> return_stmt .)
    TRUE            reduce using rule 61 (statement -> return_stmt .)
    FALSE           reduce using rule 61 (statement -> return_stmt .)


state 95

    (62) statement -> class_declaration .

    BREAK           reduce using rule 62 (statement -> class_declaration .)
    SEMICOLON       reduce using rule 62 (statement -> class_declaration .)
    ELSE            reduce using rule 62 (statement -> class_declaration .)
    ELSEIF          reduce using rule 62 (statement -> class_declaration .)
    CLOSETAG        reduce using rule 62 (statement -> class_declaration .)
    IDVAR           reduce using rule 62 (statement -> class_declaration .)
    TIMESTIMES      reduce using rule 62 (statement -> class_declaration .)
    AMPERSANT       reduce using rule 62 (statement -> class_declaration .)
    FUNCTION        reduce using rule 62 (statement -> class_declaration .)
    PRIVATE         reduce using rule 62 (statement -> class_declaration .)
    PUBLIC          reduce using rule 62 (statement -> class_declaration .)
    PROTECTED       reduce using rule 62 (statement -> class_declaration .)
    REQUIRE         reduce using rule 62 (statement -> class_declaration .)
    INCLUDE         reduce using rule 62 (statement -> class_declaration .)
    CLASS           reduce using rule 62 (statement -> class_declaration .)
    IF              reduce using rule 62 (statement -> class_declaration .)
    SWITCH          reduce using rule 62 (statement -> class_declaration .)
    CASE            reduce using rule 62 (statement -> class_declaration .)
    DEFAULT         reduce using rule 62 (statement -> class_declaration .)
    FOR             reduce using rule 62 (statement -> class_declaration .)
    WHILE           reduce using rule 62 (statement -> class_declaration .)
    DO              reduce using rule 62 (statement -> class_declaration .)
    ID              reduce using rule 62 (statement -> class_declaration .)
    ECHO            reduce using rule 62 (statement -> class_declaration .)
    RBLOCK          reduce using rule 62 (statement -> class_declaration .)
    LBLOCK          reduce using rule 62 (statement -> class_declaration .)
    RETURN          reduce using rule 62 (statement -> class_declaration .)
    LPAREN          reduce using rule 62 (statement -> class_declaration .)
    NUMBER          reduce using rule 62 (statement -> class_declaration .)
    TRUE            reduce using rule 62 (statement -> class_declaration .)
    FALSE           reduce using rule 62 (statement -> class_declaration .)


state 96

    (63) statement -> echo_stmt .
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMICOLON
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (15) echo_stmt -> echo_stmt . ECHO NUMBER SEMICOLON
    (16) echo_stmt -> echo_stmt . ECHO boolean SEMICOLON
    (17) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON

  ! shift/reduce conflict for ECHO resolved as shift
    BREAK           reduce using rule 63 (statement -> echo_stmt .)
    SEMICOLON       reduce using rule 63 (statement -> echo_stmt .)
    ELSE            reduce using rule 63 (statement -> echo_stmt .)
    ELSEIF          reduce using rule 63 (statement -> echo_stmt .)
    CLOSETAG        reduce using rule 63 (statement -> echo_stmt .)
    IDVAR           reduce using rule 63 (statement -> echo_stmt .)
    TIMESTIMES      reduce using rule 63 (statement -> echo_stmt .)
    AMPERSANT       reduce using rule 63 (statement -> echo_stmt .)
    FUNCTION        reduce using rule 63 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 63 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 63 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 63 (statement -> echo_stmt .)
    REQUIRE         reduce using rule 63 (statement -> echo_stmt .)
    INCLUDE         reduce using rule 63 (statement -> echo_stmt .)
    CLASS           reduce using rule 63 (statement -> echo_stmt .)
    IF              reduce using rule 63 (statement -> echo_stmt .)
    SWITCH          reduce using rule 63 (statement -> echo_stmt .)
    CASE            reduce using rule 63 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 63 (statement -> echo_stmt .)
    FOR             reduce using rule 63 (statement -> echo_stmt .)
    WHILE           reduce using rule 63 (statement -> echo_stmt .)
    DO              reduce using rule 63 (statement -> echo_stmt .)
    ID              reduce using rule 63 (statement -> echo_stmt .)
    RBLOCK          reduce using rule 63 (statement -> echo_stmt .)
    LBLOCK          reduce using rule 63 (statement -> echo_stmt .)
    RETURN          reduce using rule 63 (statement -> echo_stmt .)
    LPAREN          reduce using rule 63 (statement -> echo_stmt .)
    NUMBER          reduce using rule 63 (statement -> echo_stmt .)
    TRUE            reduce using rule 63 (statement -> echo_stmt .)
    FALSE           reduce using rule 63 (statement -> echo_stmt .)
    ECHO            shift and go to state 37

  ! ECHO            [ reduce using rule 63 (statement -> echo_stmt .) ]


state 97

    (64) expression_stmt -> expression . SEMICOLON
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    SEMICOLON       shift and go to state 153
    AND             shift and go to state 147
    OR              shift and go to state 148


state 98

    (52) compount_stmt -> LBLOCK . echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (118) empty -> .

    ECHO            reduce using rule 118 (empty -> .)
    IDVAR           reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    LBLOCK          reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    SWITCH          reduce using rule 118 (empty -> .)
    CASE            reduce using rule 118 (empty -> .)
    DEFAULT         reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CLASS           reduce using rule 118 (empty -> .)
    PRIVATE         reduce using rule 118 (empty -> .)
    PUBLIC          reduce using rule 118 (empty -> .)
    PROTECTED       reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)
    NUMBER          reduce using rule 118 (empty -> .)
    TRUE            reduce using rule 118 (empty -> .)
    FALSE           reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)

    echo_stmt                      shift and go to state 154
    empty                          shift and go to state 25

state 99

    (75) return_stmt -> RETURN . SEMICOLON
    (76) return_stmt -> RETURN . expression SEMICOLON
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    SEMICOLON       shift and go to state 155
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 156
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 100

    (21) class_declaration -> area . CLASS ID LBLOCK attribute RBLOCK

    CLASS           shift and go to state 36


state 101

    (72) iteration_stmt -> FOR LPAREN var_declaration . SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 157


state 102

    (73) iteration_stmt -> WHILE LPAREN expression . RPAREN statement
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RPAREN          shift and go to state 158
    AND             shift and go to state 147
    OR              shift and go to state 148


state 103

    (74) iteration_stmt -> DO LBLOCK statement . SEMICOLON RBLOCK WHILE LPAREN expression RPAREN

    SEMICOLON       shift and go to state 159


state 104

    (21) class_declaration -> area CLASS ID LBLOCK . attribute RBLOCK
    (23) attribute -> . attribute area var_declaration
    (24) attribute -> . area var_declaration
    (25) attribute -> . attribute area fun_declaration
    (26) attribute -> . area fun_declaration
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED

    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21

    area                           shift and go to state 145
    attribute                      shift and go to state 160

state 105

    (13) echo_stmt -> echo_stmt ECHO STRING SEMICOLON .

    ECHO            reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    CLOSETAG        reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    IDVAR           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    TIMESTIMES      reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    AMPERSANT       reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    FUNCTION        reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    PRIVATE         reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    PUBLIC          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    PROTECTED       reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    REQUIRE         reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    INCLUDE         reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    CLASS           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    IF              reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    SWITCH          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    CASE            reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    DEFAULT         reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    FOR             reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    WHILE           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    DO              reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    ID              reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    BREAK           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    SEMICOLON       reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    LBLOCK          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    RETURN          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    LPAREN          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    NUMBER          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    TRUE            reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    FALSE           reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    RBLOCK          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    ELSE            reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)
    ELSEIF          reduce using rule 13 (echo_stmt -> echo_stmt ECHO STRING SEMICOLON .)


state 106

    (14) echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .

    ECHO            reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    CLOSETAG        reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    IDVAR           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    TIMESTIMES      reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    AMPERSANT       reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    FUNCTION        reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    PRIVATE         reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    PUBLIC          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    PROTECTED       reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    REQUIRE         reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    INCLUDE         reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    CLASS           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    IF              reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    SWITCH          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    CASE            reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    DEFAULT         reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    FOR             reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    WHILE           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    DO              reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    ID              reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    BREAK           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    SEMICOLON       reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    LBLOCK          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    RETURN          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    LPAREN          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    NUMBER          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    TRUE            reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    FALSE           reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    RBLOCK          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    ELSE            reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)
    ELSEIF          reduce using rule 14 (echo_stmt -> echo_stmt ECHO IDVAR SEMICOLON .)


state 107

    (15) echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .

    ECHO            reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    CLOSETAG        reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    IDVAR           reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    TIMESTIMES      reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    AMPERSANT       reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    PRIVATE         reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    PUBLIC          reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    PROTECTED       reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    REQUIRE         reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    INCLUDE         reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    CLASS           reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    IF              reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    SWITCH          reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    CASE            reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    DEFAULT         reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    FOR             reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    WHILE           reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    DO              reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    ID              reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    BREAK           reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    SEMICOLON       reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    LBLOCK          reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    RETURN          reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    LPAREN          reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    NUMBER          reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    TRUE            reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    FALSE           reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    ELSE            reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)
    ELSEIF          reduce using rule 15 (echo_stmt -> echo_stmt ECHO NUMBER SEMICOLON .)


state 108

    (16) echo_stmt -> echo_stmt ECHO boolean SEMICOLON .

    ECHO            reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    CLOSETAG        reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    IDVAR           reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    TIMESTIMES      reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    AMPERSANT       reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    FUNCTION        reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    PRIVATE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    PUBLIC          reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    PROTECTED       reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    REQUIRE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    INCLUDE         reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    CLASS           reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    IF              reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    SWITCH          reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    CASE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    DEFAULT         reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    FOR             reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    WHILE           reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    DO              reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    ID              reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    BREAK           reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    SEMICOLON       reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    LBLOCK          reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    RETURN          reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    LPAREN          reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    NUMBER          reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    TRUE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    FALSE           reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    RBLOCK          reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    ELSE            reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)
    ELSEIF          reduce using rule 16 (echo_stmt -> echo_stmt ECHO boolean SEMICOLON .)


state 109

    (17) echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .

    ECHO            reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    CLOSETAG        reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    IDVAR           reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    TIMESTIMES      reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    AMPERSANT       reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    FUNCTION        reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    PRIVATE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    PUBLIC          reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    PROTECTED       reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    REQUIRE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    INCLUDE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    CLASS           reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    IF              reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    SWITCH          reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    CASE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    DEFAULT         reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    FOR             reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    WHILE           reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    DO              reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    ID              reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    BREAK           reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    SEMICOLON       reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    LBLOCK          reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    RETURN          reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    LPAREN          reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    NUMBER          reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    TRUE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    FALSE           reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    RBLOCK          reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    ELSE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)
    ELSEIF          reduce using rule 17 (echo_stmt -> echo_stmt ECHO fun_declaration SEMICOLON .)


state 110

    (38) var_declaration -> IDVAR EQUAL IDVAR SEMICOLON . var_declaration
    (39) var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON

  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSETAG        reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    FUNCTION        reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    PRIVATE         reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    PUBLIC          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    PROTECTED       reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    REQUIRE         reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    INCLUDE         reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    CLASS           reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    IF              reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    SWITCH          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    CASE            reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    DEFAULT         reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    FOR             reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    WHILE           reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    DO              reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    ID              reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    ECHO            reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    SEMICOLON       reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    RBLOCK          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    LBLOCK          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    RETURN          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    LPAREN          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    NUMBER          reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    TRUE            reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    FALSE           reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .)
    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16

  ! IDVAR           [ reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .) ]
  ! TIMESTIMES      [ reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 39 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON .) ]

    var_declaration                shift and go to state 161

state 111

    (107) factor -> IDVAR LPAREN . args RPAREN
    (108) args -> . args_list
    (109) args -> . empty
    (110) args -> . VOID
    (111) args_list -> . args_list COMMA expression
    (112) args_list -> . expression
    (118) empty -> .
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VOID            shift and go to state 165
    RPAREN          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    args                           shift and go to state 162
    args_list                      shift and go to state 163
    empty                          shift and go to state 164
    expression                     shift and go to state 166
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 112

    (83) var -> IDVAR LBRACKET . expression RBRACKET
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 167
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 113

    (34) var_declaration -> IDVAR EQUAL NUMBER SEMICOLON . var_declaration
    (35) var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON

  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSETAG        reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    PRIVATE         reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    PUBLIC          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    PROTECTED       reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    REQUIRE         reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    INCLUDE         reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    CLASS           reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    IF              reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    SWITCH          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    CASE            reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    DEFAULT         reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    FOR             reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    WHILE           reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    DO              reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    ID              reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    ECHO            reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    SEMICOLON       reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    LBLOCK          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    RETURN          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    LPAREN          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    NUMBER          reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    TRUE            reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    FALSE           reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .)
    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16

  ! IDVAR           [ reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .) ]
  ! TIMESTIMES      [ reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 35 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON .) ]

    var_declaration                shift and go to state 168

state 114

    (36) var_declaration -> IDVAR EQUAL boolean SEMICOLON . var_declaration
    (37) var_declaration -> IDVAR EQUAL boolean SEMICOLON .
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON

  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSETAG        reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    FUNCTION        reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    PRIVATE         reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    PUBLIC          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    PROTECTED       reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    REQUIRE         reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    INCLUDE         reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    CLASS           reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    IF              reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    SWITCH          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    CASE            reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    DEFAULT         reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    FOR             reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    WHILE           reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    DO              reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    ID              reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    ECHO            reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    SEMICOLON       reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    RBLOCK          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    LBLOCK          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    RETURN          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    LPAREN          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    NUMBER          reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    TRUE            reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    FALSE           reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .)
    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16

  ! IDVAR           [ reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .) ]
  ! TIMESTIMES      [ reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 37 (var_declaration -> IDVAR EQUAL boolean SEMICOLON .) ]

    var_declaration                shift and go to state 169

state 115

    (43) var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .

    CLOSETAG        reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    IDVAR           reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    TIMESTIMES      reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    AMPERSANT       reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    FUNCTION        reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    PRIVATE         reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    PUBLIC          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    PROTECTED       reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    REQUIRE         reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    INCLUDE         reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    CLASS           reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    IF              reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    SWITCH          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    CASE            reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    DEFAULT         reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    FOR             reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    WHILE           reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    DO              reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    ID              reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    ECHO            reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    SEMICOLON       reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    RBLOCK          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    LBLOCK          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    RETURN          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    LPAREN          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    NUMBER          reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    TRUE            reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)
    FALSE           reduce using rule 43 (var_declaration -> IDVAR EQUAL simple_expression SEMICOLON .)


state 116

    (84) simple_expression -> additive_expression relop . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    IDVAR           shift and go to state 171
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    additive_expression            shift and go to state 170
    term                           shift and go to state 68
    factor                         shift and go to state 69
    var                            shift and go to state 71
    boolean                        shift and go to state 85

state 117

    (93) additive_expression -> additive_expression addop . term
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    IDVAR           shift and go to state 171
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    term                           shift and go to state 172
    factor                         shift and go to state 69
    var                            shift and go to state 71
    boolean                        shift and go to state 85

state 118

    (86) relop -> LESS .

    LPAREN          reduce using rule 86 (relop -> LESS .)
    NUMBER          reduce using rule 86 (relop -> LESS .)
    IDVAR           reduce using rule 86 (relop -> LESS .)
    TRUE            reduce using rule 86 (relop -> LESS .)
    FALSE           reduce using rule 86 (relop -> LESS .)


state 119

    (87) relop -> LESSEQUAL .

    LPAREN          reduce using rule 87 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 87 (relop -> LESSEQUAL .)
    IDVAR           reduce using rule 87 (relop -> LESSEQUAL .)
    TRUE            reduce using rule 87 (relop -> LESSEQUAL .)
    FALSE           reduce using rule 87 (relop -> LESSEQUAL .)


state 120

    (88) relop -> GREATER .

    LPAREN          reduce using rule 88 (relop -> GREATER .)
    NUMBER          reduce using rule 88 (relop -> GREATER .)
    IDVAR           reduce using rule 88 (relop -> GREATER .)
    TRUE            reduce using rule 88 (relop -> GREATER .)
    FALSE           reduce using rule 88 (relop -> GREATER .)


state 121

    (89) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 89 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 89 (relop -> GREATEREQUAL .)
    IDVAR           reduce using rule 89 (relop -> GREATEREQUAL .)
    TRUE            reduce using rule 89 (relop -> GREATEREQUAL .)
    FALSE           reduce using rule 89 (relop -> GREATEREQUAL .)


state 122

    (90) relop -> DEQUAL .

    LPAREN          reduce using rule 90 (relop -> DEQUAL .)
    NUMBER          reduce using rule 90 (relop -> DEQUAL .)
    IDVAR           reduce using rule 90 (relop -> DEQUAL .)
    TRUE            reduce using rule 90 (relop -> DEQUAL .)
    FALSE           reduce using rule 90 (relop -> DEQUAL .)


state 123

    (91) relop -> DISTINT .

    LPAREN          reduce using rule 91 (relop -> DISTINT .)
    NUMBER          reduce using rule 91 (relop -> DISTINT .)
    IDVAR           reduce using rule 91 (relop -> DISTINT .)
    TRUE            reduce using rule 91 (relop -> DISTINT .)
    FALSE           reduce using rule 91 (relop -> DISTINT .)


state 124

    (92) relop -> ISEQUAL .

    LPAREN          reduce using rule 92 (relop -> ISEQUAL .)
    NUMBER          reduce using rule 92 (relop -> ISEQUAL .)
    IDVAR           reduce using rule 92 (relop -> ISEQUAL .)
    TRUE            reduce using rule 92 (relop -> ISEQUAL .)
    FALSE           reduce using rule 92 (relop -> ISEQUAL .)


state 125

    (97) addop -> PLUS .

    LPAREN          reduce using rule 97 (addop -> PLUS .)
    NUMBER          reduce using rule 97 (addop -> PLUS .)
    IDVAR           reduce using rule 97 (addop -> PLUS .)
    TRUE            reduce using rule 97 (addop -> PLUS .)
    FALSE           reduce using rule 97 (addop -> PLUS .)


state 126

    (98) addop -> MINUS .

    LPAREN          reduce using rule 98 (addop -> MINUS .)
    NUMBER          reduce using rule 98 (addop -> MINUS .)
    IDVAR           reduce using rule 98 (addop -> MINUS .)
    TRUE            reduce using rule 98 (addop -> MINUS .)
    FALSE           reduce using rule 98 (addop -> MINUS .)


state 127

    (95) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    DISTINT         reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    SEMICOLON       reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    AND             reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    OR              reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 95 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 95 (additive_expression -> term MINUSMINUS .)


state 128

    (96) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    DISTINT         reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    SEMICOLON       reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    AND             reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    OR              reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 96 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 96 (additive_expression -> term PLUSPLUS .)


state 129

    (99) term -> term mulop . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    IDVAR           shift and go to state 171
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    factor                         shift and go to state 173
    var                            shift and go to state 71
    boolean                        shift and go to state 85

state 130

    (101) mulop -> TIMES .

    LPAREN          reduce using rule 101 (mulop -> TIMES .)
    NUMBER          reduce using rule 101 (mulop -> TIMES .)
    IDVAR           reduce using rule 101 (mulop -> TIMES .)
    TRUE            reduce using rule 101 (mulop -> TIMES .)
    FALSE           reduce using rule 101 (mulop -> TIMES .)


state 131

    (102) mulop -> DIVIDE .

    LPAREN          reduce using rule 102 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 102 (mulop -> DIVIDE .)
    IDVAR           reduce using rule 102 (mulop -> DIVIDE .)
    TRUE            reduce using rule 102 (mulop -> DIVIDE .)
    FALSE           reduce using rule 102 (mulop -> DIVIDE .)


state 132

    (103) factor -> LPAREN expression . RPAREN
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RPAREN          shift and go to state 174
    AND             shift and go to state 147
    OR              shift and go to state 148


state 133

    (33) var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .

    CLOSETAG        reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    IDVAR           reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    TIMESTIMES      reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    INCLUDE         reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    CLASS           reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    IF              reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    SWITCH          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    CASE            reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    FOR             reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    WHILE           reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    DO              reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    ID              reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    ECHO            reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    RETURN          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    LPAREN          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    NUMBER          reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    TRUE            reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)
    FALSE           reduce using rule 33 (var_declaration -> TIMESTIMES IDVAR SEMICOLON var_declaration .)


state 134

    (40) var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .

    CLOSETAG        reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    IDVAR           reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    TIMESTIMES      reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    INCLUDE         reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    CLASS           reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    IF              reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    SWITCH          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    CASE            reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    FOR             reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    WHILE           reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    DO              reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    ID              reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    ECHO            reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    RETURN          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    LPAREN          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    NUMBER          reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    TRUE            reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)
    FALSE           reduce using rule 40 (var_declaration -> AMPERSANT IDVAR SEMICOLON var_declaration .)


state 135

    (41) var_declaration -> AMPERSANT IDVAR EQUAL IDVAR . SEMICOLON selection_stmt

    SEMICOLON       shift and go to state 175


state 136

    (44) fun_declaration -> FUNCTION ID LPAREN params . RPAREN
    (45) fun_declaration -> FUNCTION ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 176


state 137

    (46) params -> param_list .
    (48) param_list -> param_list . COMMA param_list

    RPAREN          reduce using rule 46 (params -> param_list .)
    COMMA           shift and go to state 177


state 138

    (47) params -> empty .

    RPAREN          reduce using rule 47 (params -> empty .)


state 139

    (49) param_list -> param .

    COMMA           reduce using rule 49 (param_list -> param .)
    RPAREN          reduce using rule 49 (param_list -> param .)


state 140

    (50) param -> IDVAR .
    (51) param -> IDVAR . LBRACKET RBRACKET

    COMMA           reduce using rule 50 (param -> IDVAR .)
    RPAREN          reduce using rule 50 (param -> IDVAR .)
    LBRACKET        shift and go to state 178


state 141

    (115) typeclass -> ID IDVAR EQUAL NEW . constructor SEMICOLON
    (116) constructor -> . ID LPAREN RPAREN
    (117) constructor -> . ID LPAREN args RPAREN

    ID              shift and go to state 179

    constructor                    shift and go to state 180

state 142

    (19) header_declaration -> REQUIRE LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 181


state 143

    (20) header_declaration -> INCLUDE LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 182


state 144

    (22) class_declaration -> CLASS ID LBLOCK attribute . RBLOCK
    (23) attribute -> attribute . area var_declaration
    (25) attribute -> attribute . area fun_declaration
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED

    RBLOCK          shift and go to state 183
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21

    area                           shift and go to state 184

state 145

    (24) attribute -> area . var_declaration
    (26) attribute -> area . fun_declaration
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16
    FUNCTION        shift and go to state 17

    var_declaration                shift and go to state 185
    fun_declaration                shift and go to state 186

state 146

    (65) selection_stmt -> IF LPAREN expression RPAREN . statement
    (66) selection_stmt -> IF LPAREN expression RPAREN . statement selection
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUMBER          [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    expression                     shift and go to state 97
    statement                      shift and go to state 187
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    echo_stmt                      shift and go to state 96
    var                            shift and go to state 81
    additive_expression            shift and go to state 67
    area                           shift and go to state 100
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 147

    (80) expression -> expression AND . expression
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 188
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 148

    (81) expression -> expression OR . expression
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 189
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 149

    (77) expression -> var EQUAL . expression
    (79) expression -> var EQUAL . AMPERSANT IDVAR
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    AMPERSANT       shift and go to state 191
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    var                            shift and go to state 81
    expression                     shift and go to state 190
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 150

    (69) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUMBER          [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    var                            shift and go to state 81
    statement                      shift and go to state 192
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    echo_stmt                      shift and go to state 96
    expression                     shift and go to state 97
    additive_expression            shift and go to state 67
    area                           shift and go to state 100
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 151

    (70) selection_stmt -> CASE NUMBER COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 193


state 152

    (71) selection_stmt -> DEFAULT COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 194


state 153

    (64) expression_stmt -> expression SEMICOLON .

    BREAK           reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    ELSEIF          reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    CLOSETAG        reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    IDVAR           reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    TIMESTIMES      reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    AMPERSANT       reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    FUNCTION        reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    PRIVATE         reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    PUBLIC          reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    PROTECTED       reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    REQUIRE         reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    INCLUDE         reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    CLASS           reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    SWITCH          reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    CASE            reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    DEFAULT         reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    DO              reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    ECHO            reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    RBLOCK          reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    TRUE            reduce using rule 64 (expression_stmt -> expression SEMICOLON .)
    FALSE           reduce using rule 64 (expression_stmt -> expression SEMICOLON .)


state 154

    (52) compount_stmt -> LBLOCK echo_stmt . local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMICOLON
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (15) echo_stmt -> echo_stmt . ECHO NUMBER SEMICOLON
    (16) echo_stmt -> echo_stmt . ECHO boolean SEMICOLON
    (17) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON
    (53) local_declarations -> . local_declarations var_declaration
    (54) local_declarations -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 37
    IDVAR           reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    LBLOCK          reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    SWITCH          reduce using rule 118 (empty -> .)
    CASE            reduce using rule 118 (empty -> .)
    DEFAULT         reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CLASS           reduce using rule 118 (empty -> .)
    PRIVATE         reduce using rule 118 (empty -> .)
    PUBLIC          reduce using rule 118 (empty -> .)
    PROTECTED       reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)
    NUMBER          reduce using rule 118 (empty -> .)
    TRUE            reduce using rule 118 (empty -> .)
    FALSE           reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)

  ! ECHO            [ reduce using rule 118 (empty -> .) ]

    local_declarations             shift and go to state 195
    empty                          shift and go to state 196

state 155

    (75) return_stmt -> RETURN SEMICOLON .

    BREAK           reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    CLOSETAG        reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    IDVAR           reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    TIMESTIMES      reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    AMPERSANT       reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    PRIVATE         reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    PUBLIC          reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    PROTECTED       reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    REQUIRE         reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    INCLUDE         reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    CLASS           reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    CASE            reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    DO              reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    ECHO            reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    RBLOCK          reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    TRUE            reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)
    FALSE           reduce using rule 75 (return_stmt -> RETURN SEMICOLON .)


state 156

    (76) return_stmt -> RETURN expression . SEMICOLON
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    SEMICOLON       shift and go to state 197
    AND             shift and go to state 147
    OR              shift and go to state 148


state 157

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON . expression SEMICOLON additive_expression RPAREN statement
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 198
    additive_expression            shift and go to state 67
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 158

    (73) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUMBER          [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    expression                     shift and go to state 97
    statement                      shift and go to state 199
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    echo_stmt                      shift and go to state 96
    var                            shift and go to state 81
    additive_expression            shift and go to state 67
    area                           shift and go to state 100
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 159

    (74) iteration_stmt -> DO LBLOCK statement SEMICOLON . RBLOCK WHILE LPAREN expression RPAREN

    RBLOCK          shift and go to state 200


state 160

    (21) class_declaration -> area CLASS ID LBLOCK attribute . RBLOCK
    (23) attribute -> attribute . area var_declaration
    (25) attribute -> attribute . area fun_declaration
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED

    RBLOCK          shift and go to state 201
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21

    area                           shift and go to state 184

state 161

    (38) var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .

    CLOSETAG        reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    IDVAR           reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    TIMESTIMES      reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    INCLUDE         reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    CLASS           reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    IF              reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    SWITCH          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    CASE            reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    FOR             reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    WHILE           reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    DO              reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    ID              reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    ECHO            reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    RETURN          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    LPAREN          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    NUMBER          reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    TRUE            reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)
    FALSE           reduce using rule 38 (var_declaration -> IDVAR EQUAL IDVAR SEMICOLON var_declaration .)


state 162

    (107) factor -> IDVAR LPAREN args . RPAREN

    RPAREN          shift and go to state 202


state 163

    (108) args -> args_list .
    (111) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 108 (args -> args_list .)
    COMMA           shift and go to state 203


state 164

    (109) args -> empty .

    RPAREN          reduce using rule 109 (args -> empty .)


state 165

    (110) args -> VOID .

    RPAREN          reduce using rule 110 (args -> VOID .)


state 166

    (112) args_list -> expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    COMMA           reduce using rule 112 (args_list -> expression .)
    RPAREN          reduce using rule 112 (args_list -> expression .)
    AND             shift and go to state 147
    OR              shift and go to state 148


state 167

    (83) var -> IDVAR LBRACKET expression . RBRACKET
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RBRACKET        shift and go to state 204
    AND             shift and go to state 147
    OR              shift and go to state 148


state 168

    (34) var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .

    CLOSETAG        reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    IDVAR           reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    TIMESTIMES      reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    INCLUDE         reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    CLASS           reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    IF              reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    SWITCH          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    CASE            reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    FOR             reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    WHILE           reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    DO              reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    ID              reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    ECHO            reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    RETURN          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    LPAREN          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    NUMBER          reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    TRUE            reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)
    FALSE           reduce using rule 34 (var_declaration -> IDVAR EQUAL NUMBER SEMICOLON var_declaration .)


state 169

    (36) var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .

    CLOSETAG        reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    IDVAR           reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    TIMESTIMES      reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    INCLUDE         reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    CLASS           reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    IF              reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    SWITCH          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    CASE            reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    FOR             reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    WHILE           reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    DO              reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    ID              reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    ECHO            reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    RETURN          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    LPAREN          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    NUMBER          reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    TRUE            reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)
    FALSE           reduce using rule 36 (var_declaration -> IDVAR EQUAL boolean SEMICOLON var_declaration .)


state 170

    (84) simple_expression -> additive_expression relop additive_expression .
    (93) additive_expression -> additive_expression . addop term
    (97) addop -> . PLUS
    (98) addop -> . MINUS

    SEMICOLON       reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    AND             reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    OR              reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 84 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126

    addop                          shift and go to state 117

state 171

    (107) factor -> IDVAR . LPAREN args RPAREN
    (82) var -> IDVAR .
    (83) var -> IDVAR . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 111
    MINUSMINUS      reduce using rule 82 (var -> IDVAR .)
    PLUSPLUS        reduce using rule 82 (var -> IDVAR .)
    TIMES           reduce using rule 82 (var -> IDVAR .)
    DIVIDE          reduce using rule 82 (var -> IDVAR .)
    PLUS            reduce using rule 82 (var -> IDVAR .)
    MINUS           reduce using rule 82 (var -> IDVAR .)
    SEMICOLON       reduce using rule 82 (var -> IDVAR .)
    RPAREN          reduce using rule 82 (var -> IDVAR .)
    AND             reduce using rule 82 (var -> IDVAR .)
    OR              reduce using rule 82 (var -> IDVAR .)
    COMMA           reduce using rule 82 (var -> IDVAR .)
    RBRACKET        reduce using rule 82 (var -> IDVAR .)
    LESS            reduce using rule 82 (var -> IDVAR .)
    LESSEQUAL       reduce using rule 82 (var -> IDVAR .)
    GREATER         reduce using rule 82 (var -> IDVAR .)
    GREATEREQUAL    reduce using rule 82 (var -> IDVAR .)
    DEQUAL          reduce using rule 82 (var -> IDVAR .)
    DISTINT         reduce using rule 82 (var -> IDVAR .)
    ISEQUAL         reduce using rule 82 (var -> IDVAR .)
    LBRACKET        shift and go to state 112


state 172

    (93) additive_expression -> additive_expression addop term .
    (99) term -> term . mulop factor
    (101) mulop -> . TIMES
    (102) mulop -> . DIVIDE

    LESS            reduce using rule 93 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 93 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 93 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 93 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 93 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 93 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 93 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 93 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 93 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 93 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 93 (additive_expression -> additive_expression addop term .)
    AND             reduce using rule 93 (additive_expression -> additive_expression addop term .)
    OR              reduce using rule 93 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 93 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 93 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131

    mulop                          shift and go to state 129

state 173

    (99) term -> term mulop factor .

    MINUSMINUS      reduce using rule 99 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 99 (term -> term mulop factor .)
    TIMES           reduce using rule 99 (term -> term mulop factor .)
    DIVIDE          reduce using rule 99 (term -> term mulop factor .)
    LESS            reduce using rule 99 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 99 (term -> term mulop factor .)
    GREATER         reduce using rule 99 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 99 (term -> term mulop factor .)
    DEQUAL          reduce using rule 99 (term -> term mulop factor .)
    DISTINT         reduce using rule 99 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 99 (term -> term mulop factor .)
    PLUS            reduce using rule 99 (term -> term mulop factor .)
    MINUS           reduce using rule 99 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 99 (term -> term mulop factor .)
    RPAREN          reduce using rule 99 (term -> term mulop factor .)
    AND             reduce using rule 99 (term -> term mulop factor .)
    OR              reduce using rule 99 (term -> term mulop factor .)
    COMMA           reduce using rule 99 (term -> term mulop factor .)
    RBRACKET        reduce using rule 99 (term -> term mulop factor .)


state 174

    (103) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 103 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 103 (factor -> LPAREN expression RPAREN .)


state 175

    (41) var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON . selection_stmt
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON

    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29

    selection_stmt                 shift and go to state 205

state 176

    (44) fun_declaration -> FUNCTION ID LPAREN params RPAREN .
    (45) fun_declaration -> FUNCTION ID LPAREN params RPAREN . compount_stmt
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK

    CLOSETAG        reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    IDVAR           reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    TIMESTIMES      reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    AMPERSANT       reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    FUNCTION        reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    PRIVATE         reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    PUBLIC          reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    PROTECTED       reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    REQUIRE         reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    INCLUDE         reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    CLASS           reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    IF              reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    SWITCH          reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    CASE            reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    DEFAULT         reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    FOR             reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    WHILE           reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    DO              reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    ID              reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    ECHO            reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 44 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    LBLOCK          shift and go to state 98

    compount_stmt                  shift and go to state 206

state 177

    (48) param_list -> param_list COMMA . param_list
    (48) param_list -> . param_list COMMA param_list
    (49) param_list -> . param
    (50) param -> . IDVAR
    (51) param -> . IDVAR LBRACKET RBRACKET

    IDVAR           shift and go to state 140

    param_list                     shift and go to state 207
    param                          shift and go to state 139

state 178

    (51) param -> IDVAR LBRACKET . RBRACKET

    RBRACKET        shift and go to state 208


state 179

    (116) constructor -> ID . LPAREN RPAREN
    (117) constructor -> ID . LPAREN args RPAREN

    LPAREN          shift and go to state 209


state 180

    (115) typeclass -> ID IDVAR EQUAL NEW constructor . SEMICOLON

    SEMICOLON       shift and go to state 210


state 181

    (19) header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .

    CLOSETAG        reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    IDVAR           reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    TIMESTIMES      reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    AMPERSANT       reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    REQUIRE         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CLASS           reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    DO              reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ECHO            reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)


state 182

    (20) header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .

    CLOSETAG        reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    IDVAR           reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    TIMESTIMES      reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    AMPERSANT       reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    REQUIRE         reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    CLASS           reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    DO              reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)
    ECHO            reduce using rule 20 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMICOLON .)


state 183

    (22) class_declaration -> CLASS ID LBLOCK attribute RBLOCK .

    CLOSETAG        reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    IDVAR           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    TIMESTIMES      reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    AMPERSANT       reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FUNCTION        reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PRIVATE         reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PUBLIC          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PROTECTED       reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    REQUIRE         reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    INCLUDE         reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    CLASS           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    IF              reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    SWITCH          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    CASE            reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    DEFAULT         reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FOR             reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    WHILE           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    DO              reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ID              reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ECHO            reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    BREAK           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    SEMICOLON       reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ELSE            reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ELSEIF          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    RBLOCK          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    LBLOCK          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    RETURN          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    LPAREN          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    NUMBER          reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    TRUE            reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FALSE           reduce using rule 22 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)


state 184

    (23) attribute -> attribute area . var_declaration
    (25) attribute -> attribute area . fun_declaration
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON
    (44) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (45) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16
    FUNCTION        shift and go to state 17

    var_declaration                shift and go to state 211
    fun_declaration                shift and go to state 212

state 185

    (24) attribute -> area var_declaration .

    RBLOCK          reduce using rule 24 (attribute -> area var_declaration .)
    PRIVATE         reduce using rule 24 (attribute -> area var_declaration .)
    PUBLIC          reduce using rule 24 (attribute -> area var_declaration .)
    PROTECTED       reduce using rule 24 (attribute -> area var_declaration .)


state 186

    (26) attribute -> area fun_declaration .

    RBLOCK          reduce using rule 26 (attribute -> area fun_declaration .)
    PRIVATE         reduce using rule 26 (attribute -> area fun_declaration .)
    PUBLIC          reduce using rule 26 (attribute -> area fun_declaration .)
    PROTECTED       reduce using rule 26 (attribute -> area fun_declaration .)


state 187

    (65) selection_stmt -> IF LPAREN expression RPAREN statement .
    (66) selection_stmt -> IF LPAREN expression RPAREN statement . selection
    (67) selection -> . ELSE statement
    (68) selection -> . ELSEIF statement selection

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    CLOSETAG        reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IDVAR           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PRIVATE         reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PUBLIC          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PROTECTED       reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 214
    ELSEIF          shift and go to state 215

  ! ELSE            [ reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]
  ! ELSEIF          [ reduce using rule 65 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]

    selection                      shift and go to state 213

state 188

    (80) expression -> expression AND expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 80 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 80 (expression -> expression AND expression .)
    COMMA           reduce using rule 80 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 80 (expression -> expression AND expression .)
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! AND             [ reduce using rule 80 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 80 (expression -> expression AND expression .) ]


state 189

    (81) expression -> expression OR expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 81 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 81 (expression -> expression OR expression .)
    COMMA           reduce using rule 81 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 81 (expression -> expression OR expression .)
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! AND             [ reduce using rule 81 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 81 (expression -> expression OR expression .) ]


state 190

    (77) expression -> var EQUAL expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 77 (expression -> var EQUAL expression .)
    SEMICOLON       reduce using rule 77 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 77 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 77 (expression -> var EQUAL expression .)
    AND             shift and go to state 147
    OR              shift and go to state 148

  ! AND             [ reduce using rule 77 (expression -> var EQUAL expression .) ]
  ! OR              [ reduce using rule 77 (expression -> var EQUAL expression .) ]


state 191

    (79) expression -> var EQUAL AMPERSANT . IDVAR

    IDVAR           shift and go to state 216


state 192

    (69) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    CLOSETAG        reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IDVAR           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TIMESTIMES      reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    AMPERSANT       reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FUNCTION        reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PRIVATE         reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PUBLIC          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PROTECTED       reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    REQUIRE         reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    INCLUDE         reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CLASS           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DO              reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ECHO            reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMICOLON       reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSEIF          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RBLOCK          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUMBER          reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TRUE            reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FALSE           reduce using rule 69 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 193

    (70) selection_stmt -> CASE NUMBER COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 217


state 194

    (71) selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .

    CLOSETAG        reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IDVAR           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    TIMESTIMES      reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    PRIVATE         reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    PUBLIC          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    PROTECTED       reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    INCLUDE         reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DO              reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSEIF          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 71 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)


state 195

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations . echo_stmt statement_list echo_stmt RBLOCK
    (53) local_declarations -> local_declarations . var_declaration
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (30) var_declaration -> . IDVAR SEMICOLON var_declaration
    (31) var_declaration -> . IDVAR SEMICOLON
    (32) var_declaration -> . TIMESTIMES IDVAR SEMICOLON
    (33) var_declaration -> . TIMESTIMES IDVAR SEMICOLON var_declaration
    (34) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON var_declaration
    (35) var_declaration -> . IDVAR EQUAL NUMBER SEMICOLON
    (36) var_declaration -> . IDVAR EQUAL boolean SEMICOLON var_declaration
    (37) var_declaration -> . IDVAR EQUAL boolean SEMICOLON
    (38) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON var_declaration
    (39) var_declaration -> . IDVAR EQUAL IDVAR SEMICOLON
    (40) var_declaration -> . AMPERSANT IDVAR SEMICOLON var_declaration
    (41) var_declaration -> . AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt
    (42) var_declaration -> . AMPERSANT IDVAR SEMICOLON
    (43) var_declaration -> . IDVAR EQUAL simple_expression SEMICOLON
    (118) empty -> .

  ! shift/reduce conflict for IDVAR resolved as shift
    IDVAR           shift and go to state 14
    TIMESTIMES      shift and go to state 15
    AMPERSANT       shift and go to state 16
    ECHO            reduce using rule 118 (empty -> .)
    LBLOCK          reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    SWITCH          reduce using rule 118 (empty -> .)
    CASE            reduce using rule 118 (empty -> .)
    DEFAULT         reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CLASS           reduce using rule 118 (empty -> .)
    PRIVATE         reduce using rule 118 (empty -> .)
    PUBLIC          reduce using rule 118 (empty -> .)
    PROTECTED       reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)
    NUMBER          reduce using rule 118 (empty -> .)
    TRUE            reduce using rule 118 (empty -> .)
    FALSE           reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]

    echo_stmt                      shift and go to state 218
    var_declaration                shift and go to state 219
    empty                          shift and go to state 25

state 196

    (54) local_declarations -> empty .

    IDVAR           reduce using rule 54 (local_declarations -> empty .)
    TIMESTIMES      reduce using rule 54 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 54 (local_declarations -> empty .)
    ECHO            reduce using rule 54 (local_declarations -> empty .)
    LBLOCK          reduce using rule 54 (local_declarations -> empty .)
    IF              reduce using rule 54 (local_declarations -> empty .)
    SWITCH          reduce using rule 54 (local_declarations -> empty .)
    CASE            reduce using rule 54 (local_declarations -> empty .)
    DEFAULT         reduce using rule 54 (local_declarations -> empty .)
    FOR             reduce using rule 54 (local_declarations -> empty .)
    WHILE           reduce using rule 54 (local_declarations -> empty .)
    DO              reduce using rule 54 (local_declarations -> empty .)
    RETURN          reduce using rule 54 (local_declarations -> empty .)
    CLASS           reduce using rule 54 (local_declarations -> empty .)
    PRIVATE         reduce using rule 54 (local_declarations -> empty .)
    PUBLIC          reduce using rule 54 (local_declarations -> empty .)
    PROTECTED       reduce using rule 54 (local_declarations -> empty .)
    LPAREN          reduce using rule 54 (local_declarations -> empty .)
    NUMBER          reduce using rule 54 (local_declarations -> empty .)
    TRUE            reduce using rule 54 (local_declarations -> empty .)
    FALSE           reduce using rule 54 (local_declarations -> empty .)
    RBLOCK          reduce using rule 54 (local_declarations -> empty .)


state 197

    (76) return_stmt -> RETURN expression SEMICOLON .

    BREAK           reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    ELSEIF          reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    CLOSETAG        reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    IDVAR           reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    TIMESTIMES      reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    AMPERSANT       reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    PRIVATE         reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    PUBLIC          reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    PROTECTED       reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    REQUIRE         reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    INCLUDE         reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    DO              reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    ECHO            reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    RBLOCK          reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 76 (return_stmt -> RETURN expression SEMICOLON .)


state 198

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression . SEMICOLON additive_expression RPAREN statement
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    SEMICOLON       shift and go to state 220
    AND             shift and go to state 147
    OR              shift and go to state 148


state 199

    (73) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    CLOSETAG        reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IDVAR           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PRIVATE         reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PUBLIC          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PROTECTED       reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSEIF          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 73 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 200

    (74) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 221


state 201

    (21) class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .

    CLOSETAG        reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    IDVAR           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    TIMESTIMES      reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    AMPERSANT       reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FUNCTION        reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PRIVATE         reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PUBLIC          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PROTECTED       reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    REQUIRE         reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    INCLUDE         reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    CLASS           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    IF              reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    SWITCH          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    CASE            reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    DEFAULT         reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FOR             reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    WHILE           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    DO              reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ID              reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ECHO            reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    BREAK           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    SEMICOLON       reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ELSE            reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ELSEIF          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    RBLOCK          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    LBLOCK          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    RETURN          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    LPAREN          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    NUMBER          reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    TRUE            reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FALSE           reduce using rule 21 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)


state 202

    (107) factor -> IDVAR LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    TIMES           reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    DIVIDE          reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    LESS            reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    GREATER         reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    DEQUAL          reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    DISTINT         reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    PLUS            reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    MINUS           reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    RPAREN          reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    AND             reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    OR              reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    COMMA           reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)
    RBRACKET        reduce using rule 107 (factor -> IDVAR LPAREN args RPAREN .)


state 203

    (111) args_list -> args_list COMMA . expression
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 222
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 204

    (83) var -> IDVAR LBRACKET expression RBRACKET .

    MINUSMINUS      reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    LESS            reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    AND             reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    OR              reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 83 (var -> IDVAR LBRACKET expression RBRACKET .)


state 205

    (41) var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .

    CLOSETAG        reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    IDVAR           reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    TIMESTIMES      reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    AMPERSANT       reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    FUNCTION        reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    PRIVATE         reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    PUBLIC          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    PROTECTED       reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    REQUIRE         reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    INCLUDE         reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    CLASS           reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    IF              reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    SWITCH          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    CASE            reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    DEFAULT         reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    FOR             reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    WHILE           reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    DO              reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    ID              reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    ECHO            reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    SEMICOLON       reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    RBLOCK          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    LBLOCK          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    RETURN          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    LPAREN          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    NUMBER          reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    TRUE            reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)
    FALSE           reduce using rule 41 (var_declaration -> AMPERSANT IDVAR EQUAL IDVAR SEMICOLON selection_stmt .)


state 206

    (45) fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .

    CLOSETAG        reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    IDVAR           reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    TIMESTIMES      reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    AMPERSANT       reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FUNCTION        reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PRIVATE         reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PUBLIC          reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PROTECTED       reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    REQUIRE         reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    INCLUDE         reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    CLASS           reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    IF              reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SWITCH          reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    CASE            reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DEFAULT         reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FOR             reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    WHILE           reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DO              reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    ID              reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    ECHO            reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SEMICOLON       reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    RBLOCK          reduce using rule 45 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)


state 207

    (48) param_list -> param_list COMMA param_list .
    (48) param_list -> param_list . COMMA param_list

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 48 (param_list -> param_list COMMA param_list .)
    COMMA           shift and go to state 177

  ! COMMA           [ reduce using rule 48 (param_list -> param_list COMMA param_list .) ]


state 208

    (51) param -> IDVAR LBRACKET RBRACKET .

    COMMA           reduce using rule 51 (param -> IDVAR LBRACKET RBRACKET .)
    RPAREN          reduce using rule 51 (param -> IDVAR LBRACKET RBRACKET .)


state 209

    (116) constructor -> ID LPAREN . RPAREN
    (117) constructor -> ID LPAREN . args RPAREN
    (108) args -> . args_list
    (109) args -> . empty
    (110) args -> . VOID
    (111) args_list -> . args_list COMMA expression
    (112) args_list -> . expression
    (118) empty -> .
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 223
    VOID            shift and go to state 165
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! RPAREN          [ reduce using rule 118 (empty -> .) ]

    args                           shift and go to state 224
    args_list                      shift and go to state 163
    empty                          shift and go to state 164
    expression                     shift and go to state 166
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 210

    (115) typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .

    CLOSETAG        reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    IDVAR           reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    TIMESTIMES      reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    AMPERSANT       reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    FUNCTION        reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    PRIVATE         reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    PUBLIC          reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    PROTECTED       reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    REQUIRE         reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    INCLUDE         reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    CLASS           reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    IF              reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    SWITCH          reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    CASE            reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    DEFAULT         reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    FOR             reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    WHILE           reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    DO              reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    ID              reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)
    ECHO            reduce using rule 115 (typeclass -> ID IDVAR EQUAL NEW constructor SEMICOLON .)


state 211

    (23) attribute -> attribute area var_declaration .

    RBLOCK          reduce using rule 23 (attribute -> attribute area var_declaration .)
    PRIVATE         reduce using rule 23 (attribute -> attribute area var_declaration .)
    PUBLIC          reduce using rule 23 (attribute -> attribute area var_declaration .)
    PROTECTED       reduce using rule 23 (attribute -> attribute area var_declaration .)


state 212

    (25) attribute -> attribute area fun_declaration .

    RBLOCK          reduce using rule 25 (attribute -> attribute area fun_declaration .)
    PRIVATE         reduce using rule 25 (attribute -> attribute area fun_declaration .)
    PUBLIC          reduce using rule 25 (attribute -> attribute area fun_declaration .)
    PROTECTED       reduce using rule 25 (attribute -> attribute area fun_declaration .)


state 213

    (66) selection_stmt -> IF LPAREN expression RPAREN statement selection .

    CLOSETAG        reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    IDVAR           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TIMESTIMES      reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    AMPERSANT       reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FUNCTION        reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PRIVATE         reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PUBLIC          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PROTECTED       reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    REQUIRE         reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    INCLUDE         reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    CLASS           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    IF              reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SWITCH          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    CASE            reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DEFAULT         reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FOR             reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    WHILE           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DO              reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ID              reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ECHO            reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    BREAK           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SEMICOLON       reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSE            reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSEIF          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RBLOCK          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LBLOCK          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RETURN          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LPAREN          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    NUMBER          reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TRUE            reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FALSE           reduce using rule 66 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)


state 214

    (67) selection -> ELSE . statement
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUMBER          [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    statement                      shift and go to state 225
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    echo_stmt                      shift and go to state 96
    expression                     shift and go to state 97
    var                            shift and go to state 81
    additive_expression            shift and go to state 67
    area                           shift and go to state 100
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 215

    (68) selection -> ELSEIF . statement selection
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    statement                      shift and go to state 226
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    echo_stmt                      shift and go to state 96
    expression                     shift and go to state 97
    var                            shift and go to state 81
    additive_expression            shift and go to state 67
    area                           shift and go to state 100
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 216

    (79) expression -> var EQUAL AMPERSANT IDVAR .

    RPAREN          reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    AND             reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    OR              reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    SEMICOLON       reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    COMMA           reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)
    RBRACKET        reduce using rule 79 (expression -> var EQUAL AMPERSANT IDVAR .)


state 217

    (70) selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .

    CLOSETAG        reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IDVAR           reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    TIMESTIMES      reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    PRIVATE         reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    PUBLIC          reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    PROTECTED       reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    INCLUDE         reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DO              reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSEIF          reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 70 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)


state 218

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt . statement_list echo_stmt RBLOCK
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMICOLON
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (15) echo_stmt -> echo_stmt . ECHO NUMBER SEMICOLON
    (16) echo_stmt -> echo_stmt . ECHO boolean SEMICOLON
    (17) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON
    (55) statement_list -> . statement_list statement
    (56) statement_list -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 37
    LBLOCK          reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    SWITCH          reduce using rule 118 (empty -> .)
    CASE            reduce using rule 118 (empty -> .)
    DEFAULT         reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CLASS           reduce using rule 118 (empty -> .)
    PRIVATE         reduce using rule 118 (empty -> .)
    PUBLIC          reduce using rule 118 (empty -> .)
    PROTECTED       reduce using rule 118 (empty -> .)
    IDVAR           reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)
    NUMBER          reduce using rule 118 (empty -> .)
    TRUE            reduce using rule 118 (empty -> .)
    FALSE           reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)

  ! ECHO            [ reduce using rule 118 (empty -> .) ]

    statement_list                 shift and go to state 227
    empty                          shift and go to state 228

state 219

    (53) local_declarations -> local_declarations var_declaration .

    IDVAR           reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    TIMESTIMES      reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    AMPERSANT       reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    ECHO            reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    DO              reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    CLASS           reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    PRIVATE         reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    PUBLIC          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    PROTECTED       reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    TRUE            reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    FALSE           reduce using rule 53 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 53 (local_declarations -> local_declarations var_declaration .)


state 220

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON . additive_expression RPAREN statement
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    IDVAR           shift and go to state 171
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    additive_expression            shift and go to state 229
    term                           shift and go to state 68
    factor                         shift and go to state 69
    var                            shift and go to state 71
    boolean                        shift and go to state 85

state 221

    (74) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 230


state 222

    (111) args_list -> args_list COMMA expression .
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    COMMA           reduce using rule 111 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 111 (args_list -> args_list COMMA expression .)
    AND             shift and go to state 147
    OR              shift and go to state 148


state 223

    (116) constructor -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 116 (constructor -> ID LPAREN RPAREN .)


state 224

    (117) constructor -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 231


state 225

    (67) selection -> ELSE statement .

    ELSE            reduce using rule 67 (selection -> ELSE statement .)
    ELSEIF          reduce using rule 67 (selection -> ELSE statement .)
    CLOSETAG        reduce using rule 67 (selection -> ELSE statement .)
    IDVAR           reduce using rule 67 (selection -> ELSE statement .)
    TIMESTIMES      reduce using rule 67 (selection -> ELSE statement .)
    AMPERSANT       reduce using rule 67 (selection -> ELSE statement .)
    FUNCTION        reduce using rule 67 (selection -> ELSE statement .)
    PRIVATE         reduce using rule 67 (selection -> ELSE statement .)
    PUBLIC          reduce using rule 67 (selection -> ELSE statement .)
    PROTECTED       reduce using rule 67 (selection -> ELSE statement .)
    REQUIRE         reduce using rule 67 (selection -> ELSE statement .)
    INCLUDE         reduce using rule 67 (selection -> ELSE statement .)
    CLASS           reduce using rule 67 (selection -> ELSE statement .)
    IF              reduce using rule 67 (selection -> ELSE statement .)
    SWITCH          reduce using rule 67 (selection -> ELSE statement .)
    CASE            reduce using rule 67 (selection -> ELSE statement .)
    DEFAULT         reduce using rule 67 (selection -> ELSE statement .)
    FOR             reduce using rule 67 (selection -> ELSE statement .)
    WHILE           reduce using rule 67 (selection -> ELSE statement .)
    DO              reduce using rule 67 (selection -> ELSE statement .)
    ID              reduce using rule 67 (selection -> ELSE statement .)
    ECHO            reduce using rule 67 (selection -> ELSE statement .)
    BREAK           reduce using rule 67 (selection -> ELSE statement .)
    SEMICOLON       reduce using rule 67 (selection -> ELSE statement .)
    RBLOCK          reduce using rule 67 (selection -> ELSE statement .)
    LBLOCK          reduce using rule 67 (selection -> ELSE statement .)
    RETURN          reduce using rule 67 (selection -> ELSE statement .)
    LPAREN          reduce using rule 67 (selection -> ELSE statement .)
    NUMBER          reduce using rule 67 (selection -> ELSE statement .)
    TRUE            reduce using rule 67 (selection -> ELSE statement .)
    FALSE           reduce using rule 67 (selection -> ELSE statement .)


state 226

    (68) selection -> ELSEIF statement . selection
    (67) selection -> . ELSE statement
    (68) selection -> . ELSEIF statement selection

    ELSE            shift and go to state 214
    ELSEIF          shift and go to state 215

    selection                      shift and go to state 232

state 227

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list . echo_stmt RBLOCK
    (55) statement_list -> statement_list . statement
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (118) empty -> .
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBLOCK          reduce using rule 118 (empty -> .)
    ECHO            reduce using rule 118 (empty -> .)
    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUMBER          [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    echo_stmt                      shift and go to state 233
    statement                      shift and go to state 234
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    expression                     shift and go to state 97
    var                            shift and go to state 81
    additive_expression            shift and go to state 67
    area                           shift and go to state 100
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 228

    (56) statement_list -> empty .

    LBLOCK          reduce using rule 56 (statement_list -> empty .)
    IF              reduce using rule 56 (statement_list -> empty .)
    SWITCH          reduce using rule 56 (statement_list -> empty .)
    CASE            reduce using rule 56 (statement_list -> empty .)
    DEFAULT         reduce using rule 56 (statement_list -> empty .)
    FOR             reduce using rule 56 (statement_list -> empty .)
    WHILE           reduce using rule 56 (statement_list -> empty .)
    DO              reduce using rule 56 (statement_list -> empty .)
    RETURN          reduce using rule 56 (statement_list -> empty .)
    CLASS           reduce using rule 56 (statement_list -> empty .)
    PRIVATE         reduce using rule 56 (statement_list -> empty .)
    PUBLIC          reduce using rule 56 (statement_list -> empty .)
    PROTECTED       reduce using rule 56 (statement_list -> empty .)
    IDVAR           reduce using rule 56 (statement_list -> empty .)
    LPAREN          reduce using rule 56 (statement_list -> empty .)
    NUMBER          reduce using rule 56 (statement_list -> empty .)
    TRUE            reduce using rule 56 (statement_list -> empty .)
    FALSE           reduce using rule 56 (statement_list -> empty .)
    RBLOCK          reduce using rule 56 (statement_list -> empty .)
    ECHO            reduce using rule 56 (statement_list -> empty .)


state 229

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression . RPAREN statement
    (93) additive_expression -> additive_expression . addop term
    (97) addop -> . PLUS
    (98) addop -> . MINUS

    RPAREN          shift and go to state 235
    PLUS            shift and go to state 125
    MINUS           shift and go to state 126

    addop                          shift and go to state 117

state 230

    (74) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN . expression RPAREN
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    expression                     shift and go to state 236
    var                            shift and go to state 81
    simple_expression              shift and go to state 82
    additive_expression            shift and go to state 67
    term                           shift and go to state 68
    factor                         shift and go to state 69
    boolean                        shift and go to state 85

state 231

    (117) constructor -> ID LPAREN args RPAREN .

    SEMICOLON       reduce using rule 117 (constructor -> ID LPAREN args RPAREN .)


state 232

    (68) selection -> ELSEIF statement selection .

    ELSE            reduce using rule 68 (selection -> ELSEIF statement selection .)
    ELSEIF          reduce using rule 68 (selection -> ELSEIF statement selection .)
    CLOSETAG        reduce using rule 68 (selection -> ELSEIF statement selection .)
    IDVAR           reduce using rule 68 (selection -> ELSEIF statement selection .)
    TIMESTIMES      reduce using rule 68 (selection -> ELSEIF statement selection .)
    AMPERSANT       reduce using rule 68 (selection -> ELSEIF statement selection .)
    FUNCTION        reduce using rule 68 (selection -> ELSEIF statement selection .)
    PRIVATE         reduce using rule 68 (selection -> ELSEIF statement selection .)
    PUBLIC          reduce using rule 68 (selection -> ELSEIF statement selection .)
    PROTECTED       reduce using rule 68 (selection -> ELSEIF statement selection .)
    REQUIRE         reduce using rule 68 (selection -> ELSEIF statement selection .)
    INCLUDE         reduce using rule 68 (selection -> ELSEIF statement selection .)
    CLASS           reduce using rule 68 (selection -> ELSEIF statement selection .)
    IF              reduce using rule 68 (selection -> ELSEIF statement selection .)
    SWITCH          reduce using rule 68 (selection -> ELSEIF statement selection .)
    CASE            reduce using rule 68 (selection -> ELSEIF statement selection .)
    DEFAULT         reduce using rule 68 (selection -> ELSEIF statement selection .)
    FOR             reduce using rule 68 (selection -> ELSEIF statement selection .)
    WHILE           reduce using rule 68 (selection -> ELSEIF statement selection .)
    DO              reduce using rule 68 (selection -> ELSEIF statement selection .)
    ID              reduce using rule 68 (selection -> ELSEIF statement selection .)
    ECHO            reduce using rule 68 (selection -> ELSEIF statement selection .)
    BREAK           reduce using rule 68 (selection -> ELSEIF statement selection .)
    SEMICOLON       reduce using rule 68 (selection -> ELSEIF statement selection .)
    RBLOCK          reduce using rule 68 (selection -> ELSEIF statement selection .)
    LBLOCK          reduce using rule 68 (selection -> ELSEIF statement selection .)
    RETURN          reduce using rule 68 (selection -> ELSEIF statement selection .)
    LPAREN          reduce using rule 68 (selection -> ELSEIF statement selection .)
    NUMBER          reduce using rule 68 (selection -> ELSEIF statement selection .)
    TRUE            reduce using rule 68 (selection -> ELSEIF statement selection .)
    FALSE           reduce using rule 68 (selection -> ELSEIF statement selection .)


state 233

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt . RBLOCK
    (13) echo_stmt -> echo_stmt . ECHO STRING SEMICOLON
    (14) echo_stmt -> echo_stmt . ECHO IDVAR SEMICOLON
    (15) echo_stmt -> echo_stmt . ECHO NUMBER SEMICOLON
    (16) echo_stmt -> echo_stmt . ECHO boolean SEMICOLON
    (17) echo_stmt -> echo_stmt . ECHO fun_declaration SEMICOLON
    (63) statement -> echo_stmt .

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    RBLOCK          shift and go to state 237
    ECHO            shift and go to state 37
    LBLOCK          reduce using rule 63 (statement -> echo_stmt .)
    IF              reduce using rule 63 (statement -> echo_stmt .)
    SWITCH          reduce using rule 63 (statement -> echo_stmt .)
    CASE            reduce using rule 63 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 63 (statement -> echo_stmt .)
    FOR             reduce using rule 63 (statement -> echo_stmt .)
    WHILE           reduce using rule 63 (statement -> echo_stmt .)
    DO              reduce using rule 63 (statement -> echo_stmt .)
    RETURN          reduce using rule 63 (statement -> echo_stmt .)
    CLASS           reduce using rule 63 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 63 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 63 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 63 (statement -> echo_stmt .)
    IDVAR           reduce using rule 63 (statement -> echo_stmt .)
    LPAREN          reduce using rule 63 (statement -> echo_stmt .)
    NUMBER          reduce using rule 63 (statement -> echo_stmt .)
    TRUE            reduce using rule 63 (statement -> echo_stmt .)
    FALSE           reduce using rule 63 (statement -> echo_stmt .)

  ! RBLOCK          [ reduce using rule 63 (statement -> echo_stmt .) ]
  ! ECHO            [ reduce using rule 63 (statement -> echo_stmt .) ]


state 234

    (55) statement_list -> statement_list statement .

    LBLOCK          reduce using rule 55 (statement_list -> statement_list statement .)
    IF              reduce using rule 55 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 55 (statement_list -> statement_list statement .)
    CASE            reduce using rule 55 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 55 (statement_list -> statement_list statement .)
    FOR             reduce using rule 55 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 55 (statement_list -> statement_list statement .)
    DO              reduce using rule 55 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 55 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 55 (statement_list -> statement_list statement .)
    PRIVATE         reduce using rule 55 (statement_list -> statement_list statement .)
    PUBLIC          reduce using rule 55 (statement_list -> statement_list statement .)
    PROTECTED       reduce using rule 55 (statement_list -> statement_list statement .)
    IDVAR           reduce using rule 55 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 55 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 55 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 55 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 55 (statement_list -> statement_list statement .)
    RBLOCK          reduce using rule 55 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 55 (statement_list -> statement_list statement .)


state 235

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN . statement
    (57) statement -> . expression_stmt
    (58) statement -> . compount_stmt
    (59) statement -> . selection_stmt
    (60) statement -> . iteration_stmt
    (61) statement -> . return_stmt
    (62) statement -> . class_declaration
    (63) statement -> . echo_stmt
    (64) expression_stmt -> . expression SEMICOLON
    (52) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (65) selection_stmt -> . IF LPAREN expression RPAREN statement
    (66) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (69) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (70) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (71) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (72) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (73) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (74) iteration_stmt -> . DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN
    (75) return_stmt -> . RETURN SEMICOLON
    (76) return_stmt -> . RETURN expression SEMICOLON
    (21) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (22) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (13) echo_stmt -> . echo_stmt ECHO STRING SEMICOLON
    (14) echo_stmt -> . echo_stmt ECHO IDVAR SEMICOLON
    (15) echo_stmt -> . echo_stmt ECHO NUMBER SEMICOLON
    (16) echo_stmt -> . echo_stmt ECHO boolean SEMICOLON
    (17) echo_stmt -> . echo_stmt ECHO fun_declaration SEMICOLON
    (18) echo_stmt -> . empty
    (77) expression -> . var EQUAL expression
    (78) expression -> . simple_expression
    (79) expression -> . var EQUAL AMPERSANT IDVAR
    (80) expression -> . expression AND expression
    (81) expression -> . expression OR expression
    (27) area -> . PRIVATE
    (28) area -> . PUBLIC
    (29) area -> . PROTECTED
    (118) empty -> .
    (82) var -> . IDVAR
    (83) var -> . IDVAR LBRACKET expression RBRACKET
    (84) simple_expression -> . additive_expression relop additive_expression
    (85) simple_expression -> . additive_expression
    (93) additive_expression -> . additive_expression addop term
    (94) additive_expression -> . term
    (95) additive_expression -> . term MINUSMINUS
    (96) additive_expression -> . term PLUSPLUS
    (99) term -> . term mulop factor
    (100) term -> . factor
    (103) factor -> . LPAREN expression RPAREN
    (104) factor -> . var
    (105) factor -> . NUMBER
    (106) factor -> . boolean
    (107) factor -> . IDVAR LPAREN args RPAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDVAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 98
    IF              shift and go to state 26
    SWITCH          shift and go to state 27
    CASE            shift and go to state 28
    DEFAULT         shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    RETURN          shift and go to state 99
    CLASS           shift and go to state 24
    PRIVATE         shift and go to state 19
    PUBLIC          shift and go to state 20
    PROTECTED       shift and go to state 21
    ECHO            reduce using rule 118 (empty -> .)
    ELSE            reduce using rule 118 (empty -> .)
    ELSEIF          reduce using rule 118 (empty -> .)
    CLOSETAG        reduce using rule 118 (empty -> .)
    TIMESTIMES      reduce using rule 118 (empty -> .)
    AMPERSANT       reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    REQUIRE         reduce using rule 118 (empty -> .)
    INCLUDE         reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    BREAK           reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RBLOCK          reduce using rule 118 (empty -> .)
    IDVAR           shift and go to state 83
    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 84
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

  ! IDVAR           [ reduce using rule 118 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 118 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 118 (empty -> .) ]
  ! CLASS           [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! SWITCH          [ reduce using rule 118 (empty -> .) ]
  ! CASE            [ reduce using rule 118 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! DO              [ reduce using rule 118 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 118 (empty -> .) ]
  ! RETURN          [ reduce using rule 118 (empty -> .) ]
  ! LPAREN          [ reduce using rule 118 (empty -> .) ]
  ! NUMBER          [ reduce using rule 118 (empty -> .) ]
  ! TRUE            [ reduce using rule 118 (empty -> .) ]
  ! FALSE           [ reduce using rule 118 (empty -> .) ]

    expression                     shift and go to state 97
    additive_expression            shift and go to state 67
    statement                      shift and go to state 238
    expression_stmt                shift and go to state 90
    compount_stmt                  shift and go to state 91
    selection_stmt                 shift and go to state 92
    iteration_stmt                 shift and go to state 93
    return_stmt                    shift and go to state 94
    class_declaration              shift and go to state 95
    echo_stmt                      shift and go to state 96
    var                            shift and go to state 81
    area                           shift and go to state 100
    boolean                        shift and go to state 85
    empty                          shift and go to state 25
    simple_expression              shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69

state 236

    (74) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression . RPAREN
    (80) expression -> expression . AND expression
    (81) expression -> expression . OR expression

    RPAREN          shift and go to state 239
    AND             shift and go to state 147
    OR              shift and go to state 148


state 237

    (52) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .

    BREAK           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SEMICOLON       reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSE            reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSEIF          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CLOSETAG        reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    IDVAR           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TIMESTIMES      reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    AMPERSANT       reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FUNCTION        reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PRIVATE         reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PUBLIC          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PROTECTED       reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    REQUIRE         reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    INCLUDE         reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CLASS           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    IF              reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SWITCH          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CASE            reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DEFAULT         reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FOR             reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    WHILE           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DO              reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ID              reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ECHO            reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RBLOCK          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LBLOCK          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RETURN          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LPAREN          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    NUMBER          reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TRUE            reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FALSE           reduce using rule 52 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)


state 238

    (72) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .

    CLOSETAG        reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IDVAR           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    TIMESTIMES      reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    AMPERSANT       reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    PRIVATE         reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    PUBLIC          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    PROTECTED       reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    REQUIRE         reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    INCLUDE         reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CLASS           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IF              reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SWITCH          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CASE            reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FOR             reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    WHILE           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DO              reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ID              reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ECHO            reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    BREAK           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SEMICOLON       reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSE            reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSEIF          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RETURN          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LPAREN          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    NUMBER          reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    TRUE            reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FALSE           reduce using rule 72 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)


state 239

    (74) iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .

    CLOSETAG        reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    IDVAR           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    TIMESTIMES      reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    PRIVATE         reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    PUBLIC          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    PROTECTED       reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    REQUIRE         reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    INCLUDE         reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    CLASS           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    ECHO            reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    ELSEIF          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    LBLOCK          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    NUMBER          reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    TRUE            reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)
    FALSE           reduce using rule 74 (iteration_stmt -> DO LBLOCK statement SEMICOLON RBLOCK WHILE LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDVAR in state 2 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 2 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 2 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 2 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 2 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 2 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for CASE in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for DO in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSETAG in state 3 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 3 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 3 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 3 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 3 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 3 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 3 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for CASE in state 3 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 10 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 38 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 38 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 38 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 63 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 64 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 65 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 72 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 72 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 72 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 73 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 73 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 73 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 96 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 110 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 113 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 113 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 113 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 114 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 146 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 146 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 146 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 146 resolved as shift
WARNING: shift/reduce conflict for IF in state 146 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 146 resolved as shift
WARNING: shift/reduce conflict for CASE in state 146 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 146 resolved as shift
WARNING: shift/reduce conflict for FOR in state 146 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 146 resolved as shift
WARNING: shift/reduce conflict for DO in state 146 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 146 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 146 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 146 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 146 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 146 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 146 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 146 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 150 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 150 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 150 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 150 resolved as shift
WARNING: shift/reduce conflict for IF in state 150 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 150 resolved as shift
WARNING: shift/reduce conflict for CASE in state 150 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 150 resolved as shift
WARNING: shift/reduce conflict for FOR in state 150 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 150 resolved as shift
WARNING: shift/reduce conflict for DO in state 150 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 150 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 150 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 150 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 150 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 150 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 150 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 150 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 154 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 158 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 158 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 158 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 158 resolved as shift
WARNING: shift/reduce conflict for IF in state 158 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 158 resolved as shift
WARNING: shift/reduce conflict for CASE in state 158 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 158 resolved as shift
WARNING: shift/reduce conflict for FOR in state 158 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 158 resolved as shift
WARNING: shift/reduce conflict for DO in state 158 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 158 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 158 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 158 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 158 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 158 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 158 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 158 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 187 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 187 resolved as shift
WARNING: shift/reduce conflict for AND in state 188 resolved as shift
WARNING: shift/reduce conflict for OR in state 188 resolved as shift
WARNING: shift/reduce conflict for AND in state 189 resolved as shift
WARNING: shift/reduce conflict for OR in state 189 resolved as shift
WARNING: shift/reduce conflict for AND in state 190 resolved as shift
WARNING: shift/reduce conflict for OR in state 190 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 195 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 207 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 209 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 214 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 214 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 214 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 214 resolved as shift
WARNING: shift/reduce conflict for IF in state 214 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 214 resolved as shift
WARNING: shift/reduce conflict for CASE in state 214 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 214 resolved as shift
WARNING: shift/reduce conflict for FOR in state 214 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 214 resolved as shift
WARNING: shift/reduce conflict for DO in state 214 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 214 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 214 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 214 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 214 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 214 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 214 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 214 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 218 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 227 resolved as shift
WARNING: shift/reduce conflict for IF in state 227 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 227 resolved as shift
WARNING: shift/reduce conflict for CASE in state 227 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 227 resolved as shift
WARNING: shift/reduce conflict for FOR in state 227 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 227 resolved as shift
WARNING: shift/reduce conflict for DO in state 227 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 227 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 227 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 227 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 227 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 227 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 227 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 227 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 227 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 227 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 227 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 233 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 233 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 235 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 235 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 235 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 235 resolved as shift
WARNING: shift/reduce conflict for IF in state 235 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 235 resolved as shift
WARNING: shift/reduce conflict for CASE in state 235 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 235 resolved as shift
WARNING: shift/reduce conflict for FOR in state 235 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 235 resolved as shift
WARNING: shift/reduce conflict for DO in state 235 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 235 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 235 resolved as shift
WARNING: shift/reduce conflict for IDVAR in state 235 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 235 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 235 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 235 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 235 resolved as shift
